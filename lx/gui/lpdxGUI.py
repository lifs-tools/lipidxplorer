#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Jun 27 20:20:15 2008

# for debugging
#from guppy import hpy

import sys
import os
import webbrowser
import wx
import wx.stc as stc
import wx.lib.buttons as buttons
import wx.lib.fancytext as fancytext
import wx.grid
import wx.html
import csv
import re
import configparser
import threading
import multiprocessing
import traceback

from wx.lib.newevent import NewEvent
import queue

sysPath = '..' + os.sep + 'lib'
sys.path.append(sysPath)

from lx.lxMain import startMFQL

# the MFQL editor
from lx.gui.editor import PythonSTC

# those are for the MS-Tools. TODO: out source
from lx.mfql.chemParser import parseElemSeq
from lx.mfql.chemsc import calcSFbyMass
from lx.mfql.isotope import isotopicValuesInter, isotopicValues
from lx.mfql.runtimeStatic import TypeTolerance

# the lipid identification routines
from lx.lipidIdentification import syntaxCheck
from lx.spectraImport import getInputFiles, doImport

# the (one and only) exception
from lx.exceptions import LipidXException, SyntaxErrorException,\
		LogicErrorException, ImportException

#from lpdxSCTools import *
from lx.gui.sampleGrouping import ChooseGroupsFrame
from lx.project import Project, GUIProject
from lx.tools import staticTypeDict, odict, strToBool

from lx.debugger import Debug, DebugSet, DebugUnset

balloontip = True
try:
	import wx.lib.agw.balloontip as BT
except ImportError:
	balloontip = False


#import lpdxSCC
import platform
pf = platform.system()
if re.match('.*LINUX.*', pf, re.IGNORECASE):
	playSound = False
if re.match('.*CYGWIN_NT.*', pf, re.IGNORECASE):
	playSound = False
if re.match('.*WINDOWS.*', pf, re.IGNORECASE):
	playSound = False

# for exception forwarding
def formatExceptionInfo(maxTBlevel=None):
    cla, exc, trbk = sys.exc_info()
    excName = cla.__name__
    try:
        #excArgs = exc.__dict__["args"]
        excArgs = exc.args
    except KeyError:
        excArgs = "<no args>"
    excTb = traceback.format_tb(trbk, maxTBlevel)
    return (excName, excArgs, excTb, exc)

# Define File Drop Target class
class FileDropTarget(wx.FileDropTarget):
	""" This object implements Drop Target functionality for Files """
	def __init__(self, obj, callback, fileExt):
		""" Initialize the Drop Target, passing in the Object Reference to
			indicate what should receive the dropped files """
		# Initialize the wsFileDropTarget Object
		wx.FileDropTarget.__init__(self)
		# Store the Object Reference for dropped files
		self.obj = obj
		self.fileExt = fileExt

		self._callback = callback

	def OnDropFiles(self, x, y, filenames):
		""" Implement File Drop """
		# append a list of the file names dropped
		if len(filenames) > 1:
			raise LipidXException("Only a single file is dropable here.")

		if re.match('(.*\.%s$)' % (self.fileExt), filenames[0]):
			self._callback(filenames[0])

# Define File Drop Target class
class DrawerDropTarget(wx.FileDropTarget):
	""" This object implements Drop Target functionality for folders """
	def __init__(self, obj, callback):
		""" Initialize the Drop Target, passing in the Object Reference to
			indicate what should receive the dropped files """
		# Initialize the wsFileDropTarget Object
		wx.FileDropTarget.__init__(self)
		# Store the Object Reference for dropped files
		self.obj = obj

		self._callback = callback

	def OnDropFiles(self, x, y, filenames):
		""" Implement File Drop """
		# append a list of the file names dropped
		if len(filenames) > 1:
			raise LipidXException("Only a single file is dropable here.")

		if not os.path.isdir(filenames[0]):
			raise LipidXException("Only folders are dropable here.")

		self.obj.WriteText(filenames[0])

		self._callback(filenames[0])

###########################################
### Define MasterScan Drop Target class ###

class FileDrawerDropTarget(wx.FileDropTarget):
	""" This object implements Drop Target functionality for Files and Directories """
	def __init__(self, obj, callback, fileExt):

		# Initialize the wx.FileDropTarget Object
		wx.FileDropTarget.__init__(self)
		# Store the Object Reference for dropped files
		self.obj = obj
		self.fileExt = fileExt

		self._callback = callback

	def OnDropFiles(self, x, y, filenames):
		""" Implement File Drop """
		# append a list of the file names dropped

		if len(filenames) > 1:
			raise LipidXException("Only a single file is dropable here.")

		else:
			p = filenames[0]
			if os.path.isdir(p):
				for root, dirs, files in os.walk(p):
					for f in files:
						if re.match('(.*\.%s$)' % (self.fileExt), f):
							n = os.path.join(root, f)
							self.obj.WriteText(n)
							self._callback(n)
			else:
				self.obj.WriteText(p)
				self._callback(p)

class GeneralFileDrawerDropTarget(FileDrawerDropTarget):
	""" This object implements Drop Target functionality for Files and Directories """
	def __init__(self, obj, callback, fileExt):

		# Initialize the wx.FileDropTarget Object
		wx.FileDropTarget.__init__(self)
		# Store the Object Reference for dropped files
		self.obj = obj
		self.fileExt = fileExt

		self._callback = callback

	def OnDropFiles(self, x, y, filenames):
		""" Implement File Drop """
		# append a list of the file names dropped

		if len(filenames) > 1:
			raise LipidXException("Only a single file is dropable here.")

		else:
			p = filenames[0]
			if os.path.isdir(p):
				for root, dirs, files in os.walk(p):
					for f in files:
						if re.match('(.*\.%s$)' % (self.fileExt), f):
							n = os.path.join(root, f)
							self._callback(n)
			else:
				self._callback(p)

### Define MasterScan Drop Target class ###
###########################################


# Define Text Drop Target class
class MFQLDropTarget(wx.FileDropTarget):
	""" This object implements Drop Target functionality for Text """
	def __init__(self, obj, parent):

		# Initialize the wx.FileDropTarget Object
		wx.FileDropTarget.__init__(self)
		# Store the Object Reference for dropped files
		self.obj = obj

		self.parent = parent

	def OnDropFiles(self, x, y, filenames):
		""" Implement File Drop """
		# append a list of the file names dropped
		for p in filenames:

			if os.path.isdir(p):
				for root, dirs, files in os.walk(p):
					for f in files:
						if re.match('(.*\.mfql$)', f):
							n = os.path.join(root, f)
							self.parent.filePath_AddMFQL.append(n)
							l = n.split(os.sep)
							self.parent.dictMFQLScripts[l[-1]] = n
			else:
				self.parent.filePath_AddMFQL.append(p)
				l = p.split(os.sep)
				self.parent.dictMFQLScripts[l[-1]] = p

		#self.parent.list_box_1.Set(sorted(self.parent.dictMFQLScripts.keys()))
		self.parent.list_box_1.Set(list(self.parent.dictMFQLScripts.keys()))


USE_GENERIC = 1
if USE_GENERIC:
	from wx.lib.stattext import GenStaticText as StaticText
else:
	StaticText = wx.StaticText

# begin wxGlade: extracode
# end wxGlade

def relativePath(fullpath):

	loc = os.getcwd()
	listLoc = loc.split(os.sep)
	listFullPath = fullpath.split(os.sep)

	index = 0
	while index < max(len(listFullPath), len(listLoc)):
		if listLoc != []:
			if listFullPath[index] == listLoc[index]:
				del listFullPath[index]
				del listLoc[index]
			else:
				for index in range(len(listLoc)):
					listLoc[index] = '..'
				listLoc += listFullPath

				strRTR = '%s' % listLoc[0]
				for i in listLoc[1:]:
					strRTR += os.sep + i
				return strRTR

		elif listFullPath:
			strRTR = '%s' % listFullPath[0]
			for i in listFullPath[1:]:
				strRTR += os.sep + i
			return strRTR
		else:
			return '.'

	if not listFullPath:
		return '.'

def opj(path):
	"""Convert paths to the platform-specific separator"""
	import os

	st = os.path.join(*tuple(path.split('/')))
	# HACK: on Linux, a leading / gets lost...
	if path.startswith('/'):
	    st = '/' + st
	return st

ID_BEGIN=100
wxStdOut, EVT_STDOUT= NewEvent()
wxWriteDebug, EVT_WRITE_DEBUG = NewEvent()
wxWorkerDone, EVT_WORKER_DONE = NewEvent()

wxProgressDLG_Update, EVT_PROGRESSDLG_UPDATE = NewEvent()

class Worker(threading.Thread):

	requestID = 0
	def __init__(self, parent, requestQ, resultQ, **kwds):
		threading.Thread.__init__(self, **kwds)
		#self.setDaemon(True)
		self.setDaemon(False)
		self.requestQ = queue.Queue()#requestQ
		self.resultQ = queue.Queue()#resultQ
		self.parent = wx.GetApp()
		self.start()

	def beginThread(self, callable, *args, **kwds):
		Worker.requestID +=1
		self.requestQ.put((Worker.requestID, callable, args, kwds))
		return Worker.requestID

	def run(self):

		sys.stdout = SysOutListener()
		print("\n***Debugging Mode!***")
		sys.stderr = SysOutListener()
		while True:
			dlg = None
			requestID, callable, args, kwds = self.requestQ.get()
			try:
				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)
				self.resultQ.put((requestID, callable(*args, **kwds)))

				result = self.resultQ.get()[1]

				if result == self.parent.frame.CONST_THREAD_SUCCESSFUL:
					dlg = wx.MessageDialog(wx.GetApp().frame, "Task completed.", "Ready", wx.OK|wx.ICON_INFORMATION)

				elif result == self.parent.frame.CONST_THREAD_USER_ABORT:
					dlg = wx.MessageDialog(wx.GetApp().frame, "User aborted.", "Ready", wx.OK|wx.ICON_EXCLAMATION)

				if dlg is not None:
					if dlg.ShowModal() == wx.ID_OK:
						dlg.Destroy()

			except SyntaxErrorException:
				evt = wxStdOut(text = '')#v.value)
				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)
				wx.PostEvent(wx.GetApp().frame, evt)

				(excName, excArgs, excTb, exc) = formatExceptionInfo()
				dlg = wx.MessageDialog(wx.GetApp().frame,"%s" % (exc), "SYNTAX ERROR", wx.OK|wx.ICON_ERROR)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()

			except LogicErrorException:
				evt = wxStdOut(text = '')#v.value)
				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)
				wx.PostEvent(wx.GetApp().frame, evt)

				(excName, excArgs, excTb, exc) = formatExceptionInfo()
				dlg = wx.MessageDialog(wx.GetApp().frame, "%s" % exc, "LOGICAL ERROR", wx.OK|wx.ICON_ERROR)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()

			except LipidXException:

				#wx.GetApp().frame.handleLipidXException()

				evt = wxStdOut(text = '')#v.value)
				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)
				wx.PostEvent(wx.GetApp().frame, evt)

				(excName, excArgs, excTb, exc) = formatExceptionInfo()
				dlg = wx.MessageDialog(wx.GetApp().frame, "%s" % exc, "ERROR", wx.OK|wx.ICON_ERROR)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()

			except ImportException:
				evt = wxStdOut(text = '')#v.value)
				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)
				wx.PostEvent(wx.GetApp().frame, evt)

				(excName, excArgs, excTb, exc) = formatExceptionInfo()
				dlg = wx.MessageDialog(wx.GetApp().frame, "%s" % exc, "IMPORT ERROR", wx.OK|wx.ICON_ERROR)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()


			except Exception:
				traceback.print_tb(sys.exc_info()[2])
				evt = wxStdOut(text = '')
				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)
				wx.PostEvent(wx.GetApp().frame, evt)
				(excName, excArgs, excTb, exc) = formatExceptionInfo()
				print(excName, exc)

				text = "The following error occured:\n\n"
				text += "** %s : %s **\n\n\n" % (excName, exc)
				text += "If you think that this a bug in the software you can send\na bug report to the us.\n"
				text += "Do you want to generate the bug report?"
				dlg = wx.MessageDialog(wx.GetApp().frame, text, "ERROR", style=wx.YES_NO|wx.CANCEL|wx.NO_DEFAULT)
				#dlg = MyErrorDialog(wx.GetApp().frame, -1, "ERROR", 'bla')
				r = dlg.ShowModal()
				if r == wx.ID_YES:

					dlg = wx.MessageDialog(wx.GetApp().frame, "Please store the bugReport.html and send it to lifs-support@isas.de", \
							"ERROR", style=wx.OK)
					if dlg.ShowModal() == wx.ID_OK:
						dlg.Destroy()

					strBugReport = """
					<html><head></head><body>
					<h3>%s</h3>
					<h3>%s</h3>
					<h3>%s</h3>
					<p><tt>
					""" % (sys.version, excName, exc)
					for i in excTb:
						strBugReport += "%s<br>" % i
					strBugReport += "</tt></p><br>"
					strBugReport += "%s" % wx.GetApp().frame.genBugReportHTML()
					strBugReport += "</body></html>"

					dlg = wx.FileDialog(wx.GetApp().frame, "Specify the site for the bugReport.html",
						style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT,
						defaultFile = "bugReport.html")
					dlg.SetWildcard("*.html files|*.html")

					if dlg.ShowModal() == wx.ID_OK:
						d = dlg.GetPath()
						with open(d, 'w') as f:
							f.write(strBugReport)
						print(d)

				else:
					dlg.Destroy()

				#dlg = wx.MessageDialog(wx.GetApp().frame,"%s: %s" % (excName, exc), "Error.", wx.OK|wx.ICON_ERROR)
				#if dlg.ShowModal() == wx.ID_OK:
				#	dlg.Destroy()

			evt = wxWorkerDone(msg = callable.__name__)
			wx.PostEvent(wx.GetApp().frame, evt)


			#evt = wxWorkerDone()
			#wx.PostEvent(wx.GetApp().frame, evt)
				#self.resultQ.put((requestID, callable(*args, **kwds)))
				#evt = wxWorkerDone()
				#wx.PostEvent(wx.GetApp().frame, evt)
				#str = traceback.print_tb(sys.exc_info()[2]).join('/n')
				#evt = wxStdOut(text = traceback.print_tb(sys.exc_info()[2]))
				#evt = wxStdOut(text = str)
		#	print traceback.print_tb(sys.exc_info()[2])

class SysOutListener:
	def write(self, string):
		#sys.__stdout__.write(string)
		evt = wxStdOut(text=string)
		#wx.PostEvent(wx.GetApp().frame.output_window, evt)
		wx.PostEvent(wx.GetApp().frame, evt)

class MyErrorDialog(wx.Dialog):

	def __init__(self, parent, id, title, text):

		wx.Dialog.__init__(self, parent, id, title, size=(400, 230))

		self.sizer_v1 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_b1 = wx.StdDialogButtonSizer()

		self.button_ok = wx.Button(self, wx.ID_OK)
		self.button_ok.SetDefault()
		self.sizer_b1.Add(self.button_ok)
		self.sizer_b1.Realize()

		self.txt_error = wx.html.HtmlWindow(self)
		self.txt_error.SetPage(text)
		self.txt_error.SetSize((380,150))

		self.sizer_v1.Add(self.txt_error, 0, wx.EXPAND|wx.ALL, 5)
		self.sizer_v1.Add(self.sizer_b1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALL, 5)

		self.SetSizer(self.sizer_v1)
		#self.sizer_v1.Fit(self)

		self.Layout()

class MyHTMLDialog(wx.Dialog):

	def __init__(self, parent, id, title, text):
		wx.Dialog.__init__(self, parent, id, title, size=(400, 450))

class TextOutFrame(wx.Frame):

	def __init__(self, *args, **kwds):

		# begin wxGlade: LpdxFrame.__init__
		kwds["style"] = wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION \
		| wx.CLOSE_BOX | wx.CLIP_CHILDREN | wx.RESIZE_BORDER

		wx.Frame.__init__(self, *args, **kwds)
		#panel = wx.Panel(self, -1)

		self.parent = args[0]

		# for the progressDialog
		self.progressDialog = None

		self.sizer = wx.BoxSizer(wx.VERTICAL)
		self.text_ctrl = stc.StyledTextCtrl(self,
			style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.VSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE)#, size = wx.Point(835, 700))
		# IDEA: use styled text to make a syntax highlighting
		#self.text_ctrl = PythonSTC(self, -1,
		#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.VSCROLL|wx.TE_AUTO_SCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE)#, size = wx.Point(835, 700))
		self.text_ctrl.SetMarginType(0, stc.STC_MARGIN_NUMBER)
		self.text_ctrl.SetMarginWidth(0, 52)
		self.text_ctrl.StyleSetSpec(stc.STC_STYLE_DEFAULT, "size:10,face:NSimSun")
		self.text_ctrl.StyleSetSpec(stc.STC_STYLE_LINENUMBER, "size:9,face:Arial")
		self.text_ctrl.SetMinSize((self.GetSize()[0] - 40, self.GetSize()[1] - 150))
		self.text_ctrl.SetSize((self.GetSize()[0] - 40, self.GetSize()[1] - 150))
		self.text_ctrl.SetScrollWidth(3000)


		self.button_clear = wx.Button(self, -1, "Clear Buffer")
		self.button_clear.SetSize((20, 9))
		self.button_clear.SetMaxSize((120, 24))
		self.button_clear.SetMinSize((120, 24))

		#self.button_stop = wx.Button(self, -1, "Stop")
		#self.button_stop.SetSize((20, 9))
		#self.button_stop.SetMaxSize((120, 24))
		#self.button_stop.SetMinSize((120, 24))

		self.sizer_buttons = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_buttons.Add(self.button_clear, 0, wx.ADJUST_MINSIZE|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 10)
		#self.sizer_buttons.Add(self.button_stop, 0, wx.ADJUST_MINSIZE|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 10)
		self.sizer.Add(self.text_ctrl, 1, wx.EXPAND|wx.ALL, 10)
		self.sizer.Add(self.sizer_buttons, 0, wx.ADJUST_MINSIZE|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.ALL, 10)
		self.SetSizer(self.sizer)

		self.SetMinSize((860,400))
		self.SetSize((860,400))
		self.Layout()

		self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
		self.Bind(wx.EVT_BUTTON, self.OnClear, self.button_clear)
		#self.Bind(wx.EVT_BUTTON, self.OnStop, self.button_stop)

		self.listError = []

	def write(self, text):

		if re.match('.*lpdxUIExceptions.*', text):
			error = re.match('.*lpdxUIExceptions.*:(.*)', text).group(1)
			self.listError.append()

		self.text_ctrl.AppendText(text)

	def OnClear(self, evt):
		self.text_ctrl.ClearAll()

	def OnStop(self, evt):
		self.parent.isRunning = False

	def OnCloseWindow(self, evt):
		self.Show(False)
		self.parent.debugOpen = False

class SetDebugFrame(wx.Frame):

	def __init__(self, *args, **kwds):

		# begin wxGlade: LpdxFrame.__init__
		kwds["style"] = wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION \
		| wx.CLOSE_BOX | wx.CLIP_CHILDREN | wx.RESIZE_BORDER

		wx.Frame.__init__(self, *args, **kwds)
		#panel = wx.Panel(self, -1)

		self.parent = args[0]

		self.sizer = wx.BoxSizer(wx.VERTICAL)

		self.checkBox_IsotopicCorrection_MSMS = wx.CheckBox(self, -1, "MS/MS Type II Isotopic Correction debug output")
		self.checkBox_IsotopicCorrection_MSMS.SetToolTip(wx.ToolTip(
			"outputs debug information for MS/MS isotopic correction"))
		if Debug("isotopicCorrection"):
			self.checkBox_IsotopicCorrection_MSMS.SetValue(True)
		else:
			self.checkBox_IsotopicCorrection_MSMS.SetValue(False)

		self.checkBox_removeIsotopes = wx.CheckBox(self, -1, "Do not remove the isotopes (from Type II correction) from the result")
		self.checkBox_removeIsotopes.SetToolTip(wx.ToolTip(
			"do not remove the isotopes from the result"))
		if Debug("removeIsotopes"):
			self.checkBox_removeIsotopes.SetValue(False)
		else:
			self.checkBox_removeIsotopes.SetValue(True)

		self.checkBox_isotopesInMasterscan = wx.CheckBox(self, -1, "Show isotopic correction in MasterScan dump")
		self.checkBox_isotopesInMasterscan.SetToolTip(wx.ToolTip(
			"Show isotopic correction in MasterScan dump"))
		if Debug("isotopesInMasterScan"):
			self.checkBox_isotopesInMasterscan.SetValue(True)
		else:
			self.checkBox_isotopesInMasterscan.SetValue(False)

		self.checkBox_monoisotopicCorrection = wx.CheckBox(self, -1, "Don't do Type I isotopic correction.")
		self.checkBox_monoisotopicCorrection.SetToolTip(wx.ToolTip(
			"Don't do Type I isotopic correction."))
		if Debug("noMonoisotopicCorrection"):
			self.checkBox_monoisotopicCorrection.SetValue(True)
		else:
			self.checkBox_monoisotopicCorrection.SetValue(False)

		self.checkBox_relativeIntensity = wx.CheckBox(self, -1, "Print relative intensities in dump.")
		self.checkBox_relativeIntensity.SetToolTip(wx.ToolTip(
			"Print relative intensities."))
		if Debug("relativeIntensity"):
			self.checkBox_relativeIntensity.SetValue(True)
		else:
			self.checkBox_relativeIntensity.SetValue(False)

		self.checkBox_MemoryLog = wx.CheckBox(self, -1, "Log memory usage")
		self.checkBox_MemoryLog.SetToolTip(wx.ToolTip(
			"outputs the memory usage from the Python Windows process and the object heap"))
		if Debug("logMemory"):
			self.checkBox_MemoryLog.SetValue(True)
		else:
			self.checkBox_MemoryLog.SetValue(False)

		self.sizer.Add(self.checkBox_IsotopicCorrection_MSMS, 0, wx.LEFT|wx.TOP, 20)
		self.sizer.Add(self.checkBox_removeIsotopes, 0, wx.LEFT|wx.TOP, 20)
		self.sizer.Add(self.checkBox_isotopesInMasterscan, 0, wx.LEFT|wx.TOP, 20)
		self.sizer.Add(self.checkBox_monoisotopicCorrection, 0, wx.LEFT|wx.TOP, 20)
		self.sizer.Add(self.checkBox_relativeIntensity, 0, wx.LEFT|wx.TOP, 20)
		self.sizer.Add(self.checkBox_MemoryLog, 0, wx.LEFT|wx.TOP, 20)
		self.SetSizer(self.sizer)

		self.SetMinSize((300,200))
		self.Layout()

		self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
		self.Bind(wx.EVT_CHECKBOX, self.OnCheckMemoryLog, self.checkBox_MemoryLog)
		self.Bind(wx.EVT_CHECKBOX, self.OnCheckIsotopicCorrection_MSMS, self.checkBox_IsotopicCorrection_MSMS)
		self.Bind(wx.EVT_CHECKBOX, self.OnCheckRemoveIsotopes, self.checkBox_removeIsotopes)
		self.Bind(wx.EVT_CHECKBOX, self.OnCheckIsotopesInMasterScan, self.checkBox_isotopesInMasterscan)
		self.Bind(wx.EVT_CHECKBOX, self.OnCheckMonoisotopicCorrection, self.checkBox_monoisotopicCorrection)
		self.Bind(wx.EVT_CHECKBOX, self.OnCheckRelativeIntensity, self.checkBox_relativeIntensity)

	def OnCheckMemoryLog(self, evt):

		if self.checkBox_MemoryLog.GetValue():
			DebugSet("logMemory")
		else:
			DebugUnset("logMemory")

	def OnCheckIsotopicCorrection_MSMS(self, evt):

		if self.checkBox_IsotopicCorrection_MSMS.GetValue():
			DebugSet("isotopicCorrection")
		else:
			DebugUnset("isotopicCorrection")

	def OnCheckRemoveIsotopes(self, evt):

		if self.checkBox_removeIsotopes.GetValue():
			DebugUnset("removeIsotopes")
		else:
			DebugSet("removeIsotopes")

	def OnCheckIsotopesInMasterScan(self, evt):

		if self.checkBox_isotopesInMasterscan.GetValue():
			DebugSet("isotopesInMasterScan")
		else:
			DebugUnset("isotopesInMasterScan")

	def OnCheckMonoisotopicCorrection(self, evt):

		if self.checkBox_monoisotopicCorrection.GetValue():
			DebugSet("noMonoisotopicCorrection")
		else:
			DebugUnset("noMonoisotopicCorrection")

	def OnCheckRelativeIntensity(self, evt):

		if self.checkBox_relativeIntensity.GetValue():
			DebugSet("relativeIntensity")
		else:
			DebugUnset("relativeIntensity")

	def OnCloseWindow(self, evt):
		self.Show(False)

class SetAlignmentFrame(wx.Frame):

	def __init__(self, *args, **kwds):

		# begin wxGlade: LpdxFrame.__init__
		kwds["style"] = wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION \
		| wx.CLOSE_BOX | wx.CLIP_CHILDREN | wx.RESIZE_BORDER

		wx.Frame.__init__(self, *args, **kwds)
		#panel = wx.Panel(self, -1)

		self.parent = args[0]

		################################################
		### generate the window with the set options ###

		self.sizer = wx.BoxSizer(wx.VERTICAL)

		self.alignmentMethodsMS = ['linear (standard)', 'heuristic hierarchical (experimentell)']#, 'hierarchical (experimentell)']
		self.alignmentMethodsMSMS = ['linear (standard)', 'heuristic hierarchical (experimentell)']
		self.scanAveragingMethods = ['linear (standard)', 'heuristic hierarchical (experimentell)']

		self.alignmentMethodsMS_intern = ['linear', 'heuristic']#, 'hierarchical']
		self.alignmentMethodsMSMS_intern = ['linear', 'heuristic']
		self.scanAveragingMethods_intern = ['linear', 'heuristic']

		### radio box for ms alignment method ###
		self.radioBox_ms_alignment = wx.RadioBox(self, -1, "MS alignment method", wx.DefaultPosition, wx.DefaultSize,
				self.alignmentMethodsMS, 1, wx.RA_SPECIFY_COLS)
		self.radioBox_ms_alignment.SetToolTip(wx.ToolTip(
			"choose the preferred alignment method"))
		self.radioBox_ms_alignment.SetSelection(0)
		self.radioBox_ms_alignment.Hide()


		### radio box for ms/ms alignment method ###
		self.radioBox_msms_alignment = wx.RadioBox(self, -1, "MS/MS alignment method", wx.DefaultPosition, wx.DefaultSize,
				self.alignmentMethodsMSMS, 1, wx.RA_SPECIFY_COLS)
		self.radioBox_ms_alignment.SetToolTip(wx.ToolTip(
			"choose the preferred alignment method"))
		self.radioBox_msms_alignment.SetSelection(0)
		self.radioBox_msms_alignment.Hide()


		### radio box for scan averaging method ###
		self.radioBox_scanAveraging = wx.RadioBox(self, -1, "Scan averaging method", wx.DefaultPosition, wx.DefaultSize,
				self.scanAveragingMethods, 1, wx.RA_SPECIFY_COLS)
		self.radioBox_scanAveraging.SetToolTip(wx.ToolTip(
			"choose the preferred scan averaging method"))
		self.radioBox_scanAveraging.SetSelection(0)
		self.radioBox_scanAveraging.Hide()

		self.sizer_h = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_v = wx.BoxSizer(wx.VERTICAL)

		self.sizer_v.Add(self.radioBox_ms_alignment, 0, wx.LEFT|wx.TOP, 20)
		self.sizer_v.Add(self.radioBox_msms_alignment, 0, wx.LEFT|wx.TOP, 20)

		self.sizer_h.Add(self.radioBox_scanAveraging, 0, wx.LEFT|wx.TOP, 20)
		self.sizer_h.Add(self.sizer_v)
		self.sizer.Add(self.sizer_h)
		self.SetSizer(self.sizer)

		self.SetMinSize((485,230))
		self.SetSize((485,230))
		self.Layout()

		### generate the window with the set options ###
		################################################


		self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)
		#self.Bind(wx.EVT_RADIOBOX, self.OnEvtRadioBoxMS, self.radioBox_ms_alignment)
		#self.Bind(wx.EVT_RADIOBOX, self.OnEvtRadioBoxMSMS, self.radioBox_msms_alignment)
		#self.Bind(wx.EVT_RADIOBOX, self.OnEvtRadioBoxScanAvg, self.radioBox_scanAveraging)

	#def OnEvtRadioBoxMS(self, evt):
	#	self.parent.lpdxOptions['alignmentMethodMS'] = self.alignmentMethodsMS_intern[evt.GetInt()]

	#def OnEvtRadioBoxMSMS(self, evt):
	#	self.parent.lpdxOptions['alignmentMethodMSMS'] = self.alignmentMethodsMSMS_intern[evt.GetInt()]

	#def OnEvtRadioBoxScanAvg(self, evt):
	#	self.parent.lpdxOptions['scanAveragingMethod'] = self.alignmentMethodsMSMS_intern[evt.GetInt()]

	def OnCloseWindow(self, evt):
		self.Show(False)

class SetOutputOptionFrame(wx.Frame):

	def __init__(self, *args, **kwds):

		# begin wxGlade: LpdxFrame.__init__
		kwds["style"] = wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION \
		| wx.CLOSE_BOX | wx.CLIP_CHILDREN | wx.RESIZE_BORDER

		wx.Frame.__init__(self, *args, **kwds)
		#panel = wx.Panel(self, -1)

		self.parent = args[0]

		################################################
		### generate the window with the set options ###

		self.sizer = wx.BoxSizer(wx.VERTICAL)
		self.sizer_v_correctIntensities = wx.BoxSizer(wx.HORIZONTAL)

		### check box for correction of intensities ###
		self.checkBox_correctIntensities = wx.CheckBox(self, -1, "correct intensities: ")

		self.label_precursor = wx.StaticText(self, -1, "precursor prefix")
		self.text_ctrl_precursor = wx.TextCtrl(self, -1, "", style = wx.TE_PROCESS_ENTER)
		self.label_fragment = wx.StaticText(self, -1, "fragment prefix")
		self.text_ctrl_fragment = wx.TextCtrl(self, -1, "", style = wx.TE_PROCESS_ENTER)

		self.sizer_v_correctIntensities.Add(self.checkBox_correctIntensities, 0, wx.LEFT|wx.CENTER, 20)
		self.sizer_v_correctIntensities.Add(self.label_precursor, 0, wx.LEFT|wx.CENTER, 5)
		self.sizer_v_correctIntensities.Add(self.text_ctrl_precursor, 0, wx.LEFT|wx.CENTER, 5)
		self.sizer_v_correctIntensities.Add(self.label_fragment, 0, wx.LEFT|wx.CENTER, 5)
		self.sizer_v_correctIntensities.Add(self.text_ctrl_fragment, 0, wx.LEFT|wx.CENTER, 5)

		### check box for sql dump of the MasterScan ###
		self.sizer_v_masterScanInSQL = wx.BoxSizer(wx.HORIZONTAL)
		self.checkBox_masterScanInSQL = wx.CheckBox(self, -1, "Dump MasterScan in SQL compatible format")
		self.sizer_v_masterScanInSQL.Add(self.checkBox_masterScanInSQL, 0, wx.LEFT|wx.CENTER, 20)

		### check box for summing the fatty acids ###
		# !Note right now the column containing the lipid species is 'NAME' and the
		# fragment columns is "FRAGINTENS:*"
		self.sizer_v_sumFattyAcids = wx.BoxSizer(wx.HORIZONTAL)
		self.checkBox_sumFattyAcids = wx.CheckBox(self, -1, "Sum up fatty acids")
		self.checkBox_sumFattyAcids.SetToolTip(wx.ToolTip(
			"!Note right now the column containing the lipid species is 'NAME' and the fragment columns is 'FRAGINTENS:*'"))
		self.sizer_v_sumFattyAcids.Add(self.checkBox_sumFattyAcids, 0, wx.LEFT|wx.CENTER, 20)

		self.sizer_v_settingsPrefix = wx.BoxSizer(wx.HORIZONTAL)
		self.checkBox_settingsPrefix = wx.CheckBox(self, -1, "Attach the settings name on the MasterScan file name")
		self.checkBox_settingsPrefix.SetToolTip(wx.ToolTip(
			"Attache the name of the setting with which the MasterScan was build " +\
			"on the file name of the MasterScan."))
		self.sizer_v_settingsPrefix.Add(self.checkBox_settingsPrefix, 0, wx.LEFT|wx.CENTER, 20)

		self.sizer.Add((10,10))
		self.sizer.Add(self.sizer_v_correctIntensities)
		self.sizer.Add((10,10))
		self.sizer.Add(self.sizer_v_masterScanInSQL)
		self.sizer.Add((10,10))
		self.sizer.Add(self.sizer_v_sumFattyAcids)
		self.sizer.Add((10,10))
		self.sizer.Add(self.sizer_v_settingsPrefix)
		#self.sizer.Add(wx.StaticLine(self, -1))
		self.SetSizer(self.sizer)

		self.SetMinSize((565,160))
		self.SetSize((565,160))
		self.Layout()

		### generate the window with the set options ###
		################################################


		self.Bind(wx.EVT_CLOSE, self.OnCloseWindow)

	def OnCloseWindow(self, evt):
		self.Show(False)

class CSVViewer(wx.Frame):
	def __init__(self, parent, ID, title, file, size=(200,200)):
		wx.Frame.__init__(self, parent, ID, title,
						  (-1,-1),size)

		self.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		self.SetSize((600, 400))
		self.Center()
		self.filename = file
		self.file = None
		self.OnOpen(None)
		self.Show(True)
		return

	def OnOpen(self, event):
		#self.filename = parent.text_ctrl_OutputSection
		self.file = file(self.filename, 'r')
		csvfile = csv.reader(self.file)

		#grab a sample and see if there is a header
		sample=self.file.read(8192)
		self.file.seek(0)
		colnames=next(csvfile)

		self.box_sizer = wx.BoxSizer(wx.VERTICAL)

		self.button_SaveAs = buttons.GenButton(self, -1, "Save as ...")
		if getattr(self, 'grid', 0): self.grid.Destroy()
		self.grid=wx.grid.Grid(self, -1)
		self.box_sizer.Add(self.grid, 1, wx.ALL|wx.EXPAND, 10)
		self.box_sizer.Add(self.button_SaveAs, 0, wx.ALL|wx.EXPAND, 10)
		self.grid.CreateGrid(0, len(colnames) * 2)
		self.grid.SetColLabelAlignment(wx.ALIGN_RIGHT, wx.ALIGN_CENTRE)

		self.Bind(wx.EVT_BUTTON, self.OnSaveAs, self.button_SaveAs)

		#fill in headings
		for i in range(len(colnames)):
			self.grid.SetColLabelValue(i, colnames[i])

		#fill in rows
		r=0
		for row in csvfile:
			self.grid.AppendRows(1)
			for i in range(len(row)):
				try:
					self.grid.SetCellValue(r, i, row[i])
					#self.grid.SetCellAlignment(r, i, wx.ALIGN_RIGHT, wx.ALIGN_CENTRE)
				except:
					self.grid.AppendCols(1, True)
			r += 1
		self.file.close()
		self.grid.AutoSizeColumns(True)
		self.Refresh(True, self.grid.GetRect())
		self.SetSizer(self.box_sizer)
		self.Layout()

	def OnSaveAs(self, evt):
		dlg = wx.FileDialog(self, "Specify an output file",
			style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)
		dlg.SetWildcard("*.csv files|*.csv")

		if dlg.ShowModal() == wx.ID_OK:
			p = dlg.GetFilename()
			d = dlg.GetPath()
			#p = dlg.GetPath().split(os.sep)[-1]
			if not re.match('.*\.csv', p, re.IGNORECASE):
				dlgError = wx.MessageDialog(self, "The filename must have '.csv' as ending",
					"Error", wx.OK)

			with open(self.filename) as fileIn:
				with open(d, 'w') as fileOut:
					fileOut.write(fileIn.read())

	def Exit(self, event):
		if getattr(self, 'file',0):
			self.file.close()
		self.Close(True)

from threading import Thread

class RunSubp(Thread):
	def __init__ (self, stdout, debug):
		Thread.__init__(self)
		self.stdout = stdout
		self.debug = debug
		self.status = -1

	def run(self):
		while True:
			line = self.stdout.readline()
			if line:
				self.debug.write(line)
			else:
				break

class RunOptions:

	lastSelected = None
	listChoices = ['tolerance', 'min occ.']
	listChoices_types = ['ppm', 'Da']

	def __init__(self, setting = None, value = None, type = None):
		if setting:
			self.value = {setting : value}
			self.type = {setting : type}
		else:
			self.value = {}
			self.type = {}

	def has_key(self, key):
		has_key = False
		if key in self.value: has_key = True
		if key in self.type: has_key = True
		return has_key

class LpdxFrame(wx.Frame):
	def __init__(self, *args, **kwds):

		### some constants ###

		self.CONST_THREAD_SUCCESSFUL = 0
		self.CONST_THREAD_USER_ABORT = 1

		###########################################################
		### some user settings which are stored in lpdxopts.ini ###

		self.lpdxOptions = staticTypeDict()

		# set the default defaults. Those values are used if no lpdxopts.ini
		# was present
		self.lpdxOptions['defaultImportSettings'] = ('lpdxImportSettings_benchmark.ini', type(''))

		self.confParseOpts = configparser.ConfigParser()
		self.confParseOpts.read("lpdxopts.ini")

		# options for the alignment
		self.settingDefaults = "DEFAULTS"
		if not self.confParseOpts.has_section(self.settingDefaults):
			self.confParseOpts.add_section(self.settingDefaults)
			with open("lpdxopts.ini", 'w') as iniFile:
				self.confParseOpts.write(iniFile)

		# read option from the lpdxopts.ini file if present. If not -
		# write the option as defined above in self.lpdxOptions
		for option in list(self.lpdxOptions.keys()):
			if self.confParseOpts.has_option(self.settingDefaults, option):
				o = self.confParseOpts.get(self.settingDefaults, option)
				if not o in ['True', 'False']:
					self.lpdxOptions[option] = o
				else:
					if o == 'True':
						self.lpdxOptions[option] = True
					else:
						self.lpdxOptions[option] = False
			else:
				self.confParseOpts.set(self.settingDefaults, option, self.lpdxOptions[option])

		with open("lpdxopts.ini", 'w') as iniFile:
			self.confParseOpts.write(iniFile)

		### some user settings which are stored in lpdxopts.ini ###
		###########################################################

		# version
		self.version = kwds['version']

		# lx or lo?
		self.lipidxplorer = kwds['lipidxplorer']

		# allow import of raw files?
		self.rawimport = kwds['rawimport']

		self.supportedFileTypes = ['mzML', 'mzXML']
		self.defaultFileType = 'mzML'
		self.rawToolTip = ""

		if "optimized" in kwds and kwds['optimized']:
			self.optimized = True
		else:
			self.optimized = False

		# remove this key, because otherwise Frame.__init__() gives TypeError
		try:
			del kwds['rawimport']
			del kwds['lipidxplorer']
			del kwds['version']
			del kwds['optimized']
		except KeyError:
			pass

		# the project file
		self.projectFile = ''

		###########################################
		### variables for the different modules ###

		# begin with some variables
		self.dictMFQLScripts = odict()
		self.filePath_AddMFQL = []
		self.importedFlag = False
		self.debugOpen = False
		self.isRunning = False

		# variables for the Import panel
		#self.settingSelectionIndex = None
		self.currentConfiguration = ""
		self.isChangedAndNotSavedCurrentConfiguration = False
		self.listConfigurations = []
		self.filePath_LoadIni = ""
		self.filePath_ImportData = ""
		self.filePath_MasterScan = ""
		self.filePath_Wiff = ""
		self.filePath_Raw = ""

		# variables for the Run panel
		self.counterNotebookPages = 0
		self.dictNotebookPages = {}
		self.confParse = None
		self.filePath_ComplementSC = ""
		self.filePath_Dump = ""
		self.listChoices = RunOptions.listChoices#['tolerance', 'min occ.']
		self.listChoices_types = RunOptions.listChoices_types#['ppm', 'Da']

		# variables for the editor pane
		#self.list_index = 0
		self.dict_notebook_editor = {}
		self.dict_text_ctrl = {}
		self.dict_button_close = {}
		self.dict_button_save = {}
		self.dict_button_saveAs = {}
		self.dict_button_new = {}
		self.dict_box_sizer_vertical = {}
		self.dict_box_sizer_horizontal = {}
		self.dict_flex_sizer = {}
		self.dict_mfqlFile = {}
		self.dict_isChangedAndNotSavedMfqlFile = {}

		### variables for the different modules ###
		###########################################


		############################
		### Initialize the Frame ###

		# begin wxGlade: LpdxFrame.__init__
		#kwds["style"] = wx.MINIMIZE_BOX | wx.MAXIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION \
		#| wx.CLOSE_BOX | wx.CLIP_CHILDREN | wx.RESIZE_BORDER
		kwds["style"] = wx.MINIMIZE_BOX | wx.SYSTEM_MENU | wx.CAPTION \
		| wx.CLOSE_BOX | wx.CLIP_CHILDREN | wx.RESIZE_BORDER | wx.MAXIMIZE_BOX

		wx.Frame.__init__(self, *args, **kwds)

		# set some font things
		self.font = wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)#, 0, 0, wx.FONTENCODING_SYSTEM))
		self.SetFont(self.font)

		# font for the units
		self.font_units_size = 10

		# create the notebook panels
		self.notebook_1 = wx.Notebook(self, -1, style=0)
		self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_5 = wx.Panel(self.notebook_1, -1)

		#self.notebook_1_pane_2.SetFont(self.font)
		#self.notebook_1_pane_3.SetFont(self.font)
		#self.notebook_1_pane_4.SetFont(self.font)
		#self.notebook_1_pane_5.SetFont(self.font)

		### Initialize the Frame ###
		############################


		################
		### Menu Bar ###

		self.menubar = wx.MenuBar()
		self.menu_project = wx.Menu()
		self.menu_project.Append(wx.MenuItem(self.menu_project, 1, "Load project"))
		self.menu_project.Append(wx.MenuItem(self.menu_project, 2, "Save project"))
		self.menu_project.Append(wx.MenuItem(self.menu_project, 3, "Save project as ..."))
		self.menu_debug = wx.Menu()
		self.menu_debug.Append(wx.MenuItem(self.menu_debug, 4, "Debug window"))
		self.menu_debug.Append(wx.MenuItem(self.menu_debug, 5, "Set debug levels"))
		self.menu_options = wx.Menu()
		# disabling alignment method dialog
		# self.menu_options.Append(wx.MenuItem(self.menu_options, 6, "Set alignment method"))
		self.menu_options.Append(wx.MenuItem(self.menu_options, 7, "Output options"))
		self.menu_help = wx.Menu()
		self.menu_help.Append(wx.MenuItem(self.menu_help, 8, "LipidXplorer Documentation"))
		self.menu_help.Append(wx.MenuItem(self.menu_help, 9, "MFQL tutorial"))
		self.menu_help.Append(wx.MenuItem(self.menu_help, 10, "MFQL reference"))
		self.menu_help.AppendSeparator()
		self.menu_help.Append(wx.MenuItem(self.menu_help, 11, "Help with 'Import Settings'"))
		self.menu_help.Append(wx.MenuItem(self.menu_help, 12, "Help with 'Run'"))
		self.menu_help.Append(wx.MenuItem(self.menu_help, 13, "Help with 'MS Tools'"))
		self.menu_help.AppendSeparator()
		self.menu_help.Append(wx.MenuItem(self.menu_help, 14, "About LipidXplorer"))
		self.menu_about = wx.Menu()
		self.menubar.Append(self.menu_project, "&Project")
		self.menubar.Append(self.menu_debug, "&Debug")
		self.menubar.Append(self.menu_options, "&Options")
		self.menubar.Append(self.menu_help, "&Help")
		self.SetMenuBar(self.menubar)

		### Menu Bar ###
		################

		if balloontip:
			tipballoon_color = None
			tipballoon_messagefonts = None
			tipballoon_windowsshape = BT.BT_ROUNDED
			tipballoon_tipstyle = BT.BT_BUTTON
			tipballoon_startDelay = 300
			tipballoon_endDelay = 1000

			tipballoon_args = {
					'topicon' : None,
					'toptitle' : None,
					'message' : None,
					'shape' : tipballoon_windowsshape,
					'tipstyle' : tipballoon_tipstyle}

		##############################
		### MS tools notebook pane ###

		strFancy = '<font color="red" weight="bold" size="11">Mass vs. Sum Composition</font>'
		self.label_mstools_InputSection = fancytext.StaticFancyText(self.notebook_1_pane_4, -1, strFancy)
		self.label_mstools_InputSection.SetFont(
			wx.Font(self.font_units_size, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		self.label_mstools_InputSection_mz = wx.StaticText(self.notebook_1_pane_4, -1, "m/z value")
		self.label_mstools_InputSection_sumComposition = wx.StaticText(self.notebook_1_pane_4, -1, "sc-constraint or sum composition")
		self.label_mstools_InputSection_doubleBond_1 = wx.StaticText(self.notebook_1_pane_4, -1, "lDB")
		self.label_mstools_InputSection_doubleBond_2 = wx.StaticText(self.notebook_1_pane_4, -1, "hDB")
		self.label_mstools_InputSection_charge = wx.StaticText(self.notebook_1_pane_4, -1, "chg")
		self.label_mstools_InputSection_accuracy = wx.StaticText(self.notebook_1_pane_4, -1, "acc")
		self.label_mstools_InputSection_accuracy_blank = wx.StaticText(self.notebook_1_pane_4, -1, "  ")
		self.label_mstools_InputSection_accuracy_ppm = wx.StaticText(self.notebook_1_pane_4, -1, "ppm")
		self.text_ctrl_mstools_InputSection_mz = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_InputSection_mz.SetToolTip(wx.ToolTip(
			"Input a m/z value in Da."))
		self.text_ctrl_mstools_InputSection_sumComposition = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_InputSection_sumComposition.SetToolTip(wx.ToolTip(
			"A sum composition could be for example: C39 H78 N O8 P. An sc-constrain could be for example: C[20..50] " + \
				"H[40..100] O[0..8] N[1] P[1] chg(+1)"))
		self.text_ctrl_mstools_InputSection_doubleBond_1 = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_InputSection_doubleBond_1.SetToolTip(wx.ToolTip(
			"The lower border of double bond equivalent."))
		self.text_ctrl_mstools_InputSection_doubleBond_2 = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_InputSection_doubleBond_2.SetToolTip(wx.ToolTip(
			"The higher border of double bond equivalent."))
		self.text_ctrl_mstools_InputSection_charge = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_InputSection_charge.SetToolTip(wx.ToolTip(
			"The charge, if it is an ion. Charge will be 0 otherwise."))
		self.text_ctrl_mstools_InputSection_accuracy = wx.TextCtrl(self.notebook_1_pane_4, -1, "5", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_InputSection_accuracy.SetToolTip(wx.ToolTip(
			"The accuracy of the m/z-to-sum-composition function"))
		self.button_massToSumComposition = buttons.GenButton(self.notebook_1_pane_4, -1, "Mass-to-sum-composition")
		self.button_massToSumComposition.SetToolTip(wx.ToolTip(
			"Calculate possible sum compositions for the given m/z with the given accuracy. Do not forget to give the charge"))
		self.button_sumCompositionToMass = buttons.GenButton(self.notebook_1_pane_4, -1, "Sum-composition-to-m/z")
		self.button_sumCompositionToMass.SetToolTip(wx.ToolTip(
			"Calculate the m/z of the given sum composition. Do not forget to give the charge."))
		self.text_ctrl_mstools_OutputSection = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_MULTILINE|wx.TE_READONLY)

		# second half
		strFancy = '<font color="red" weight="bold" size="11">Isotopes of molecules</font>'
		self.label_mstools_Isotopes = fancytext.StaticFancyText(self.notebook_1_pane_4, -1, strFancy)
		self.label_mstools_Isotopes.SetFont(
			wx.Font(self.font_units_size, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		self.label_mstools_Isotopes_precursor = wx.StaticText(self.notebook_1_pane_4, -1, "Ion sum composition                  ")
		self.label_mstools_Isotopes_fragment = wx.StaticText(self.notebook_1_pane_4, -1, "Fragment sum composition                  ")
		self.text_ctrl_mstools_Isotopes_precursor = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_Isotopes_precursor.SetToolTip(wx.ToolTip(
			"input sum composition of precursor ion"))
		self.text_ctrl_mstools_Isotopes_fragment= wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_PROCESS_ENTER)
		self.text_ctrl_mstools_Isotopes_fragment.SetToolTip(wx.ToolTip(
			"input sum composition of fragment ion"))
		self.button_Isotopes = buttons.GenButton(self.notebook_1_pane_4, -1, "Get Isotopic distribution")
		self.button_massToSumComposition.SetToolTip(wx.ToolTip(
			"Calculate the Isotopic distribution of the given sum composition"))
		self.checkBox_mstools_Isotopes_nl = wx.CheckBox(self.notebook_1_pane_4, -1, "Neutral Loss")
		self.label_mstools_Isotopes_blank = wx.StaticText(self.notebook_1_pane_4, -1, "            ")
		self.text_ctrl_mstools_Isotopes_output = wx.TextCtrl(self.notebook_1_pane_4, -1, "", style = wx.TE_MULTILINE|wx.TE_READONLY)

		### MS tools notebook pane ###
		##############################


		#########################
		### RUN notebook pane ###

		# mfql Queries
		strFancy = '<font color="red" weight="bold" size="11">Select/Add MFQL files</font>'
		self.label_mfqlQueriesSection = fancytext.StaticFancyText(self.notebook_1_pane_3, -1, strFancy)
		self.label_mfqlQueriesSection.SetFont(
			wx.Font(self.font_units_size, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		self.label_mfqlQueriesSection.SetToolTip(wx.ToolTip(
			"MFQL scripts have to be selected for LipidXplorer to query the data."))
		self.list_box_1 = wx.ListBox(self.notebook_1_pane_3, -1, pos=(10,10), choices=[], name="", style = wx.LB_EXTENDED)
		self.list_box_1.SetToolTip(wx.ToolTip(
			"All queries occuring in this list will be runned on the selected MasterScan file after pressing 'Lipidx Run'."))
		self.button_AddMFQL = buttons.GenButton(self.notebook_1_pane_3, -1, "Add MFQL file", style=wx.BU_TOP|wx.BU_BOTTOM)
		self.button_AddMFQL.SetToolTip(wx.ToolTip(
			"Opens a dialog for selecting a MFQL file."))
		self.button_AddDir = buttons.GenButton(self.notebook_1_pane_3, -1, "Add MFQL directory")
		self.button_AddDir.SetToolTip(wx.ToolTip(
			"Opens a dialog for selecting a directory of MFQL files. It will load all its content to the list."))
		self.button_NewFile = buttons.GenButton(self.notebook_1_pane_3, -1, "New MFQL Entry")
		self.button_NewFile.SetToolTip(wx.ToolTip(
			"Opens a dialog for specifying a new MFQL file. The file will be opened for editing in a new panel."))
		self.button_OpenFile = buttons.GenButton(self.notebook_1_pane_3, -1, "Edit MFQL Entry")
		self.button_OpenFile.SetToolTip(wx.ToolTip(
			"Opens an list entry for editing and viewing in a new panel."))
		self.button_RemoveEntry = buttons.GenButton(self.notebook_1_pane_3, -1, "Remove MFQL Entry")
		self.button_RemoveEntry.SetToolTip(wx.ToolTip(
			"Removes the selected entry from the list."))

		# masterScan file
		self.label_MasterScanSection = wx.StaticText(self.notebook_1_pane_3, -1, "Select Master Scan File")
		self.text_ctrl_MasterScanSection = wx.TextCtrl(self.notebook_1_pane_3, -1, "", style=wx.TE_PROCESS_ENTER)
		self.text_ctrl_MasterScanSection.SetToolTip(wx.ToolTip(
			"Specify the MasterScan file which should be queried."))

		self.button_Browse_MasterScan = buttons.GenButton(self.notebook_1_pane_3, -1, "Browse")
		self.button_Browse_MasterScan.SetToolTip(wx.ToolTip(
			"Opens a dialog for MasterScan specification."))
		self.button_Browse_MasterScan.SetBackgroundColour(wx.Colour(140, 250, 140))
		self.button_Browse_MasterScan.SetToolTip(wx.ToolTip(
			"Open a directory with your MasterScan files. All other text fields will be filled automatically."))

		# output file
		self.label_OutputSection = wx.StaticText(self.notebook_1_pane_3, -1, "Specify output file")
		self.text_ctrl_OutputSection = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
		self.text_ctrl_OutputSection.SetToolTip(wx.ToolTip(
			"The ouput is a comma seperated file (*.csv)."))
		self.button_Browse_OutputSection = buttons.GenButton(self.notebook_1_pane_3, -1, "Browse")
		self.button_Browse_OutputSection.SetToolTip(wx.ToolTip(
			"Specify the output (*.csv) file."))
		self.button_Open_OutputSection = buttons.GenButton(self.notebook_1_pane_3, -1, "View")
		self.button_Open_OutputSection.SetToolTip(wx.ToolTip(
			"Opens the generated output to take a look inside."))

		# options
		self.label_RunOptions = wx.StaticText(self.notebook_1_pane_3, -1, "Optional settings for this run")
		self.label_RunOptions_tolerance = wx.StaticText(self.notebook_1_pane_3, -1, "Tolerance	")
		self.label_RunOptions_MS = wx.StaticText(self.notebook_1_pane_3, -1, "MS	")
		self.text_ctrl_RunOptions_MS = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
		self.choice_RunOptions_MS_type = wx.Choice(self.notebook_1_pane_3, -1, choices = self.listChoices_types)
		self.label_RunOptions_MSMS = wx.StaticText(self.notebook_1_pane_3, -1, "MS/MS	")
		self.text_ctrl_RunOptions_MSMS = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
		self.choice_RunOptions_MSMS_type = wx.Choice(self.notebook_1_pane_3, -1, choices = self.listChoices_types)

		#self.label_RunOptions_minocc = wx.StaticText(self.notebook_1_pane_3, -1, "Min Occ")
		#self.label_RunOptions_MS_minocc = wx.StaticText(self.notebook_1_pane_3, -1, "MS")
		#self.text_ctrl_RunOptions_MS_minocc = wx.TextCtrl(self.notebook_1_pane_3, -1, "")
		#self.label_RunOptions_MSMS_minocc = wx.StaticText(self.notebook_1_pane_3, -1, "MS/MS")
		#self.text_ctrl_RunOptions_MSMS_minocc = wx.TextCtrl(self.notebook_1_pane_3, -1, "")

		self.checkBox_OptionsSection_isocorrect_ms = wx.CheckBox(self.notebook_1_pane_3, -1, "Isotopic Correction MS")
		self.checkBox_OptionsSection_isocorrect_ms.SetValue(True)

		self.checkBox_OptionsSection_isocorrect_ms.SetToolTip(wx.ToolTip(
			"Isotopic correction of quantitative information in MS spectra"))
		self.checkBox_OptionsSection_isocorrect_msms = wx.CheckBox(self.notebook_1_pane_3, -1, "Isotopic Correction MS/MS")
		self.checkBox_OptionsSection_isocorrect_msms.SetValue(True)
		self.checkBox_OptionsSection_isocorrect_msms.SetToolTip(wx.ToolTip(
			"Isotopic correction of quantitative information in MS/MS spectra"))
		self.checkBox_OptionsSection_complement_sc = wx.CheckBox(self.notebook_1_pane_3, -1, "Generate Complement MasterScan")
		self.checkBox_OptionsSection_complement_sc.SetToolTip(wx.ToolTip(
			"Generate the complement MasterScan and saved it as <name>-complement.sc in the origin directory."))
		self.checkBox_OptionsSection_dumpMasterScan = wx.CheckBox(self.notebook_1_pane_3, -1, "Dump MasterScan")
		self.checkBox_OptionsSection_dumpMasterScan.SetToolTip(wx.ToolTip(
			"Generate a dump of the MasterScan to view its content."))
		self.checkBox_OptionsSection_tabLimited = wx.CheckBox(self.notebook_1_pane_3, -1, "Tab delimited")
		self.checkBox_OptionsSection_tabLimited.SetToolTip(wx.ToolTip(
			"Use tabs as delimiter instead as commas."))
		self.checkBox_OptionsSection_compress = wx.CheckBox(self.notebook_1_pane_3, -1, "Compress")
		self.checkBox_OptionsSection_compress.SetToolTip(wx.ToolTip(
			"No output of query names."))
		self.checkBox_OptionsSection_nohead = wx.CheckBox(self.notebook_1_pane_3, -1, "No head")
		self.checkBox_OptionsSection_nohead.SetToolTip(wx.ToolTip(
			"No output of *.csv file's head with the names of the columns."))
		self.checkBox_generateStatistics = wx.CheckBox(self.notebook_1_pane_3, -1, "Statistics")
		self.checkBox_generateStatistics.SetToolTip(wx.ToolTip(
			"Some statistic values are added to the output:\n" +\
				"\t1) the intensity relative to total ion count of one lipid class \n" +\
				"\t2) the intensity average \n" +\
				"\t3) the standard deviation"))
		self.checkBox_noPermutations = wx.CheckBox(self.notebook_1_pane_3, -1, "No permutations")
		self.checkBox_noPermutations.SetValue(True)
		self.checkBox_noPermutations.SetToolTip(wx.ToolTip(
"""Without permutations the positions of fatty acids are random
and cannot be determined. But the query runs faster and uses less
memory. Otherwise some constraints in the
SUCHTHAT section could generate positions of fatty acids according
to particular attributes of the peaks. Like for example the
intensity."""))

		# dump file
		#self.label_DumpSection = wx.StaticText(self.notebook_1_pane_3, -1, "Specify optional dump file")
		#	"The dump file contains the content of the MasterScan plus the marked ions and fragment ions." +\
		#	"Leave this field empty, if you do not want to output the MasterScan content."))
		#self.button_Browse_DumpSection = buttons.GenButton(self.notebook_1_pane_3, -1, "Save dump file as ...")
		#self.button_Browse_DumpSection.SetToolTip(wx.ToolTip(
		#	"Opens a dialog for specification of the dump output file."))
		self.button_Open_DumpSection = buttons.GenButton(self.notebook_1_pane_3, -1, "View dump file")
		self.button_Open_DumpSection.SetToolTip(wx.ToolTip(
			"Opens the dump file to take a look inside."))

		# run
		self.button_RunLipidX = buttons.GenButton(self.notebook_1_pane_3, -1, "Run LipidXplorer")
		self.button_RunLipidX.SetToolTip(wx.ToolTip(
			"Starts LipidXplorer with the choosen MFQL files on the MasterScan file."))
		self.button_RunLipidX.SetBackgroundColour(wx.Colour(200, 200, 200))

		### RUN notebook pane ###
		#########################


		############################
		### IMPORT notebook pane ###

		# folder with data files
		strFancy = '<font color="red" weight="bold" size="11">Select the folder containing the mass spectra</font>'
		self.label_ImportDataSection = fancytext.StaticFancyText(self.notebook_1_pane_2, -1, strFancy)
		self.label_ImportDataSection.SetFont(
			wx.Font(self.font_units_size, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
	#	self.label_ImportDataSection = wx.StaticText(self.notebook_1_pane_2, -1, "Select data folder and type of files")
		self.text_ctrl_ImportDataSection = wx.TextCtrl(self.notebook_1_pane_2, -1, "", style=wx.TE_PROCESS_ENTER)
		self.text_ctrl_ImportDataSection.SetToolTip(wx.ToolTip(
			"Select a folder with mass spec data of the type which can be selected on the right. After input" +\
			" all other text fields will be filled automatically. \n  The data will be imported into LipidXplorer's own" +\
			" database called MasterScan."))
		self.button_Browse_ImportDataSection = buttons.GenButton(self.notebook_1_pane_2, -1, "Browse")
		self.button_Browse_ImportDataSection.SetToolTip(wx.ToolTip(
			"Opens a dialog for selection the import data folder. All following text fields will be filled automatically."))
		self.button_Browse_ImportDataSection.SetBackgroundColour(wx.Colour(140, 250, 140))

		# folder with data files
		#self.label_FileTypeSection = wx.StaticText(self.notebook_1_pane_2, -1, "Select type of data")
		#self.combo_ctrl_ImportDataSection = wx.ComboBox(self.notebook_1_pane_2, -1, "mzXML", (100,100),
        #                 (90, -1), ['mzXML', 'mc.raw centroid', 'mc.raw profile', 'mc.wiff centroid', 'mc.wiff profile','raw centroid', 'raw profile', 'wiff centroid', 'wiff profile', 'dta/csv'],
        #                 wx.CB_DROPDOWN
        #                 #| wx.TE_PROCESS_ENTER
        #                 #| wx.CB_SORT
        #                 )
		self.combo_ctrl_ImportDataSection = wx.ComboBox(self.notebook_1_pane_2, -1,
				self.defaultFileType,
				(100,100),
                (90, -1),
				self.supportedFileTypes,
            	wx.CB_DROPDOWN
                         #| wx.TE_PROCESS_ENTER
                         #| wx.CB_SORT
                         )
		#self.combo_ctrl_ImportDataSection.SetToolTip(wx.ToolTip(
		#	"Choose the type of the mass spec data: \n mzXML - XML file format\n raw centroid - ThermoScientific file format" +\
		#	" already centroized\n raw profile - ThermoScientific file format in profile mode\n" +\
		#	" wiff centroid - Applied Biosystems file format alrady centroized\n" +
		#	" wiff profile - Applied Biosystems file format in profile mode\n" +
		#	" csv/dta - MS/MS spectra in *.dta file format with optionally the MS spectrum as *.csv file " +\
		#	" (<m/z>, <intensity>).\n\n" +\
		#	"The prefix 'mc.' uses 'msconvert' instead of 'ReAdW' for conversion."))
		self.combo_ctrl_ImportDataSection.SetToolTip(wx.ToolTip(
"""Choose the type of the mass spec data:
  mzML - XML file format
  mzXML - XML file format
  %s
""" % self.rawToolTip))
		self.checkBox_pisSpectra = wx.CheckBox(self.notebook_1_pane_2, -1, "PIS spectra")
		self.checkBox_pisSpectra.SetToolTip(wx.ToolTip(
			"Check this to switch on import of (multiple) precursor ion scan data"))
		self.checkBox_pisSpectra.Hide()

		self.label_SettingsSection_occupationThr_groups = buttons.GenButton(self.notebook_1_pane_2, -1, "Group samples")
		self.label_SettingsSection_occupationThr_groups.Hide()

		# putting the MS/MS checkbox
		self.checkBox_importMSMS = wx.CheckBox(self.notebook_1_pane_2, -1, "MS only")
		self.checkBox_importMSMS.SetToolTip(wx.ToolTip(
			"switch off to restrict import to only MS"))
		self.checkBox_importMSMS.Hide()

		# output masterScan file
		self.label_OutputMasterScanSection = wx.StaticText(self.notebook_1_pane_2, -1, "Specify output MasterScan file")
		self.text_ctrl_OutputMasterScanSection = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
		self.text_ctrl_OutputMasterScanSection.SetToolTip(wx.ToolTip(
			"Specify the path and the name of the MasterScan database for the mass spec data selected above."))
		self.button_Browse_OutputMasterScanSection = buttons.GenButton(self.notebook_1_pane_2, -1, "Browse")
		self.button_Browse_OutputMasterScanSection.SetToolTip(wx.ToolTip(
			"Opens a dialog box for selection of the MasterScan database."))

		#self.button_SelectSettingSection_edit = buttons.GenButton(self.notebook_1_pane_2, -1, "Edit")
		#self.button_SelectSettingSection_new = buttons.GenButton(self.notebook_1_pane_2, -1, "New")
		#self.button_SelectSettingSection_remove = buttons.GenButton(self.notebook_1_pane_2, -1, "Remove")

		# image
		try:
			self.bmp_LipidX_Logo = wx.Image(opj('lx/stuff/LipidXplorer-50.png'), wx.BITMAP_TYPE_PNG).ConvertToBitmap()
			#self.bmp_LipidX_Logo = wx.Image('..%spics%slipidx_logo-smaller.png' % (os.sep, os.sep), wx.BITMAP_TYPE_PNG).ConvertToBitmap()
			wx.StaticBitmap(self.notebook_1_pane_2, -1, self.bmp_LipidX_Logo, (360,430),
						(self.bmp_LipidX_Logo.GetWidth(), self.bmp_LipidX_Logo.GetHeight()))
		except:
			pass

		# set settings

		# start Import
		self.button_StartImport = buttons.GenButton(self.notebook_1_pane_5, -1, "Start import")
		self.button_StartImport.SetToolTip(wx.ToolTip(
			"Starts the import procedure with the selected settings."))
		#self.button_StartImport.SetBackgroundColour(wx.Colour(140, 250, 140))
		self.button_StartImport.SetBackgroundColour(wx.Colour(200, 200, 200))

		### IMPORT notebook pane ###
		############################


		#####################################
		### IMPORT SETTINGS notebook pane ###

		button1_w = 180
		button1_h = 28
		button1_small_w = button1_w / 2 - 5
		button1_small_h = 28

		# labels for collapsing pane
		#self.label1 = " Edit Configuration       "
		#self.label2 = " Close                    "
		#self.collapsable_pane = PCP.PyCollapsiblePane(self.notebook_1_pane_5, label = self.label1, style = wx.CP_DEFAULT_STYLE|wx.CP_NO_TLW_RESIZE|wx.CP_GTK_EXPANDER)
		#self.collapsable_pane.SetLabel(self.label1)
		#self.collapsable_pane.Layout()
		# bind pane collapse
		#self.Bind(wx.EVT_COLLAPSIBLEPANE_CHANGED, self.OnPaneChanged, self.collapsable_pane)
		#self.MakePaneContent(self.collapsable_pane.GetPane())

		# ini file
		self.label_LoadIniSection = wx.StaticText(self.notebook_1_pane_5, -1, "Select *.ini settings file")
		self.text_ctrl_LoadIniSection = wx.TextCtrl(self.notebook_1_pane_5, -1, "")
		self.text_ctrl_LoadIniSection.SetToolTip(wx.ToolTip(
			"The import settings are stored in a special file which can be changed to your own file here."))

		self.text_ctrl_LoadIniSection.SetValue(self.lpdxOptions['defaultImportSettings'])

		# line separating settings load and change settings
		self.static_line_LoadIniSection = wx.StaticLine(self.notebook_1_pane_5, -1, (-1, -1), (650, 4), wx.LI_HORIZONTAL, "")

		# set initially *.ini file
		self.filePath_LoadIni = self.text_ctrl_LoadIniSection.GetValue()
		self.text_ctrl_LoadIniSection.SetValue(self.filePath_LoadIni)
		self.confParse = configparser.ConfigParser()
		self.confParse.read(self.text_ctrl_LoadIniSection.GetLineText(0))

		self.button_Browse_LoadIniSection = buttons.GenButton(self.notebook_1_pane_5, -1, "Browse")
		self.button_Browse_LoadIniSection.SetToolTip(wx.ToolTip(
			"Opens a dialog for selection an import settings file (*.ini)."))

		# select setting
		#self.label_SelectSettingSection = wx.StaticText(self.notebook_1_self.notebook_1_pane_5, -1, "Select setting")
		#strFancy = '<font color="$8CFA8C" size="12">Select setting</font>'
		strFancy = '<font color="red" weight="bold" size="11">Select a Configuration</font>'
		self.label_SelectSettingSection = fancytext.StaticFancyText(self.notebook_1_pane_5, -1, strFancy)
		self.label_SelectSettingSection.SetFont(
			wx.Font(self.font_units_size, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
		self.label_SelectSettingSection.SetToolTip(wx.ToolTip(
			"A section with import settings must be selected for the data import."))

		self.listConfigurations = sorted(self.confParse.sections())
		self.choice_SelectSettingSection = wx.Choice(self.notebook_1_pane_5, -1, size = (500, 30), choices = self.listConfigurations)

		button1_w = 140
		button1_h = 24
		button1_small_w = button1_w / 2 - 5
		button1_small_h = 24

		sizeBorder = 5

		self.button_Delete_LoadIniSection = buttons.GenButton(self.notebook_1_pane_5, -1, "Delete")
		self.button_Delete_LoadIniSection.SetToolTip(wx.ToolTip(
			"deletes the selected settings section from the *.ini file."))
		self.button_Save_LoadIniSection = buttons.GenButton(self.notebook_1_pane_5, -1, "Save ...")
		self.button_Save_LoadIniSection.SetToolTip(wx.ToolTip(
			"Saves the current settings to the selected section."))
		self.button_SaveAs_LoadIniSection = buttons.GenButton(self.notebook_1_pane_5, -1, "Save As ...")
		self.button_SaveAs_LoadIniSection.SetToolTip(wx.ToolTip(
			"Saves the current settings to a new section."))

		self.button_Save_LoadIniSection.SetMinSize((button1_small_w * 1.3, button1_small_h * 1.3))
		self.button_Delete_LoadIniSection.SetMinSize((button1_small_w * 1.3, button1_small_h * 1.3))
		self.button_SaveAs_LoadIniSection.SetMinSize((button1_small_w * 1.3, button1_small_h * 1.3))

		# neither textCtrl nor label stuff
		self.choice_SettingsSection_tolerance_ms = wx.Choice(self.notebook_1_pane_5, -1, choices = ["ppm", "Da"])
		self.choice_SettingsSection_tolerance_ms.SetStringSelection("ppm")
		self.store_SettingsSection_tolerance_ms = "ppm"
		self.choice_SettingsSection_tolerance_msms = wx.Choice(self.notebook_1_pane_5, -1, choices = ["ppm", "Da"])
		self.choice_SettingsSection_tolerance_msms.SetStringSelection("ppm")
		self.store_SettingsSection_tolerance_msms = None

		self.choice_SettingsSection_threshold_ms = wx.Choice(self.notebook_1_pane_5, -1, choices = ["absolute", "relative"])
		self.choice_SettingsSection_threshold_ms.SetStringSelection("absolute")
		self.store_SettingsSection_threshold_ms = "absolute"
		self.choice_SettingsSection_threshold_ms.SetToolTip(wx.ToolTip("Relative intensity in '%'"))
		self.choice_SettingsSection_threshold_msms = wx.Choice(self.notebook_1_pane_5, -1, choices = ["absolute", "relative"])
		self.choice_SettingsSection_threshold_msms.SetStringSelection("absolute")
		self.store_SettingsSection_threshold_msms = "absolute"
		self.choice_SettingsSection_threshold_msms.SetToolTip(wx.ToolTip("Relative intensity in '%'"))

		# the following line seemingly "resets" the font for the next control... this might be a bug in wxPython
		self.choice_SettingsSection_threshold_msms.SetFont(
			wx.Font(self.font_units_size, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))

		self.label_SettingsSection_precursorMassShift = wx.StaticText(self.notebook_1_pane_5, -1, "MS1 offset")
		self.label_SettingsSection_precursorMassShift.SetToolTip(wx.ToolTip(
			"MS1 m/z offset correction. All MS1 m/z values will be shifted by this value in Da.")
		)

		self.label_SettingsSection_precursorMassShift_unit = wx.StaticText(self.notebook_1_pane_5, -1, "Da")

		self.label_SettingsSection_precursorMassShiftOrbi = wx.StaticText(self.notebook_1_pane_5, -1, "PMO")
		self.label_SettingsSection_precursorMassShiftOrbi.SetToolTip(wx.ToolTip(
			 "Precursor offset correction (PMO). Specifies a shift for the precursor masses of the MS/MS spectra. " +
			 "A negative value shifts the precursor m/z value to the left and a positive value to the right. " +
			 "This function is a workaround for precursor offset shifts which can occur on LTQ Orbitrap machines.")
		)
		self.label_SettingsSection_precursorMassShiftOrbi_unit = wx.StaticText(self.notebook_1_pane_5, -1, "Da")

		self.label_SettingsSection_selectionWindow = wx.StaticText(self.notebook_1_pane_5, -1, "selection window")
		self.label_SettingsSection_selectionWindow.SetToolTip(wx.ToolTip("Specify the half-width of the precursor isolation window."))
		self.label_SettingsSection_selectionWindow_unit = wx.StaticText(self.notebook_1_pane_5, -1, "Da")
		self.label_SettingsSection_timerange = wx.StaticText(self.notebook_1_pane_5, -1, "timerange")
		self.label_SettingsSection_timerange.SetToolTip(wx.ToolTip("Select a timerange from within the spectra should be imported"))
		self.label_SettingsSection_timerange_unit = wx.StaticText(self.notebook_1_pane_5, -1, "sec.")
		self.label_SettingsSection_massrange = wx.StaticText(self.notebook_1_pane_5, -1, "m/z range")
		self.label_SettingsSection_massrange.SetToolTip(wx.ToolTip("Select a m/z range from within the spectra should be imported"))
		self.label_SettingsSection_massrange_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_massrange_ms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "m/z,m/z")
		self.label_SettingsSection_massrange_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_massrange_msms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "m/z,m/z")
		self.label_SettingsSection_resolution = wx.StaticText(self.notebook_1_pane_5, -1, "resolution")
		self.label_SettingsSection_resolution_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		strTT = """Set the resolution of the acquired spectra according to mass spec settings.
\nNOTE that this resolution referes to the smalles mass in the spectra. The change of resolution for greater masses is handled with the 'resolution gradien' below."""
		self.label_SettingsSection_resolution.SetToolTip(wx.ToolTip(strTT))
		self.label_SettingsSection_resolution_ms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "FMHW")
		self.label_SettingsSection_resolution_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_resolution_msms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "FMHW")
		self.label_SettingsSection_tolerance = wx.StaticText(self.notebook_1_pane_5, -1, "tolerance")
		self.label_SettingsSection_tolerance.SetToolTip(wx.ToolTip("Set the accuracy of the acquired masses according to mass spec settings"))
		self.label_SettingsSection_tolerance_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_tolerance_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_threshold = wx.StaticText(self.notebook_1_pane_5, -1, "threshold")
		self.label_SettingsSection_threshold.SetToolTip(wx.ToolTip("Set a threshold to import only masses above a certain intensity"))
		self.label_SettingsSection_threshold_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_threshold_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_occupationThr = wx.StaticText(self.notebook_1_pane_5, -1, "min occupation")
		self.label_SettingsSection_occupationThr.SetToolTip(wx.ToolTip("Select a minimum percentage with which a peak should be appear in all samples, the value should be between 0 and 1"))
		self.label_SettingsSection_occupationThr_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_occupationThr_ms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "[0..1]")
		self.label_SettingsSection_occupationThr_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_occupationThr_msms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "[0..1]")
		self.label_SettingsSection_resDelta = wx.StaticText(self.notebook_1_pane_5, -1, "resolution gradient")
		self.label_SettingsSection_resDelta.SetToolTip(wx.ToolTip("Give a gradient of how the resolution changes the greater the m/z value is"))
		self.label_SettingsSection_resDelta_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_resDelta_ms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "res/(m/z)")
		self.label_SettingsSection_resDelta_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_resDelta_msms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "res/(m/z)")
		self.label_SettingsSection_calibration = wx.StaticText(self.notebook_1_pane_5, -1, "calibration masses")
		self.label_SettingsSection_calibration.SetToolTip(wx.ToolTip("Given m/z values are used for linear recalibration of the spectra"))
		#self.label_SettingsSection_calibration_unit = wx.StaticText(pane, -1, "m/z, m/z, ...")
		self.label_SettingsSection_calibration_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_calibration_msms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_filter_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS")
		self.label_SettingsSection_filter_ms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "[0..1]")
		self.label_SettingsSection_filter_ms.SetToolTip(wx.ToolTip("A minimum frequency for a peak appearing in all associated scans, the value should be between 0 and 1"))
		self.label_SettingsSection_filter_msms = wx.StaticText(self.notebook_1_pane_5, -1, "frequency filter")
		self.label_SettingsSection_filter_ms_ms = wx.StaticText(self.notebook_1_pane_5, -1, "MS/MS")
		self.label_SettingsSection_filter_msms_unit = wx.StaticText(self.notebook_1_pane_5, -1, "[0..1]")


		self.label_SettingsSection_filter_msms.SetToolTip(wx.ToolTip("A minimum frequency for a peak appearing in all associated scans, the value is between 0 and 1 "))
		self.text_ctrl_SettingsSection_precursorMassShift = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_precursorMassShiftOrbi = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_selectionWindow = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_timerange1 = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_timerange2 = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_massrange_ms1 = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_massrange_ms2 = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_massrange_msms1 = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_massrange_msms2 = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_resolution_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_resolution_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_tolerance_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_tolerance_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_threshold_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_threshold_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_occupationThr_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_occupationThr_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_resDelta_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_resDelta_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_calibration_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_calibration_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '')
		self.text_ctrl_SettingsSection_filter_ms = wx.TextCtrl(self.notebook_1_pane_5, -1, '0')
		self.text_ctrl_SettingsSection_filter_msms = wx.TextCtrl(self.notebook_1_pane_5, -1, '0')

		### end *.ini ###

		self.debug = TextOutFrame(self, -1, "Debugging")
		self.debug.text_ctrl.AppendText("LipidXplorer version: %s\n" % self.version)
		self.debug.text_ctrl.AppendText("Python version: " + sys.version + \
				"(%s.%s.%s)" % sys.version_info[0:3] + platform.machine() + '\n\n')

		self.debugSetting = SetDebugFrame(self, -1, "Set debugging options")
		self.alignmentSetting = SetAlignmentFrame(self, -1, "Choose the preferred alignment method")
		self.outputOptionSetting = SetOutputOptionFrame(self, -1, "Set your output options")

		self.__set_properties()
		self.__do_layout()
		self.__bind_events()
		self.Layout()
		self.Center()
		# end wxGlade

	def __bind_events(self):

		# for Key events
		#self.Bind(wx.EVT_KEY_DOWN, self.OnKeyPressed)

		# for the menu
		self.Bind(wx.EVT_MENU, self.OnMenuProjectLoad, id = 1)
		self.Bind(wx.EVT_MENU, self.OnMenuProjectSave, id = 2)
		self.Bind(wx.EVT_MENU, self.OnMenuProjectSaveAs, id = 3)
		self.Bind(wx.EVT_MENU, self.OnMenuDebugWin, id = 4)
		self.Bind(wx.EVT_MENU, self.OnMenuDebugSet, id = 5)
		# disable the alignment settings menu
		#self.Bind(wx.EVT_MENU, self.OnMenuAlignmentSet, id = 6)
		self.Bind(wx.EVT_MENU, self.OnMenuOutputOptions, id = 7)
		self.Bind(wx.EVT_MENU, self.OnMenuLipidXDocumentation, id = 8)
		self.Bind(wx.EVT_MENU, self.OnMenuMFQLTutorial, id = 9)
		self.Bind(wx.EVT_MENU, self.OnMenuMFQLReference, id = 10)
		self.Bind(wx.EVT_MENU, self.OnMenuHelpImportSettings, id = 11)
		self.Bind(wx.EVT_MENU, self.OnMenuHelpRun, id = 12)
		self.Bind(wx.EVT_MENU, self.OnMenuHelpMSTools, id = 13)
		self.Bind(wx.EVT_MENU, self.OnMenuAbout, id = 14)

		# for the editor
		self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter)
		self.Bind(wx.EVT_TEXT, self.OnText)

		# mstools panel buttons
		self.Bind(wx.EVT_BUTTON, self.OnMassToSumComposition, self.button_massToSumComposition)
		self.Bind(wx.EVT_BUTTON, self.OnSumCompositionToMass, self.button_sumCompositionToMass)
		self.Bind(wx.EVT_BUTTON, self.OnCalcIsotopes, self.button_Isotopes)

		# import source panel
		self.Bind(wx.EVT_BUTTON, self.OnBrowse_ImportData, self.button_Browse_ImportDataSection)
		self.Bind(wx.EVT_BUTTON, self.OnBrowse_OutputMasterScan, self.button_Browse_OutputMasterScanSection)
		self.Bind(wx.EVT_BUTTON, self.OnBrowse_LoadIni, self.button_Browse_LoadIniSection)
		# self.Bind(wx.EVT_BUTTON, self.OnGroupSamples, self.label_SettingsSection_occupationThr_groups)
		self.Bind(wx.EVT_BUTTON, self.OnStartImport, self.button_StartImport)
		self.Bind(wx.EVT_CHOICE, self.OnConfigurationChoice, self.choice_SelectSettingSection)
		# self.Bind(wx.EVT_CHECKBOX, self.OnImportMSMS, self.checkBox_importMSMS)


		# import settings panel
		self.Bind(wx.EVT_BUTTON, self.OnSave_LoadIni, self.button_Save_LoadIniSection)
		self.Bind(wx.EVT_BUTTON, self.OnDelete_LoadIni, self.button_Delete_LoadIniSection)
		self.Bind(wx.EVT_BUTTON, self.OnSaveAs_LoadIni, self.button_SaveAs_LoadIniSection)
		self.Bind(wx.EVT_CHOICE, self.OnChoice_Tolerance_MS, self.choice_SettingsSection_tolerance_ms)
		self.Bind(wx.EVT_CHOICE, self.OnChoice_Tolerance_MSMS, self.choice_SettingsSection_tolerance_msms)
		self.Bind(wx.EVT_CHOICE, self.OnChoice_Threshold_MS, self.choice_SettingsSection_threshold_ms)
		self.Bind(wx.EVT_CHOICE, self.OnChoice_Threshold_MSMS, self.choice_SettingsSection_threshold_msms)

		# run panel buttons
		self.Bind(wx.EVT_LISTBOX_DCLICK, self.OnOpenFile, self.list_box_1)
		self.Bind(wx.EVT_BUTTON, self.OnAddMFQL, self.button_AddMFQL)
		self.Bind(wx.EVT_BUTTON, self.OnRemoveEntry, self.button_RemoveEntry)
		self.Bind(wx.EVT_BUTTON, self.OnOpenFile, self.button_OpenFile)
		self.Bind(wx.EVT_BUTTON, self.OnNewFile, self.button_NewFile)
		self.Bind(wx.EVT_BUTTON, self.OnAddDir, self.button_AddDir)
		self.Bind(wx.EVT_BUTTON, self.OnBrowse_Output, self.button_Browse_OutputSection)
		self.Bind(wx.EVT_BUTTON, self.OnOpen_Output, self.button_Open_OutputSection)
		self.Bind(wx.EVT_BUTTON, self.OnOpen_Dump, self.button_Open_DumpSection)
		self.Bind(wx.EVT_BUTTON, self.OnBrowse_MasterScan, self.button_Browse_MasterScan)
		self.Bind(wx.EVT_BUTTON, self.OnRunLipidX, self.button_RunLipidX)

		# close application
		self.Bind(wx.EVT_CLOSE, self.OnCloseApp, self)

		# stc bindings
		#self.Bind(stc.EVT_STC_CHANGE, self.OnStcChange)

		# set up drag'n drop
		dropTargetMFQLFiles = MFQLDropTarget(self.list_box_1, self)
		self.list_box_1.SetDropTarget(dropTargetMFQLFiles)

		dropTargetMasterScanFile = FileDrawerDropTarget(self.text_ctrl_MasterScanSection, self.OnBrowse_MasterScan_Body, "sc")
		self.text_ctrl_MasterScanSection.SetDropTarget(dropTargetMasterScanFile)

		dropTargetImportFolder = DrawerDropTarget(self.text_ctrl_ImportDataSection, self.OnBrowse_ImportData_Body)
		self.text_ctrl_ImportDataSection.SetDropTarget(dropTargetImportFolder)

		dropTargetSettingsFile = FileDrawerDropTarget(self.text_ctrl_LoadIniSection, self.OnBrowse_LoadIni_Body, "ini")
		self.text_ctrl_LoadIniSection.SetDropTarget(dropTargetSettingsFile)


		### initialization for threading ###

		# bind events for stdout capture
		self.Bind(EVT_STDOUT, self.OnUpdateOutputWindow)
		#self.Bind(wx.EVT_TIMER, self.OnProcessPendingOutputWindowEvents)
		self.Bind(EVT_WORKER_DONE, self.OnWorkerDone)
		self.Bind(EVT_WRITE_DEBUG, self.OnUpdateOutputWindowEvent)

		# bind events for progressDialog
		self.Bind(EVT_PROGRESSDLG_UPDATE, self.OnUpdateProgressDialog)

	def OnUpdateOutputWindow(self, evt):
		self.debug.text_ctrl.AppendText(evt.text)
		self.debug.text_ctrl.ScrollToLine(self.debug.text_ctrl.GetLineCount())
		pass

	def OnUpdateOutputWindowEvent(self, evt):
		self.debug.text_ctrl.AppendText(evt.text)
		self.debug.text_ctrl.ScrollToLine(self.debug.text_ctrl.GetLineCount())
		#self.debug.text_ctrl.ScrollLines(1)
		#self.debug.text_ctrl.SetInsertionPoint(self.debug.text_ctrl.GetLastPosition() + 1)
		pass

	def OnWorkerDone(self, evt):
		if evt.msg == "startFromGUI":
			self.button_RunLipidX.Enable()
		if evt.msg == "doImport":
			self.button_StartImport.Enable()
		if evt.msg == "doImport_new":
			self.button_StartImport.Enable()
		if evt.msg == "doImport_alt":
			self.button_StartImport.Enable()
		if evt.msg == "startMFQL":
			self.button_RunLipidX.Enable()
		if evt.msg == "startImport":
			self.button_StartImport.Enable()
			self.button_RunLipidX.Enable()

		if self.debug.progressDialog:
			self.debug.progressDialog.Destroy()

	def OnUpdateProgressDialog(self, evt):
		self.debug.progressDialog.Update(evt.value)

	def OnKeyPressed(self, evt):

		key = evt.GetKeyCode()

	def OnMenuProjectSaveAs(self, evt):

		project = self.readOptions()

		# initialize config parser and fill it with the options
		sectionP = "project"
		sectionQ = "mfql"
		configParser = configparser.ConfigParser()
		configParser.add_section(sectionP)
		configParser.add_section(sectionQ)
		for opt in list(project.options.keys()):
			configParser.set(sectionP, opt, str(project.options[opt]))
		for query in list(project.mfql.keys()):
			configParser.set(sectionQ, query + "-name", query)
			configParser.set(sectionQ, query, project.mfql[query])

		# offer a filename for the project
		if not project.options['importDir'] is None:
			defaultFileName = "%s-project.lxp" % project.options['importDir'].split(os.sep)[-1]
		else:
			defaultFileName = ".lxp"

		dlg = wx.FileDialog(wx.GetApp().frame, "Specify the project file",
				style = wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT, defaultFile = defaultFileName)

		if not project.options['importDir'] is None:
			dlg.SetDirectory(project.options['importDir'])
		dlg.SetWildcard("*.lxp files|*.lxp")

		if dlg.ShowModal() == wx.ID_OK:
			projectFilePath = dlg.GetPath()
			if not re.match('.*\.lxp', projectFilePath):
				s = projectFilePath.split('.')
				if len(s) == 1:
					projectFilePath += '.sc'
				else:
					projectFilePath = ''
				for i in s[:-1]:
					projectFilePath += '%s.' % i
				projectFilePath += 'lxp'

			with open(projectFilePath, 'w') as f:
				configParser.write(f)

			self.projectFile = projectFilePath

		dlg.Destroy()

	def OnMenuProjectSave(self, evt):

		if self.projectFile == '':
			self.OnMenuProjectSaveAs(None)
			return None

		project = self.readOptions()

		# initialize config parser and fill it with the options
		sectionP = "project"
		sectionQ = "mfql"
		configParser = configparser.ConfigParser()
		configParser.add_section(sectionP)
		configParser.add_section(sectionQ)
		for opt in list(project.options.keys()):
			configParser.set(sectionP, opt, str(project.options[opt]))
		for query in list(project.mfql.keys()):
			configParser.set(sectionQ, query + "-name", query)
			configParser.set(sectionQ, query, project.mfql[query])

		# offer a filename for the project
		if not project.options['importDir'] is None:
			defaultFileName = "%s-project.lxp" % project.options['importDir'].split(os.sep)[-1]
		else:
			defaultFileName = ".lxp"

		with open(self.projectFile, 'w') as f:
			configParser.write(f)

	def readOptions(self):

		project = Project()

		project.options['importDir'] = self.text_ctrl_ImportDataSection.GetValue()
		project.options['masterScanImport'] = self.text_ctrl_OutputMasterScanSection.GetValue() # in expectation of a project file
		project.options['masterScanRun'] = self.text_ctrl_MasterScanSection.GetValue() # in expectation of a project file
		project.options['importMSMS'] = not self.checkBox_importMSMS.GetValue()
		project.options['pisSpectra'] = self.checkBox_pisSpectra.GetValue()
		project.options['dataType'] = self.combo_ctrl_ImportDataSection.GetValue()
		project.options['ini'] = self.text_ctrl_LoadIniSection.GetValue()
		project.options['setting'] = self.choice_SelectSettingSection.GetSelection()
		project.options['selectionWindow'] = self.text_ctrl_SettingsSection_selectionWindow.GetValue()
		project.options['timerange'] = "(%s,%s)" % (self.text_ctrl_SettingsSection_timerange1.GetValue(), self.text_ctrl_SettingsSection_timerange2.GetValue())
		project.options['MScalibration'] = self.text_ctrl_SettingsSection_calibration_ms.GetValue()
		project.options['MSMScalibration'] = self.text_ctrl_SettingsSection_calibration_msms.GetValue()
		project.options['MSfilter'] = self.text_ctrl_SettingsSection_filter_ms.GetValue()
		project.options['MSMSfilter'] = self.text_ctrl_SettingsSection_filter_msms.GetValue()
		project.options['MSmassrange'] = "(%s,%s)" % (self.text_ctrl_SettingsSection_massrange_ms1.GetValue(), self.text_ctrl_SettingsSection_massrange_ms2.GetValue())
		project.options['MSMSmassrange'] = "(%s,%s)" % (self.text_ctrl_SettingsSection_massrange_msms1.GetValue(), self.text_ctrl_SettingsSection_massrange_msms2.GetValue())
		project.options['MStolerance'] = self.text_ctrl_SettingsSection_tolerance_ms.GetValue()
		project.options['MSMStolerance'] = self.text_ctrl_SettingsSection_tolerance_msms.GetValue()
		project.options['MStoleranceType'] = self.choice_SettingsSection_tolerance_ms.GetString(self.choice_SettingsSection_tolerance_ms.GetSelection())
		project.options['MSMStoleranceType'] = self.choice_SettingsSection_tolerance_msms.GetString(self.choice_SettingsSection_tolerance_msms.GetSelection())
		project.options['MSresolution'] = self.text_ctrl_SettingsSection_resolution_ms.GetValue()
		project.options['MSMSresolution'] = self.text_ctrl_SettingsSection_resolution_msms.GetValue()
		project.options['MSresolutionDelta'] = self.text_ctrl_SettingsSection_resDelta_ms.GetValue()
		project.options['MSMSresolutionDelta'] = self.text_ctrl_SettingsSection_resDelta_msms.GetValue()
		project.options['MSthreshold'] = self.text_ctrl_SettingsSection_threshold_ms.GetValue()
		project.options['MSMSthreshold'] = self.text_ctrl_SettingsSection_threshold_msms.GetValue()
		project.options['MSthresholdType'] = self.choice_SettingsSection_threshold_ms.GetString(self.choice_SettingsSection_threshold_ms.GetSelection())
		project.options['MSMSthresholdType'] = self.choice_SettingsSection_threshold_msms.GetString(self.choice_SettingsSection_threshold_msms.GetSelection())
		project.options['MSminOccupation'] = self.text_ctrl_SettingsSection_occupationThr_ms.GetValue()
		project.options['MSMSminOccupation'] = self.text_ctrl_SettingsSection_occupationThr_msms.GetValue()
		project.options['precursorMassShift'] = self.text_ctrl_SettingsSection_precursorMassShift.GetValue()
		project.options['precursorMassShiftOrbi'] = self.text_ctrl_SettingsSection_precursorMassShiftOrbi.GetValue()
		project.options['alignmentMethodMS'] = self.alignmentSetting.alignmentMethodsMS_intern[self.alignmentSetting.radioBox_ms_alignment.GetSelection()]
		project.options['alignmentMethodMSMS'] = self.alignmentSetting.alignmentMethodsMSMS_intern[self.alignmentSetting.radioBox_msms_alignment.GetSelection()]
		project.options['scanAveragingMethod'] = self.alignmentSetting.scanAveragingMethods_intern[self.alignmentSetting.radioBox_scanAveraging.GetSelection()]
		project.options['isotopicCorrection_MSMS'] =  self.debugSetting.checkBox_IsotopicCorrection_MSMS.GetValue() # here starts the Set debugging Options from the Debug menu
		project.options['removeIsotopes'] = self.debugSetting.checkBox_removeIsotopes.GetValue()
		project.options['isotopesInMasterScan'] = self.debugSetting.checkBox_isotopesInMasterscan.GetValue()
		project.options['monoisotopicCorrection'] = self.debugSetting.checkBox_monoisotopicCorrection.GetValue()
		project.options['relativeIntensity'] = self.debugSetting.checkBox_relativeIntensity.GetValue()
		project.options['logMemory'] =  self.debugSetting.checkBox_MemoryLog.GetValue() # here starts the Set debugging Options from the Debug menu
		project.options['intensityCorrection'] = self.outputOptionSetting.checkBox_correctIntensities.GetValue() # here starts the output options menu
		project.options['intensityCorrectionPrecursor'] = self.outputOptionSetting.text_ctrl_precursor.GetValue()
		project.options['intensityCorrectionFragment'] = self.outputOptionSetting.text_ctrl_fragment.GetValue()
		project.options['masterScanInSQL'] = self.outputOptionSetting.checkBox_masterScanInSQL.GetValue()
		project.options['sumFattyAcids'] = self.outputOptionSetting.checkBox_sumFattyAcids.GetValue()
		project.options['settingsPrefix'] = self.outputOptionSetting.checkBox_settingsPrefix.GetValue()
		project.options['resultFile'] = self.text_ctrl_OutputSection.GetValue() # here starts the RUN panel
		project.options['optionalMStolerance'] = self.text_ctrl_RunOptions_MS.GetValue()
		project.options['optionalMSMStolerance'] = self.text_ctrl_RunOptions_MSMS.GetValue()
		project.options['optionalMStoleranceType'] = self.choice_RunOptions_MS_type.GetString(self.choice_RunOptions_MS_type.GetSelection())
		project.options['optionalMSMStoleranceType'] = self.choice_RunOptions_MSMS_type.GetString(self.choice_RunOptions_MSMS_type.GetSelection())
		project.options['isotopicCorrectionMS'] = self.checkBox_OptionsSection_isocorrect_ms.GetValue()
		project.options['isotopicCorrectionMSMS'] = self.checkBox_OptionsSection_isocorrect_msms.GetValue()
		project.options['complementMasterScan'] = self.checkBox_OptionsSection_complement_sc.GetValue()
		project.options['noHead'] = self.checkBox_OptionsSection_nohead.GetValue()
		project.options['compress'] = self.checkBox_OptionsSection_compress.GetValue()
		project.options['tabLimited'] = self.checkBox_OptionsSection_tabLimited.GetValue()
		project.options['dumpMasterScan'] = self.checkBox_OptionsSection_dumpMasterScan.GetValue()
		project.options['statistics'] = self.checkBox_generateStatistics.GetValue()
		project.options['noPermutations'] = self.checkBox_noPermutations.GetValue()
		project.options['mzXML'] = None # option key used in lpdxImport.py, substituted by 'dataType'
		# option key used in lpdxImport.py, substituted by 'dataType'
		project.options['spectraFormat'] = self.combo_ctrl_ImportDataSection.GetValue()

		for query in list(self.dictMFQLScripts.keys()):
			project.mfql[query] = self.dictMFQLScripts[query]

		return project

	def readOptionsRun(self):

		project = Project()

		project.options['masterScanImport'] = self.text_ctrl_OutputMasterScanSection.GetValue() # in expectation of a project file
		project.options['masterScanRun'] = self.text_ctrl_MasterScanSection.GetValue() # in expectation of a project file
		project.options['precursorMassShift'] = self.text_ctrl_SettingsSection_precursorMassShift.GetValue()
		project.options['precursorMassShiftOrbi'] = self.text_ctrl_SettingsSection_precursorMassShiftOrbi.GetValue()
		project.options['alignmentMethodMS'] = self.alignmentSetting.alignmentMethodsMS_intern[self.alignmentSetting.radioBox_ms_alignment.GetSelection()]
		project.options['alignmentMethodMSMS'] = self.alignmentSetting.alignmentMethodsMSMS_intern[self.alignmentSetting.radioBox_msms_alignment.GetSelection()]
		project.options['scanAveragingMethod'] = self.alignmentSetting.scanAveragingMethods_intern[self.alignmentSetting.radioBox_scanAveraging.GetSelection()]
		project.options['isotopicCorrection_MSMS'] =  self.debugSetting.checkBox_IsotopicCorrection_MSMS.GetValue() # here starts the Set debugging Options from the Debug menu
		project.options['removeIsotopes'] = self.debugSetting.checkBox_removeIsotopes.GetValue()
		project.options['isotopesInMasterScan'] = self.debugSetting.checkBox_isotopesInMasterscan.GetValue()
		project.options['monoisotopicCorrection'] = self.debugSetting.checkBox_monoisotopicCorrection.GetValue()
		project.options['relativeIntensity'] = self.debugSetting.checkBox_relativeIntensity.GetValue()
		project.options['logMemory'] =  self.debugSetting.checkBox_MemoryLog.GetValue() # here starts the Set debugging Options from the Debug menu
		project.options['intensityCorrection'] = self.outputOptionSetting.checkBox_correctIntensities.GetValue() # here starts the output options menu
		project.options['intensityCorrectionPrecursor'] = self.outputOptionSetting.text_ctrl_precursor.GetValue()
		project.options['intensityCorrectionFragment'] = self.outputOptionSetting.text_ctrl_fragment.GetValue()
		project.options['masterScanInSQL'] = self.outputOptionSetting.checkBox_masterScanInSQL.GetValue()
		project.options['sumFattyAcids'] = self.outputOptionSetting.checkBox_sumFattyAcids.GetValue()
		project.options['settingsPrefix'] = self.outputOptionSetting.checkBox_settingsPrefix.GetValue()
		project.options['resultFile'] = self.text_ctrl_OutputSection.GetValue() # here starts the RUN panel
		project.options['optionalMStolerance'] = self.text_ctrl_RunOptions_MS.GetValue()
		project.options['optionalMSMStolerance'] = self.text_ctrl_RunOptions_MSMS.GetValue()
		project.options['optionalMStoleranceType'] = self.choice_RunOptions_MS_type.GetString(self.choice_RunOptions_MS_type.GetSelection())
		project.options['optionalMSMStoleranceType'] = self.choice_RunOptions_MSMS_type.GetString(self.choice_RunOptions_MSMS_type.GetSelection())
		project.options['isotopicCorrectionMS'] = self.checkBox_OptionsSection_isocorrect_ms.GetValue()
		project.options['isotopicCorrectionMSMS'] = self.checkBox_OptionsSection_isocorrect_msms.GetValue()
		project.options['complementMasterScan'] = self.checkBox_OptionsSection_complement_sc.GetValue()
		project.options['noHead'] = self.checkBox_OptionsSection_nohead.GetValue()
		project.options['compress'] = self.checkBox_OptionsSection_compress.GetValue()
		project.options['tabLimited'] = self.checkBox_OptionsSection_tabLimited.GetValue()
		project.options['dumpMasterScan'] = self.checkBox_OptionsSection_dumpMasterScan.GetValue()
		project.options['statistics'] = self.checkBox_generateStatistics.GetValue()
		project.options['noPermutations'] = self.checkBox_noPermutations.GetValue()
		project.options['mzXML'] = None # option key used in lpdxImport.py, substituted by 'dataType'
		# option key used in lpdxImport.py, substituted by 'dataType'
		project.options['spectraFormat'] = self.combo_ctrl_ImportDataSection.GetValue()

		for query in list(self.dictMFQLScripts.keys()):
			project.mfql[query] = self.dictMFQLScripts[query]

		return project

	def loadProject(self, filename):
		self.OnMenuProjectLoad(None, pFile = filename)


	def OnMenuProjectLoad(self, evt, pFile = ''):

		project = GUIProject()

		# load the project file
		if pFile == '':
			dlg = wx.FileDialog(wx.GetApp().frame, "Load the project file",
					style = wx.DD_DEFAULT_STYLE|wx.FD_OPEN, defaultFile = '')

			dlg.SetWildcard("*.lxp files|*.lxp")

			if dlg.ShowModal() == wx.ID_OK:
				self.projectFile = dlg.GetPath()
			else:
				return None
		else:
			self.projectFile = pFile

		# initialize the project options
		project.load(self.projectFile)

		#options = project.getPrintOptions()
		options = project.getOptions().getOrdinary()

		# open and load ini first
		if not options['ini'] is None and options['ini'] != '':
			self.text_ctrl_LoadIniSection.SetValue(options['ini'])
			self.filePath_LoadIni = options['ini']
			self.OnBrowse_LoadIni_Body(self.filePath_LoadIni)
			self.choice_SelectSettingSection.SetSelection(int(options['setting'])) # select by number, this should be changed to string TODO

		try:
			self.text_ctrl_ImportDataSection.SetValue(options['importDir'])
			self.text_ctrl_OutputMasterScanSection.SetValue(options['masterScanImport']) # in expectation of a project file(projectoptions['masterScan']
			self.text_ctrl_MasterScanSection.SetValue(options['masterScanRun']) # in expectation of a project file(projectoptions['masterScan']
			self.checkBox_importMSMS.SetValue(not strToBool(options['importMSMS']))
			self.checkBox_pisSpectra.SetValue(strToBool(options['pisSpectra']))
			self.combo_ctrl_ImportDataSection.SetValue(options['dataType'])
			self.text_ctrl_SettingsSection_selectionWindow.SetValue(options['selectionWindow'])
			self.text_ctrl_SettingsSection_timerange1.SetValue(options['timerange'][0])
			self.text_ctrl_SettingsSection_timerange2.SetValue(options['timerange'][1])
			self.text_ctrl_SettingsSection_calibration_ms.SetValue(','.join(options['MScalibration']))
			self.text_ctrl_SettingsSection_calibration_msms.SetValue(','.join(options['MSMScalibration']))
			self.text_ctrl_SettingsSection_filter_ms.SetValue(options['MSfilter'])
			self.text_ctrl_SettingsSection_filter_msms.SetValue(options['MSMSfilter'])
			self.text_ctrl_SettingsSection_massrange_ms1.SetValue(options['MSmassrange'][0])
			self.text_ctrl_SettingsSection_massrange_ms2.SetValue(options['MSmassrange'][1])
			self.text_ctrl_SettingsSection_massrange_msms1.SetValue(options['MSMSmassrange'][0])
			self.text_ctrl_SettingsSection_massrange_msms2.SetValue(options['MSMSmassrange'][1])
			self.text_ctrl_SettingsSection_tolerance_ms.SetValue((options['MStolerance']))
			self.text_ctrl_SettingsSection_tolerance_msms.SetValue((options['MSMStolerance']))
			self.choice_SettingsSection_tolerance_ms.SetStringSelection((options['MStoleranceType']))
			self.choice_SettingsSection_tolerance_msms.SetStringSelection((options['MSMStoleranceType']))
			self.text_ctrl_SettingsSection_resolution_ms.SetValue((options['MSresolution']))
			self.text_ctrl_SettingsSection_resolution_msms.SetValue((options['MSMSresolution']))
			self.text_ctrl_SettingsSection_resDelta_ms.SetValue((options['MSresolutionDelta']))
			self.text_ctrl_SettingsSection_resDelta_msms.SetValue((options['MSMSresolutionDelta']))
			self.text_ctrl_SettingsSection_threshold_ms.SetValue((options['MSthreshold']))
			self.text_ctrl_SettingsSection_threshold_msms.SetValue((options['MSMSthreshold']))
			self.choice_SettingsSection_threshold_ms.SetStringSelection(options['MSthresholdType'])
			self.choice_SettingsSection_threshold_msms.SetStringSelection(options['MSMSthresholdType'])
			self.text_ctrl_SettingsSection_occupationThr_ms.SetValue((options['MSminOccupation']))
			self.text_ctrl_SettingsSection_occupationThr_msms.SetValue((options['MSMSminOccupation']))
			self.text_ctrl_SettingsSection_precursorMassShift.SetValue((options['precursorMassShift']))
			self.text_ctrl_SettingsSection_precursorMassShiftOrbi.SetValue((options['precursorMassShiftOrbi']))
			self.alignmentSetting.radioBox_ms_alignment.SetSelection(self.alignmentSetting.alignmentMethodsMS_intern.index(options['alignmentMethodMS']))
			self.alignmentSetting.radioBox_msms_alignment.SetSelection(self.alignmentSetting.alignmentMethodsMSMS_intern.index(options['alignmentMethodMSMS']))
			self.alignmentSetting.radioBox_scanAveraging.SetSelection(self.alignmentSetting.scanAveragingMethods_intern.index(options['scanAveragingMethod']))
			# here starts the Set debugging Options from the Debug menu
			self.debugSetting.checkBox_IsotopicCorrection_MSMS.SetValue(strToBool(options['isotopicCorrection_MSMS']))
			self.debugSetting.OnCheckIsotopicCorrection_MSMS(None)
			self.debugSetting.checkBox_removeIsotopes.SetValue(strToBool(options['removeIsotopes']))
			self.debugSetting.OnCheckRemoveIsotopes(None)
			self.debugSetting.checkBox_isotopesInMasterscan.SetValue(strToBool(options['isotopesInMasterScan']))
			self.debugSetting.OnCheckIsotopesInMasterScan(None)
			self.debugSetting.checkBox_monoisotopicCorrection.SetValue(strToBool(options['monoisotopicCorrection']))
			self.debugSetting.OnCheckMonoisotopicCorrection(None)
			self.debugSetting.checkBox_relativeIntensity.SetValue(strToBool(options['relativeIntensity']))
			self.debugSetting.OnCheckRelativeIntensity(None)
			self.debugSetting.checkBox_MemoryLog.SetValue(strToBool(options['logMemory']))

			# here starts the output options menu(options['correctIntensities']
			self.outputOptionSetting.checkBox_correctIntensities.SetValue(strToBool(options['intensityCorrection']))
			self.outputOptionSetting.text_ctrl_precursor.SetValue(options['intensityCorrectionPrecursor'])
			self.outputOptionSetting.text_ctrl_fragment.SetValue(options['intensityCorrectionFragment'])
			self.outputOptionSetting.checkBox_masterScanInSQL.SetValue(strToBool(options['masterScanInSQL']))
			self.outputOptionSetting.checkBox_sumFattyAcids.SetValue(strToBool(options['sumFattyAcids']))
			self.outputOptionSetting.checkBox_settingsPrefix.SetValue(strToBool(options['settingsPrefix']))

			# here starts the RUN panel(options['resultFile']
			self.text_ctrl_OutputSection.SetValue(options['resultFile'])
			self.text_ctrl_RunOptions_MS.SetValue(options['optionalMStolerance'])
			self.text_ctrl_RunOptions_MSMS.SetValue(options['optionalMSMStolerance'])
			self.choice_RunOptions_MS_type.GetString(self.choice_RunOptions_MS_type.SetStringSelection(options['optionalMStoleranceType']))
			self.choice_RunOptions_MSMS_type.GetString(self.choice_RunOptions_MSMS_type.SetStringSelection(options['optionalMSMStoleranceType']))
			self.checkBox_OptionsSection_isocorrect_ms.SetValue(strToBool(options['isotopicCorrectionMS']))
			self.checkBox_OptionsSection_isocorrect_msms.SetValue(strToBool(options['isotopicCorrectionMSMS']))
			self.checkBox_OptionsSection_complement_sc.SetValue(strToBool(options['complementMasterScan']))
			self.checkBox_OptionsSection_nohead.SetValue(strToBool(options['noHead']))
			self.checkBox_OptionsSection_compress.SetValue(strToBool(options['compress']))
			self.checkBox_OptionsSection_tabLimited.SetValue(strToBool(options['tabLimited']))
			self.checkBox_OptionsSection_dumpMasterScan.SetValue(strToBool(options['dumpMasterScan']))
			self.checkBox_generateStatistics.SetValue(strToBool(options['statistics']))
			self.checkBox_noPermutations.SetValue(strToBool(options['noPermutations']))
			#project.options['mzXML'] = None # option key used in lpdxImport.py, substituted by 'dataType'
		except TypeError as AttributeError:
			pass

		# set local variables
		self.dictMFQLScripts = project.mfql
		self.list_box_1.Set(list(self.dictMFQLScripts.keys()))
		self.filePath_Dump = options['dumpMasterScanFile']

		# if a setting was given we make it our current config
		if len(self.listConfigurations) > 0 and \
				self.choice_SelectSettingSection.GetSelection():
			self.currentConfiguration = self.listConfigurations[self.choice_SelectSettingSection.GetSelection()]
		if self.currentConfiguration != "":
			self.OnSettingsSaved()
		pass

	def OnMenuDebugWin(self, evt):

		if not self.debugOpen:
			#self.debug.Center()
			self.debug.Show(True)
			self.debugOpen = True
		else:
			self.debug.Show(False)
			self.debugOpen = False

	def OnMenuDebugSet(self, evt):

		self.debugSetting.Show(True)

	# def OnMenuAlignmentSet(self, evt):
	#
	# 	self.alignmentSetting.Show(True)

	def OnMenuOutputOptions(self, evt):

		self.outputOptionSetting.Show(True)

	def OnMenuLipidXDocumentation(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_Documentation')

	def OnMenuMFQLTutorial(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_MFQL#A_short_tutorial')

	def OnMenuMFQLReference(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_MFQL#The_4_sections_of_a_MFQL_query')

	def OnMenuHelpImportSettings(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_Usage#Machine_specific_settings')

	def OnMenuHelpRun(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_Usage#Run_queries_on_the_MasterScan')

	def OnMenuHelpMSTools(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_Usage#The_MS-Tools_panel')

	def OnMenuAbout(self, evt):

		webbrowser.open('https://lifs.isas.de/wiki/index.php/LipidX_Preface')

	def OnTextEnter(self, evt):

		if evt.GetId() == self.text_ctrl_ImportDataSection.GetId():
			self.OnBrowse_ImportData_Body(self.text_ctrl_ImportDataSection.GetValue())
		if evt.GetId() == self.text_ctrl_MasterScanSection.GetId():
			self.OnBrowse_MasterScan_Body(self.text_ctrl_MasterScanSection.GetValue())
		if evt.GetId() == self.text_ctrl_OutputMasterScanSection.GetId():
			self.text_ctrl_MasterScanSection.SetValue(self.text_ctrl_OutputMasterScanSection.GetValue())

	def OnText(self, evt):

		if not self.isChangedAndNotSavedCurrentConfiguration:
			if evt.GetId() == self.text_ctrl_SettingsSection_timerange1.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_occupationThr_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_occupationThr_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_threshold_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_threshold_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_timerange1.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_timerange2.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_massrange_ms1.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_massrange_ms2.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_massrange_msms1.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_massrange_msms2.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_resolution_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_resolution_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_resDelta_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_resDelta_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_calibration_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_calibration_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_filter_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_filter_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_tolerance_ms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_tolerance_msms.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_selectionWindow.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_precursorMassShift.GetId() or\
				evt.GetId() == self.text_ctrl_SettingsSection_precursorMassShiftOrbi.GetId():
				self.OnSettingsChange()

	def OnStcChange(self, evt):

		for key in list(self.dict_text_ctrl.keys()):
			if evt.GetId() == self.dict_text_ctrl[key].GetId():

				# find right page
				for i in range(self.notebook_1.GetPageCount()):
					if self.notebook_1.GetPage(i) == self.dict_text_ctrl[key].GetParent():
						self.dict_isChangedAndNotSavedMfqlFile[key] = True
						if key in self.dict_button_save:
							# this is normal gray: (230, 224, 218, 255)
							if not self.dict_button_save[key].GetBackgroundColour() == (250, 80, 80, 215):
								self.dict_button_save[key].SetBackgroundColour((250, 80, 80, 215))

	def OnCloseApp(self, evt):

		dialog = wx.MessageDialog(self, message="Are you sure you want to quit?", caption="Quit LipidXplorer", style=wx.YES_NO,
								  pos=wx.DefaultPosition)
		response = dialog.ShowModal()

		if response != wx.ID_YES:
			evt.StopPropagation()
			return

		for key in list(self.dict_text_ctrl.keys()):
			if self.dict_isChangedAndNotSavedMfqlFile[key]:
				dlg = wx.MessageDialog(self, "Modified query '%s' is not saved. Save it?" % key, "Ups..",
					wx.YES|wx.NO|wx.ICON_HAND)
				if dlg.ShowModal() == wx.ID_YES:
					with open(self.dictMFQLScripts[key], 'w') as mfqlFile:
						self.dict_mfqlFile[key] = mfqlFile
						mfqlFile.write(self.dict_text_ctrl[key].GetText())

		if wx.GetApp().frame.debugOpen:
			wx.GetApp().frame.OnMenuDebugWin(None)

		for tlw in wx.GetTopLevelWindows():
			tlw.Destroy()

		self.Destroy()

		if playSound:
			wx.Sound.Stop()
			wx.Sound('../pics/CloseApp.wav').Play()

	def handleSyntaxErrorException(self):

		evt = wxStdOut(text = '')#v.value)
		if not wx.GetApp().frame.debugOpen:
			wx.GetApp().frame.OnMenuDebugWin(None)
		wx.PostEvent(wx.GetApp().frame, evt)

		(excName, excArgs, excTb, exc) = formatExceptionInfo()

		if exc.p_value:
			htmlText = '''
			<html><head></head><body>
			<font color="#800000"><h3>Syntax Error</h3></font>
			'%s'
			<p>
			<table>
				<tr><td>file name:</td><td>%s</td></tr>
				<tr><td>line number:</td><td>%s</td></tr>
			</table>
			</p>
			</body></html>
			''' % (exc.p_value, exc.fileName, exc.lineno)
		else:
			htmlText = '''
			<html><head></head><body>
			<font color="#800000"><h3>Syntax Error</h3></font>
			<p>
			<table>
				<tr><td>file name:</td><td>%s</td></tr>
				<tr><td>line number:</td><td>%s</td></tr>
			</table>
			</p>
			</body></html>
			''' % (exc.fileName, exc.lineno)

		dlg = MyErrorDialog(wx.GetApp().frame, -1, "Syntax Error", htmlText)
		if dlg.ShowModal() == wx.ID_OK:
			dlg.Destroy()

	def handleLogicErrorExcept(self):

		evt = wxStdOut(text = '')#v.value)
		if not wx.GetApp().frame.debugOpen:
			wx.GetApp().frame.OnMenuDebugWin(None)
		wx.PostEvent(wx.GetApp().frame, evt)

		(excName, excArgs, excTb, exc) = formatExceptionInfo()
		dlg = wx.MessageDialog(wx.GetApp().frame, "%s" % exc, "LOGICAL ERROR", wx.OK|wx.ICON_ERROR)
		if dlg.ShowModal() == wx.ID_OK:
			dlg.Destroy()

	def handleLipidXException(self):

		evt = wxStdOut(text = '')#v.value)
		if not wx.GetApp().frame.debugOpen:
			wx.GetApp().frame.OnMenuDebugWin(None)
		wx.PostEvent(wx.GetApp().frame, evt)

		(excName, excArgs, excTb, exc) = formatExceptionInfo()

		htmlText = '''
		<html><head></head><body>
		<font color="#800000"><h3>Error</h3></font>
		'%s'
		<p>
		'%s'
		</p>
		</body></html>
		''' % (exc.head, exc.body)

		dlg = MyErrorDialog(wx.GetApp().frame, -1, "Syntax Error", htmlText)
		if dlg.ShowModal() == wx.ID_OK:
			dlg.Destroy()

		# old
		#evt = wxStdOut(text = '')#v.value)
		#if not wx.GetApp().frame.debugOpen:
		#	wx.GetApp().frame.OnMenuDebugWin(None)
		#wx.PostEvent(wx.GetApp().frame, evt)

		#(excName, excArgs, excTb, exc) = formatExceptionInfo()
		#dlg = wx.MessageDialog(wx.GetApp().frame, "%s" % exc, "ERROR", wx.OK|wx.ICON_ERROR)
		#if dlg.ShowModal() == wx.ID_OK:
		#	dlg.Destroy()

	def handleImportException(self):

		evt = wxStdOut(text = '')#v.value)
		if not wx.GetApp().frame.debugOpen:
			wx.GetApp().frame.OnMenuDebugWin(None)
		wx.PostEvent(wx.GetApp().frame, evt)

		(excName, excArgs, excTb, exc) = formatExceptionInfo()
		dlg = wx.MessageDialog(wx.GetApp().frame, "%s" % exc, "IMPORT ERROR", wx.OK|wx.ICON_ERROR)
		if dlg.ShowModal() == wx.ID_OK:
			dlg.Destroy()

	def handleException(self):

		traceback.print_tb(sys.exc_info()[2])
		evt = wxStdOut(text = '')
		if not wx.GetApp().frame.debugOpen:
			wx.GetApp().frame.OnMenuDebugWin(None)
		wx.PostEvent(wx.GetApp().frame, evt)
		(excName, excArgs, excTb, exc) = formatExceptionInfo()
		print(excName, exc)

		text = "The following error occured:\n\n"
		text += "** %s : %s **\n\n\n" % (excName, exc)
		text += "If you think that this a bug in the software you can send\na bug report to the us.\n"
		text += "Do you want to generate the bug report?"
		dlg = wx.MessageDialog(wx.GetApp().frame, text, "ERROR", style=wx.YES_NO|wx.CANCEL|wx.NO_DEFAULT)
		r = dlg.ShowModal()
		if r == wx.ID_YES:

			dlg = wx.MessageDialog(wx.GetApp().frame, "Please store the bugReport.html and send it to lifs-support@isas.de", \
					"ERROR", style=wx.OK)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()

			strBugReport = """
			<html><head></head><body>
			<h3>%s</h3>
			<h3>%s</h3>
			<h3>%s</h3>
			<p><tt>
			""" % (sys.version, excName, exc)
			for i in excTb:
				strBugReport += "%s<br>" % i
			strBugReport += "</tt></p><br>"
			strBugReport += "%s" % wx.GetApp().frame.genBugReportHTML()
			strBugReport += "</body></html>"

			dlg = wx.FileDialog(wx.GetApp().frame, "Specify the site for the bugReport.html",
				style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT,
				defaultFile = "bugReport.html")
			dlg.SetWildcard("*.html files|*.html")

			if dlg.ShowModal() == wx.ID_OK:
				d = dlg.GetPath()
				with open(d, 'w') as f:
					f.write(strBugReport)
				print(d)

		else:
			dlg.Destroy()

			#dlg = wx.MessageDialog(wx.GetApp().frame,"%s: %s" % (excName, exc), "Error.", wx.OK|wx.ICON_ERROR)
			#if dlg.ShowModal() == wx.ID_OK:
			#	dlg.Destroy()

		evt = wxWorkerDone(msg = callable.__name__)
		wx.PostEvent(wx.GetApp().frame, evt)

	def startConvertWiff(self):

		if playSound:
			wx.Sound('../pics/PressButton.wav').Play()

		wiffIn = wiffOut = self.filePath_WiffIn

		if os.path.exists(wiffIn):
			if os.path.exists(wiffOut):

				# initialize to fail
				exitCode = -1

				max = 0
				count = 0
				for root, dir, files in os.walk(wiffIn):
					max = len(files)

				thinking = wx.ProgressDialog("Thinking ...", "Thinking ...", max, self, wx.PD_AUTO_HIDE|wx.ICON_EXCLAMATION|wx.PD_SMOOTH)

				for root, dir, files in os.walk(wiffIn):
					for f in files:
						if re.match('.*\.wiff', f, re.IGNORECASE):

							# select msconvert (MC) or ReAdW
							if self.flagMC: # msconvert
								if self.flagCentroid:
									strStartWiff = 'msconvert-with-centroization.bat "%s" "%s"' % (os.path.join(root, f), wiffOut)
								else:
									strStartWiff = 'msconvert-without-centroization.bat "%s" "%s"' % (os.path.join(root, f), wiffOut)
							else: # readw
								if self.flagCentroid:
									strCentroid = '-c -c1'
								else:
									strCentroid = ''
								strStartWiff = 'mzWiff -FPC1 %s --mzXML "%s"' % (strCentroid, os.path.join(root, f))#s, wiffOut)

							print(strStartWiff)
							exitCode = os.system(strStartWiff)
						count += 1
						thinking.Update(count)

				thinking.Destroy()
				#info = wx.ScrolledMessageDialog(self, msg, caption, pos, size, style)

				if exitCode == 0:
					#dlg = wx.MessageDialog(self, "Wiff files successfully converted!", "Success", wx.OK|wx.ICON_INFORMATION)
					#if dlg.ShowModal() == wx.ID_OK:
					#	dlg.Destroy()
					return "WIFF" #True
				else:
					dlg = wx.MessageDialog(self, "Problems with Wiff file conversion!", "Failed", wx.OK|wx.ICON_INFORMATION)
					if dlg.ShowModal() == wx.ID_OK:
						dlg.Destroy()
						return False
			else:
				dlg = wx.MessageDialog(self, "The path '%s' does not exist!" % wiffOut, "Error", wx.OK|wx.ICON_HAND)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()
					return False
		else:
			dlg = wx.MessageDialog(self, "The path '%s' does not exist!" % wiffIn, "Error", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return False

	def startConvertRaw(self):

		if playSound:
			wx.Sound('../pics/PressButton.wav').Play()

		rawIn = rawOut = self.filePath_RawIn

		if os.path.exists(rawIn):
			if os.path.exists(rawOut):

				max = 0
				count = 0
				for root, dir, files in os.walk(rawIn):
					max = len(files)

				thinking = wx.ProgressDialog("Thinking ...", "Converting *.raw to *.mzXML", max, self, wx.PD_AUTO_HIDE|wx.PD_SMOOTH)

				for root, dir, files in os.walk(rawIn):
					for f in files:
						if re.match('.*\.raw', f, re.IGNORECASE):
							fout = f.split('.')[0] + '.mzXML'
							fout = rawOut + os.sep + fout

							# select msconvert (MC) or ReAdW
							if self.flagMC: # msconvert
								if self.flagCentroid:
									strStartRaw = 'msconvert-with-centroization.bat "%s" "%s"' % (os.path.join(root, f), rawOut)
								else:
									strStartRaw = 'msconvert-without-centroization.bat "%s" "%s"' % (os.path.join(root, f), rawOut)
							else: # readw
								if self.flagCentroid:
									strCentroid = '-c' # for ReAdW.exe
								else:
									strCentroid = ''
								strStartRaw = 'readw --precursorFromFilterLine --mzXML %s "%s" "%s"' % (strCentroid, os.path.join(root, f), fout)

							print(strStartRaw)
							exitCode = os.system(strStartRaw)
						count += 1
						thinking.Update(count)

				thinking.Destroy()

				if exitCode == 0:
					#dlg = wx.MessageDialog(self, "Raw files successfully converted!", "Success", wx.OK|wx.ICON_INFORMATION)
					#if dlg.ShowModal() == wx.ID_OK:
					#	dlg.Destroy()
					return "RAW" #True
				else:
					dlg = wx.MessageDialog(self, "Problems with Raw file conversion!", "Failed", wx.OK|wx.ICON_INFORMATION)
					if dlg.ShowModal() == wx.ID_OK:
						dlg.Destroy()
						return None
			else:
				dlg = wx.MessageDialog(self, "The path '%s' does not exist!" % rawOut, "Error", wx.OK|wx.ICON_HAND)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()
					return None
		else:
			dlg = wx.MessageDialog(self, "The path '%s' does not exist!" % rawIn, "Error", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None

	def OnBrowse_ImportData(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.DirDialog(self, "Choose a directory", style=wx.DD_DEFAULT_STYLE|wx.DD_DIR_MUST_EXIST)
		dlg.SetPath(os.getcwd())

		if dlg.ShowModal() == wx.ID_OK:
			#self.filePath_ImportData = relativePath(dlg.GetPath())
			self.filePath_ImportData = dlg.GetPath()
			if not os.path.exists(self.filePath_ImportData):
				raise LipidXException

		self.OnBrowse_ImportData_Body(self.filePath_ImportData)

	def OnBrowse_ImportData_Body(self, filePath):

		if not os.path.exists(filePath):
			dlg = wx.MessageDialog(self, "The path '%s' does not exist!" % filePath, "Error", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None

		strMasterScan = filePath + os.sep + filePath.split(os.sep)[-1] + '.sc'
		strOutputFile = filePath + os.sep + filePath.split(os.sep)[-1] + '-out.csv'
		self.filePath_Dump = filePath + os.sep + filePath.split(os.sep)[-1] + '-dump.csv'
		self.text_ctrl_MasterScanSection.SetValue(strMasterScan)
		self.text_ctrl_OutputMasterScanSection.SetValue(strMasterScan)
		self.text_ctrl_OutputSection.SetValue(strOutputFile)
		self.text_ctrl_ImportDataSection.SetValue(filePath)

	def OnBrowse_OutputMasterScan(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.FileDialog(self, "Choose a MasterScan *.sc file", style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE)
		dlg.SetWildcard("*.sc files|*.sc")

		if dlg.ShowModal() == wx.ID_OK:
			self.filePath_MasterScan = relativePath(dlg.GetPath())
			if not re.match('.*\.sc', self.filePath_MasterScan):
				s = self.filePath_MasterScan.split('.')
				if len(s) == 1:
					self.filePath_MasterScan += '.sc'
				else:
					self.filePath_MasterScan = ''
				for i in s[:-1]:
					self.filePath_MasterScan += '%s.' % i
				self.filePath_MasterScan += 'sc'

		dlg.Destroy()
		self.text_ctrl_OutputMasterScanSection.SetValue(self.filePath_MasterScan)

	def OnPaneChanged(self, evt=None):

		# redo the layout
		self.Layout()
		self.Fit()

		# and also change the labels
		if self.collapsable_pane.IsExpanded():
			self.collapsable_pane.SetLabel(self.label2)
		else:
			self.collapsable_pane.SetLabel(self.label1)

	def OnBrowse_LoadIni(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.FileDialog(self, "Choose a *.ini file with settings", style=wx.DD_DEFAULT_STYLE|wx.FD_OPEN)
		dlg.SetWildcard("*.ini files|*.ini")

		if dlg.ShowModal() == wx.ID_OK:
			#self.filePath_LoadIni = relativePath(dlg.GetPath())
			self.filePath_LoadIni = dlg.GetPath()

		self.OnBrowse_LoadIni_Body(self.filePath_LoadIni)

		dlg.Destroy()

	def OnBrowse_LoadIni_Body(self, filePath_LoadIni):

		self.text_ctrl_LoadIniSection.SetValue(filePath_LoadIni)
		self.filePath_LoadIni = filePath_LoadIni

		self.confParse = configparser.ConfigParser()
		self.confParse.read(self.text_ctrl_LoadIniSection.GetLineText(0))

		self.listConfigurations = sorted(self.confParse.sections())

		self.currentConfiguration = ''

		self.choice_SelectSettingSection.Clear()
		self.choice_SelectSettingSection.Append(self.listConfigurations)
		self.clearConfiguration()

	def OnSave_LoadIni(self, evt):

		if self.currentConfiguration != '':
			section = self.currentConfiguration

			self.confParse.set(section, 'precursorMassShift', self.text_ctrl_SettingsSection_precursorMassShift.GetValue())
			self.confParse.set(section, 'precursorMassShiftOrbi', self.text_ctrl_SettingsSection_precursorMassShiftOrbi.GetValue())
			strTimerange = '(%s,%s)' % (self.text_ctrl_SettingsSection_timerange1.GetValue(), self.text_ctrl_SettingsSection_timerange2.GetValue())
			self.confParse.set(section, 'timerange', strTimerange)
			self.confParse.set(section, 'selectionWindow', self.text_ctrl_SettingsSection_selectionWindow.GetValue())
			self.confParse.set(section, 'MSresolution', self.text_ctrl_SettingsSection_resolution_ms.GetValue())
			self.confParse.set(section, 'MSMSresolution', self.text_ctrl_SettingsSection_resolution_msms.GetValue())
			self.confParse.set(section, 'MStolerance', '%s %s' % (self.text_ctrl_SettingsSection_tolerance_ms.GetValue(),\
					self.choice_SettingsSection_tolerance_ms.GetString(self.choice_SettingsSection_tolerance_ms.GetSelection())))
			self.confParse.set(section, 'MSMStolerance',  '%s %s' % (self.text_ctrl_SettingsSection_tolerance_msms.GetValue(),\
					self.choice_SettingsSection_tolerance_msms.GetString(self.choice_SettingsSection_tolerance_msms.GetSelection())))
			strMassrange = '(%s,%s)' % (self.text_ctrl_SettingsSection_massrange_ms1.GetValue(), self.text_ctrl_SettingsSection_massrange_ms2.GetValue())
			self.confParse.set(section, 'MSmassrange', strMassrange)
			strMassrange = '(%s,%s)' % (self.text_ctrl_SettingsSection_massrange_msms1.GetValue(), self.text_ctrl_SettingsSection_massrange_msms2.GetValue())
			self.confParse.set(section, 'MSMSmassrange', strMassrange)
			self.confParse.set(section, 'MSthreshold', self.text_ctrl_SettingsSection_threshold_ms.GetValue())
			self.confParse.set(section, 'MSMSthreshold', self.text_ctrl_SettingsSection_threshold_msms.GetValue())
			#self.confParse.set(section, 'MSthresholdType', '%s' % self.choice_SettingsSection_threshold_ms.GetSelection())
			#self.confParse.set(section, 'MSMSthresholdType', '%s' % self.choice_SettingsSection_threshold_msms.GetSelection())
			self.confParse.set(section, 'MSthresholdType', '%s' % self.store_SettingsSection_threshold_ms)
			self.confParse.set(section, 'MSMSthresholdType', '%s' % self.store_SettingsSection_threshold_msms)
			self.confParse.set(section, 'MSminOccupation', self.text_ctrl_SettingsSection_occupationThr_ms.GetValue())
			self.confParse.set(section, 'MSMSminOccupation', self.text_ctrl_SettingsSection_occupationThr_msms.GetValue())
			self.confParse.set(section, 'MSresolutionDelta', self.text_ctrl_SettingsSection_resDelta_ms.GetValue())
			self.confParse.set(section, 'MSMSresolutionDelta', self.text_ctrl_SettingsSection_resDelta_msms.GetValue())
			self.confParse.set(section, 'MScalibration', self.text_ctrl_SettingsSection_calibration_ms.GetValue())
			self.confParse.set(section, 'MSMScalibration', self.text_ctrl_SettingsSection_calibration_msms.GetValue())
			self.confParse.set(section, 'MSfilter', self.text_ctrl_SettingsSection_filter_ms.GetValue())
			self.confParse.set(section, 'MSMSfilter', self.text_ctrl_SettingsSection_filter_msms.GetValue())

			with open(self.filePath_LoadIni, 'w+') as fIni:
				self.confParse.write(fIni)

			self.fillConfiguration(section)
			self.OnSettingsSaved()

		else:
			self.OnSaveAs_LoadIni(evt)

	def OnDelete_LoadIni(self, evt):

		self.confParse.remove_section(self.currentConfiguration)
		for index in range(len(self.listConfigurations)):
			if self.listConfigurations[index] == self.currentConfiguration:
				del self.listConfigurations[index]
				break

		self.currentConfiguration = ''

		self.choice_SelectSettingSection.Clear()
		self.choice_SelectSettingSection.Append(self.listConfigurations)
		self.clearConfiguration()

		with open(self.filePath_LoadIni, 'w+') as fIni:
			self.confParse.write(fIni)

	def OnSaveAs_LoadIni(self, evt):

		dlg = wx.TextEntryDialog(self, "Choose a name for the section")
		if dlg.ShowModal() == wx.ID_OK:
			newSection = dlg.GetValue()
			dlg.Destroy()
		else:
			dlg.Destroy()
			self.OnSettingsSaved()
			return None

		# now *.ini load since now
		if not self.confParse:

			self.confParse = configparser.ConfigParser()

			msgDlg = wx.MessageDialog(self, "You have to load an existing *.ini file first. Do you want to create one?",
			'Caption', wx.YES|wx.NO|wx.CANCEL|wx.ICON_INFORMATION)

			# create a new *.ini file
			if msgDlg.ShowModal() == wx.ID_YES:
				createNew = True
			msgDlg.Destroy()

			if createNew:
				dlgFile = wx.FileDialog(self, "Choose a *.ini file with settings", style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)
				if dlgFile.ShowModal() == wx.ID_OK:
					#self.filePath_LoadIni = relativePath(dlgFile.GetPath())
					self.filePath_LoadIni = dlgFile.GetPath()
				dlgFile.Destroy()

				# add a new section
				dlg2 = wx.TextEntryDialog(self, "Choose a section name")
				if dlg2.ShowModal() == wx.ID_OK:
					newSection = dlg2.GetValue()
				dlg2.Destroy()

		self.confParse.add_section(newSection)

		self.confParse.set(newSection, 'precursorMassShift', self.text_ctrl_SettingsSection_precursorMassShift.GetValue())
		self.confParse.set(newSection, 'precursorMassShiftOrbi', self.text_ctrl_SettingsSection_precursorMassShiftOrbi.GetValue())
		strTimerange = '(%s,%s)' % (self.text_ctrl_SettingsSection_timerange1.GetValue(), self.text_ctrl_SettingsSection_timerange2.GetValue())
		self.confParse.set(newSection, 'timerange', strTimerange)
		self.confParse.set(newSection, 'selectionWindow', self.text_ctrl_SettingsSection_selectionWindow.GetValue())
		self.confParse.set(newSection, 'MSresolution', self.text_ctrl_SettingsSection_resolution_ms.GetValue())
		self.confParse.set(newSection, 'MSMSresolution', self.text_ctrl_SettingsSection_resolution_msms.GetValue())
		self.confParse.set(newSection, 'MStolerance', self.text_ctrl_SettingsSection_tolerance_ms.GetValue())
		self.confParse.set(newSection, 'MSMStolerance', self.text_ctrl_SettingsSection_tolerance_msms.GetValue())
		strMassrange = '(%s,%s)' % (self.text_ctrl_SettingsSection_massrange_ms1.GetValue(), self.text_ctrl_SettingsSection_massrange_ms2.GetValue())
		self.confParse.set(newSection, 'MSmassrange', strMassrange)
		strMassrange = '(%s,%s)' % (self.text_ctrl_SettingsSection_massrange_msms1.GetValue(), self.text_ctrl_SettingsSection_massrange_msms2.GetValue())
		self.confParse.set(newSection, 'MSMSmassrange', strMassrange)
		self.confParse.set(newSection, 'MSthreshold', self.text_ctrl_SettingsSection_threshold_ms.GetValue())
		self.confParse.set(newSection, 'MSMSthreshold', self.text_ctrl_SettingsSection_threshold_msms.GetValue())
		self.confParse.set(newSection, 'MSthresholdType', '%s' % self.store_SettingsSection_threshold_ms)
		self.confParse.set(newSection, 'MSMSthresholdType', '%s' % self.store_SettingsSection_threshold_msms)
		self.confParse.set(newSection, 'MSminOccupation', self.text_ctrl_SettingsSection_occupationThr_ms.GetValue())
		self.confParse.set(newSection, 'MSMSminOccupation', self.text_ctrl_SettingsSection_occupationThr_msms.GetValue())
		self.confParse.set(newSection, 'MSresolutionDelta', self.text_ctrl_SettingsSection_resDelta_ms.GetValue())
		self.confParse.set(newSection, 'MSMSresolutionDelta', self.text_ctrl_SettingsSection_resDelta_msms.GetValue())
		self.confParse.set(newSection, 'MScalibration', self.text_ctrl_SettingsSection_calibration_ms.GetValue())
		self.confParse.set(newSection, 'MSMScalibration', self.text_ctrl_SettingsSection_calibration_msms.GetValue())
		self.confParse.set(newSection, 'MSfilter', self.text_ctrl_SettingsSection_filter_ms.GetValue())
		self.confParse.set(newSection, 'MSMSfilter', self.text_ctrl_SettingsSection_filter_msms.GetValue())

		self.listConfigurations.append(newSection)
		self.listConfigurations.sort()

		#self.choice_SelectSettingSection.Set(sorted(self.confParse.sections()))
		self.choice_SelectSettingSection.Clear()
		self.choice_SelectSettingSection.Append(self.listConfigurations)

		with open(self.filePath_LoadIni, 'w+') as fIni:
			self.confParse.write(fIni)

		self.fillConfiguration(newSection)

		indexSection = None
		self.listConfigurations = sorted(self.confParse.sections())
		for i in range(len(self.listConfigurations)):
			if self.listConfigurations[i] == newSection:
				indexSection = i

		if indexSection:
			self.choice_SelectSettingSection.SetSelection(indexSection)
		self.currentConfiguration = newSection

		self.OnSettingsSaved()

	def OnChoice_Tolerance_MS(self, evt):
		if evt.GetString() == 'ppm':
			self.store_SettingsSection_tolerance_ms = 'ppm'
		elif evt.GetString() == 'Da':
			self.store_SettingsSection_tolerance_ms = 'Da'

	def OnChoice_Tolerance_MSMS(self, evt):
		if evt.GetString() == 'ppm':
			self.store_SettingsSection_tolerance_msms = 'ppm'
		elif evt.GetString() == 'Da':
			self.store_SettingsSection_tolerance_msms = 'Da'

	def OnChoice_Threshold_MS(self, evt):
		if evt.GetString() == 'relative':
			self.store_SettingsSection_threshold_ms = 'relative'
		elif evt.GetString() == 'absolute':
			self.store_SettingsSection_threshold_ms = 'absolute'
		self.OnSettingsChange()

	def OnChoice_Threshold_MSMS(self, evt):
		if evt.GetString() == 'relative':
			self.store_SettingsSection_threshold_msms = 'relative'
		elif evt.GetString() == 'absolute':
			self.store_SettingsSection_threshold_msms = 'absolute'
		self.OnSettingsChange()


	def OnOpen_Output(self, evt):

		if playSound:
			wx.Sound('../pics/OpenFile.wav').Play()

		curScript = self.text_ctrl_OutputSection.GetValue().split(os.sep)[-1]
		fileName = self.text_ctrl_OutputSection.GetValue()

		if not os.path.exists(fileName):
			dlg = wx.MessageDialog(self, "The path '%s' does not exist!" % fileName, "Error", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None

		win = CSVViewer(self, -1, "Ouput as *.csv file", file = fileName)
		win.Show(True)
		pass

	def OnBrowse_Output(self, evt):

		# specify output file
		dlg = wx.FileDialog(self, "Specify a file for the output", style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE)
		dlg.SetWildcard("*.csv|*.csv")

		if dlg.ShowModal() == wx.ID_OK:
			self.filePath_Output = relativePath(dlg.GetPath())

			if not re.match('.*\.csv', self.filePath_Output):
				s = self.filePath_Output.split('.')
				if len(s) == 1:
					self.filePath_Output += '.csv'
				else:
					self.filePath_Output = ''
				for i in s[:-1]:
					self.filePath_Output += '%s.' % i
				self.filePath_Output += 'csv'

		dlg.Destroy()
		try:
			self.text_ctrl_OutputSection.SetValue(self.filePath_Output)
		except AttributeError:
			print("No output file specified!")

	def OnBrowse_MasterScan(self, evt):

		# open MasterScanFile
		dlg = wx.FileDialog(self, "Choose a masterScan file", style=wx.DD_DEFAULT_STYLE|wx.FD_OPEN)
		dlg.SetWildcard("*.sc files|*.sc")

		if dlg.ShowModal() == wx.ID_OK:
			self.filePath_MasterScan = relativePath(dlg.GetPath())

		dlg.Destroy()

		self.OnBrowse_MasterScan_Body(self.filePath_MasterScan)

	def OnBrowse_MasterScan_Body(self, filePath):

		if not re.match('.*\.sc$', filePath):
			dlg = wx.MessageDialog(self, "The filename '%s' has no '.sc' at its end!" % filePath, "Error", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None

		# generate output file
		file = filePath.split(os.sep)[-1]
		fileOut = file.split('.')[0] + '-out.csv'
		fileDump = file.split('.')[0] + '-dump.csv'
		fileComplementSC = file.split('.')[0] + '-complement.sc'
		path = filePath.split(os.sep)[:-1]
		strPath = ''
		for i in path:
			strPath += i + os.sep

		if strPath != '':
			if strPath[-1] == os.sep:
				strOutputFile = strPath + fileOut
				strDump = strPath + fileDump
				strComplementSC = strPath + fileComplementSC
			else:
				strOutputFile = strPath + os.sep + fileOut
				strDump = strPath + os.sep + fileDump
				strComplementSC = strPath + os.sep + fileComplementSC
		else:
			strOutputFile = fileOut
			strDump = fileDump
			strComplementSC = fileComplementSC

		self.text_ctrl_OutputSection.SetValue(strOutputFile)
		self.text_ctrl_MasterScanSection.SetValue(filePath)

		self.filePath_Dump = strDump
		self.filePath_ComplementSC = strComplementSC

	def OnBrowse_Dump(self, evt):

		# specify a dump file
		dlg = wx.FileDialog(self, "Specify a dump file", style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE)
		if self.filePath_Dump:
			dlg.SetPath(self.filePath_Dump)

		if dlg.ShowModal() == wx.ID_OK:
			self.filePath_Dump = relativePath(dlg.GetPath())

		dlg.Destroy()
		#self.filePath_Dump = self.filePath_MasterScan + os.sep + self.filePath_MasterScan.split(os.sep)[-1] + '-dump.csv'

	def OnOpen_Dump(self, evt):

		if playSound:
			wx.Sound('../pics/OpenFile.wav').Play()

		curScript = self.filePath_Dump.split(os.sep)[-1]
		fileName = self.filePath_Dump

		if not os.path.exists(fileName):
			dlg = wx.MessageDialog(self, "The dump of your MasterScan does not exist. It will be generated if you check 'dump MasterScan' and hit the 'Run LipidXplorer' button.",
					"Attention!", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None

		win = CSVViewer(self, -1, "Dump file output", file = fileName)
		win.Show(True)

		return None

	def OnSettingsChange(self):

		#if not self.button_Save_LoadIniSection.GetBackgroundColour() == (250, 80, 80, 215):
		self.button_Save_LoadIniSection.SetBackgroundColour((250, 80, 80, 215))
		self.isChangedAndNotSavedCurrentConfiguration = True
		self.Refresh()

	def OnSettingsSaved(self):

		#if not self.button_Save_LoadIniSection.GetBackgroundColour() == (230, 224, 218, 255):
		self.button_Save_LoadIniSection.SetBackgroundColour((240, 240, 240, 94))
		self.isChangedAndNotSavedCurrentConfiguration = False
		self.Refresh()

	def OnConfigurationChoice(self, evt):

		if self.isChangedAndNotSavedCurrentConfiguration:
			dlg = wx.MessageDialog(self, "Modified configuration '%s' is not saved. Save it?" % \
					self.currentConfiguration, "Ups..", wx.YES|wx.NO|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_YES:
				self.OnSave_LoadIni()
				return None

		self.currentConfiguration = evt.GetString()
		self.fillConfiguration(self.currentConfiguration)
		self.OnSettingsSaved()

	#def OnImportMSMS(self, evt):

	#	if self.checkBox_importMSMS.GetValue():
	#		self.lpdxOptions['importMSMS'] = False
	#	else:
	#		self.lpdxOptions['importMSMS'] = True

	def OnConfigurationEdit(self, evt):
		pass

	def OnConfigurationNew(self, evt):
		pass

	def OnConfigurationRemove(self, evt):
		pass

	def fillConfiguration(self, setting):
		'''Fill values in the configuration panel from the *.ini file.'''

		# some options
		self.opts = {}
		if self.confParse.has_option(setting, "MSminOccupation"):
			self.text_ctrl_SettingsSection_occupationThr_ms.ChangeValue(self.confParse.get(setting, "MSminOccupation"))
		else:
			self.text_ctrl_SettingsSection_occupationThr_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMSminOccupation"):
			self.text_ctrl_SettingsSection_occupationThr_msms.ChangeValue(self.confParse.get(setting, "MSMSminOccupation"))
		else:
			self.text_ctrl_SettingsSection_occupationThr_msms.ChangeValue('')

		if self.confParse.has_option(setting, "MSthreshold"):
			self.text_ctrl_SettingsSection_threshold_ms.ChangeValue(self.confParse.get(setting, "MSthreshold"))
		else:
			self.text_ctrl_SettingsSection_threshold_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMSthreshold"):
			self.text_ctrl_SettingsSection_threshold_msms.ChangeValue(self.confParse.get(setting, "MSMSthreshold"))
		else:
			self.text_ctrl_SettingsSection_threshold_msms.ChangeValue('')

		if self.confParse.has_option(setting, "MSthresholdType"):
			self.choice_SettingsSection_threshold_ms.SetStringSelection(self.confParse.get(setting, "MSthresholdType"))
			self.store_SettingsSection_threshold_ms = self.confParse.get(setting, "MSthresholdType")
		else:
			self.choice_SettingsSection_threshold_ms.SetStringSelection("absolute")
			self.store_SettingsSection_threshold_ms = "absolute"

		if self.confParse.has_option(setting, "MSMSthresholdType"):
			self.choice_SettingsSection_threshold_msms.SetStringSelection(self.confParse.get(setting, "MSMSthresholdType"))
			self.store_SettingsSection_threshold_msms = self.confParse.get(setting, "MSMSthresholdType")
		else:
			self.choice_SettingsSection_threshold_msms.SetStringSelection("absolute")
			self.store_SettingsSection_threshold_msms = "absolute"

		if self.confParse.has_option(setting, "timerange"):
			strTimerange = self.confParse.get(setting, "timerange")
			m = re.match('\(\s*(\d+)\s*,\s*(\d+)\s*\)', strTimerange)
			if m:
				self.text_ctrl_SettingsSection_timerange1.ChangeValue(m.group(1))
				self.text_ctrl_SettingsSection_timerange2.ChangeValue(m.group(2))
			else:
				self.text_ctrl_SettingsSection_timerange1.ChangeValue('')
				self.text_ctrl_SettingsSection_timerange2.ChangeValue('')
		else:
			self.text_ctrl_SettingsSection_timerange1.ChangeValue('')
			self.text_ctrl_SettingsSection_timerange2.ChangeValue('')

		if self.confParse.has_option(setting, "MSmassrange"):
			strMassrange = self.confParse.get(setting, "MSmassrange")
			m = re.match('\(\s*(\d+)\s*,\s*(\d+)\s*\)', strMassrange)
			if m:
				self.text_ctrl_SettingsSection_massrange_ms1.ChangeValue(m.group(1))
				self.text_ctrl_SettingsSection_massrange_ms2.ChangeValue(m.group(2))
			else:
				self.text_ctrl_SettingsSection_massrange_ms1.ChangeValue('')
				self.text_ctrl_SettingsSection_massrange_ms2.ChangeValue('')
		else:
			self.text_ctrl_SettingsSection_massrange_ms1.ChangeValue('')
			self.text_ctrl_SettingsSection_massrange_ms2.ChangeValue('')

		if self.confParse.has_option(setting, "MSMSmassrange"):
			strMassrange = self.confParse.get(setting, "MSMSmassrange")
			m = re.match('\(\s*(\d+)\s*,\s*(\d+)\s*\)', strMassrange)
			if m:
				self.text_ctrl_SettingsSection_massrange_msms1.ChangeValue(m.group(1))
				self.text_ctrl_SettingsSection_massrange_msms2.ChangeValue(m.group(2))
			else:
				self.text_ctrl_SettingsSection_massrange_msms1.ChangeValue('')
				self.text_ctrl_SettingsSection_massrange_msms2.ChangeValue('')
		else:
			self.text_ctrl_SettingsSection_massrange_msms1.ChangeValue('')
			self.text_ctrl_SettingsSection_massrange_msms2.ChangeValue('')

		if self.confParse.has_option(setting, "MSresolution"):
			self.text_ctrl_SettingsSection_resolution_ms.ChangeValue(self.confParse.get(setting, "MSresolution"))
		else:
			self.text_ctrl_SettingsSection_resolution_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMSresolution"):
			self.text_ctrl_SettingsSection_resolution_msms.ChangeValue(self.confParse.get(setting, "MSMSresolution"))
		else:
			self.text_ctrl_SettingsSection_resolution_msms.ChangeValue("")

		if self.confParse.has_option(setting, "MSresolutionDelta"):
			self.text_ctrl_SettingsSection_resDelta_ms.ChangeValue(self.confParse.get(setting, "MSresolutionDelta"))
		else:
			self.text_ctrl_SettingsSection_resDelta_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMSresolutionDelta"):
			self.text_ctrl_SettingsSection_resDelta_msms.ChangeValue(self.confParse.get(setting, "MSMSresolutionDelta"))
		else:
			self.text_ctrl_SettingsSection_resDelta_msms.ChangeValue('')

		if self.confParse.has_option(setting, "MScalibration"):
			self.text_ctrl_SettingsSection_calibration_ms.ChangeValue(self.confParse.get(setting, "MScalibration"))
		else:
			self.text_ctrl_SettingsSection_calibration_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMScalibration"):
			self.text_ctrl_SettingsSection_calibration_msms.ChangeValue(self.confParse.get(setting, "MSMScalibration"))
		else:
			self.text_ctrl_SettingsSection_calibration_msms.ChangeValue('')

		if self.confParse.has_option(setting, "MSfilter"):
			self.text_ctrl_SettingsSection_filter_ms.ChangeValue(self.confParse.get(setting, "MSfilter"))
		else:
			self.text_ctrl_SettingsSection_filter_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMSfilter"):
			self.text_ctrl_SettingsSection_filter_msms.ChangeValue(self.confParse.get(setting, "MSMSfilter"))
		else:
			self.text_ctrl_SettingsSection_filter_msms.ChangeValue('')

		if self.confParse.has_option(setting, "MStolerance"):
			str = self.confParse.get(setting, "MStolerance")
			#if re.match('(.*)!(\s(ppm|Da))', str):
			if re.match('(\d+|\d+\.\d+)$', str):
				m = re.match('(\d+|\d+\.\d+)', str)
				self.text_ctrl_SettingsSection_tolerance_ms.ChangeValue(m.group(1))
				self.choice_SettingsSection_tolerance_ms.SetStringSelection('ppm')
			elif re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str):
				m = re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str)
				self.text_ctrl_SettingsSection_tolerance_ms.ChangeValue(m.group(1))
				self.choice_SettingsSection_tolerance_ms.SetStringSelection(m.group(3))
			else:
				dlgError = wx.MessageDialog(self, "Cannot read MS Tolerance Value. Setting it to zero.",
					"Error", wx.OK)
				self.text_ctrl_SettingsSection_tolerance_ms.ChangeValue('')
		else:
			self.text_ctrl_SettingsSection_tolerance_ms.ChangeValue('')

		if self.confParse.has_option(setting, "MSMStolerance"):
			str = self.confParse.get(setting, "MSMStolerance")
			#if re.match('(.*)!(\s(ppm|Da))', str):
			if re.match('(\d+|\d+\.\d+)$', str):
				m = re.match('(\d+|\d+\.\d+)', str)
				self.text_ctrl_SettingsSection_tolerance_msms.ChangeValue(m.group(1))
				self.choice_SettingsSection_tolerance_msms.SetStringSelection('ppm')
			elif re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str):
				m = re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str)
				self.text_ctrl_SettingsSection_tolerance_msms.ChangeValue(m.group(1))
				self.choice_SettingsSection_tolerance_msms.SetStringSelection(m.group(3))
			else:
				dlgError = wx.MessageDialog(self, "Cannot read MS/MS Tolerance Value. Setting it to zero.",
					"Error", wx.OK)
				self.text_ctrl_SettingsSection_tolerance_msms.ChangeValue('')
		else:
			self.text_ctrl_SettingsSection_tolerance_msms.ChangeValue('')

		if self.confParse.has_option(setting, "selectionWindow"):
			self.text_ctrl_SettingsSection_selectionWindow.ChangeValue(self.confParse.get(setting, "selectionWindow"))
		else:
			self.text_ctrl_SettingsSection_selectionWindow.ChangeValue('')

		if self.confParse.has_option(setting, "precursorMassShift"):
			self.text_ctrl_SettingsSection_precursorMassShift.ChangeValue(self.confParse.get(setting, "precursorMassShift"))
		else:
			self.text_ctrl_SettingsSection_precursorMassShift.ChangeValue('')

		if self.confParse.has_option(setting, "precursorMassShiftOrbi"):
			self.text_ctrl_SettingsSection_precursorMassShiftOrbi.ChangeValue(self.confParse.get(setting, "precursorMassShiftOrbi"))
		else:
			self.text_ctrl_SettingsSection_precursorMassShiftOrbi.ChangeValue('')

	def clearConfiguration(self):

		# some options
		self.text_ctrl_SettingsSection_occupationThr_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_occupationThr_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_threshold_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_threshold_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_timerange1.ChangeValue('')
		self.text_ctrl_SettingsSection_timerange2.ChangeValue('')
		self.text_ctrl_SettingsSection_massrange_ms1.ChangeValue('')
		self.text_ctrl_SettingsSection_massrange_ms2.ChangeValue('')
		self.text_ctrl_SettingsSection_massrange_msms1.ChangeValue('')
		self.text_ctrl_SettingsSection_massrange_msms2.ChangeValue('')
		self.text_ctrl_SettingsSection_resolution_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_resolution_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_resDelta_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_resDelta_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_calibration_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_calibration_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_filter_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_filter_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_tolerance_ms.ChangeValue('')
		self.text_ctrl_SettingsSection_tolerance_msms.ChangeValue('')
		self.text_ctrl_SettingsSection_selectionWindow.ChangeValue('')
		self.text_ctrl_SettingsSection_precursorMassShift.ChangeValue('')
		self.text_ctrl_SettingsSection_precursorMassShiftOrbi.ChangeValue('')

	def OnStartImport(self, evt):

		if self.lipidxplorer:
			from lx.lxMain import startImport
		else:
			from lipoxplorer.lxMain import runLipoX

		# get the options from GUI settings
		project = self.readOptions()

		# test if all options are correct
		#project.testOptions()

		# change them into the right format
		project.formatOptions()

		# get options
		options = project.getOptions()

		self.button_StartImport.Disable()
		self.isRunning = True

		# start import
		#startImportGUI(self, options)

		try: # generate a new MasterScan and set the import settings


			if self.lipidxplorer:

				if not wx.GetApp().frame.debugOpen:
					wx.GetApp().frame.OnMenuDebugWin(None)

				# give queues to the Worker class for threadsave data handling
				requestQ = queue.Queue()
				resultQ = queue.Queue()
				worker = Worker(self, requestQ, resultQ)

				startImport(options = options,
						queries = project.mfql,
						parent = self,
						worker = worker,
						lipidxplorer = self.lipidxplorer,
						optimization = self.optimized)

			else:
				runLipoX(options = options, queries = project.mfql, parent = self)

		except LipidXException:

			#frame.handleLipidXException()

			evt = wxStdOut(text = '')#v.value)
			if not wx.GetApp().frame.debugOpen:
				wx.GetApp().frame.OnMenuDebugWin(None)
			wx.PostEvent(wx.GetApp().frame, evt)

			(excName, excArgs, excTb, exc) = formatExceptionInfo()
			dlg = wx.MessageDialog(wx.GetApp().frame,"%s" % (exc), "ERROR", wx.OK|wx.ICON_ERROR)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()

			self.button_StartImport.Enable()
			self.isRunning = False
			return None

		except ImportException:

			evt = wxStdOut(text = '')#v.value)
			if not wx.GetApp().frame.debugOpen:
				wx.GetApp().frame.OnMenuDebugWin(None)
			wx.PostEvent(wx.GetApp().frame, evt)

			(excName, excArgs, excTb, exc) = formatExceptionInfo()
			dlg = wx.MessageDialog(wx.GetApp().frame,"%s" % (exc), "ERROR", wx.OK|wx.ICON_ERROR)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()

			self.button_StartImport.Enable()
			self.isRunning = False
			return None

		except Exception:

			# hijack the exception
			traceback.print_tb(sys.exc_info()[2])
			evt = wxStdOut(text = '')
			if not wx.GetApp().frame.debugOpen:
				wx.GetApp().frame.OnMenuDebugWin(None)
			wx.PostEvent(wx.GetApp().frame, evt)
			(excName, excArgs, excTb, exc) = formatExceptionInfo()
			print(excName, exc)

			text = "The following error occured:\n\n"
			text += "** %s : %s **\n\n\n" % (excName, exc)
			text += "If you think that this a bug in the software you can send\na bug report to the us.\n"
			text += "Do you want to generate the bug report?"
			dlg = wx.MessageDialog(wx.GetApp().frame, text, "ERROR", style=wx.YES_NO|wx.CANCEL|wx.NO_DEFAULT)
			#dlg = MyErrorDialog(wx.GetApp().frame, -1, "ERROR", 'bla')
			r = dlg.ShowModal()
			if r == wx.ID_YES:

				dlg = wx.MessageDialog(wx.GetApp().frame, "Please store the bugReport.html and send it to lifs-support@isas.de", \
						"ERROR", style=wx.OK)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()

				strBugReport = """
				<html><head></head><body>
				<h3>%s</h3>
				<h3>%s</h3>
				<h3>%s</h3>
				<p><tt>
				""" % (sys.version, excName, exc)
				for i in excTb:
					strBugReport += "%s<br>" % i
				strBugReport += "</tt></p><br>"
				strBugReport += "%s" % wx.GetApp().frame.genBugReportHTML()
				strBugReport += "</body></html>"

				dlg = wx.FileDialog(wx.GetApp().frame, "Specify the site for the bugReport.html",
					style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT,
					defaultFile = "bugReport.html")
				dlg.SetWildcard("*.html files|*.html")

				if dlg.ShowModal() == wx.ID_OK:
					d = dlg.GetPath()
					with open(d, 'w') as f:
						f.write(strBugReport)
					print(d)

			else:
				dlg.Destroy()

			self.button_StartImport.Enable()
			self.isRunning = False
			return None


	def OnAddMFQL(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.FileDialog(self, "Choose a MFQL file", style=wx.DD_DEFAULT_STYLE|wx.FD_OPEN|wx.FD_MULTIPLE)
		dlg.SetWildcard("*.mfql files|*.mfql")

		if dlg.ShowModal() == wx.ID_OK:
			self.filePath_AddMFQL = dlg.GetPaths()

			for p in self.filePath_AddMFQL:
				l = p.split(os.sep)
				self.dictMFQLScripts[l[-1]] = p

			#self.list_box_1.Set(sorted(self.dictMFQLScripts.keys()))
			self.list_box_1.Set(list(self.dictMFQLScripts.keys()))

		dlg.Destroy()

	def OnAddDir(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.DirDialog(self, "Choose a directory with MFQL files", style=wx.DD_DEFAULT_STYLE|wx.DD_DIR_MUST_EXIST)
		dlg.SetPath(os.getcwd())

		if dlg.ShowModal() == wx.ID_OK:
			self.filePath_MFQLDir = dlg.GetPath()

			for i in os.listdir(self.filePath_MFQLDir):
				if re.match('.*\.mfql', i):
					self.dictMFQLScripts[i] = self.filePath_MFQLDir + os.sep + i
			self.list_box_1.Set(list(self.dictMFQLScripts.keys()))

		dlg.Destroy()

	def OnSavePanel(self, evt):

		for key in list(self.dict_button_save.keys()):
			if evt.GetId() == self.dict_button_save[key].GetId():

				# find right page
				for i in range(self.notebook_1.GetPageCount()):
					if self.notebook_1.GetPage(i) == self.dict_button_save[key].GetParent():
						with open(self.dictMFQLScripts[key], 'w') as mfqlFile:
							self.dict_mfqlFile[key] = mfqlFile
							mfqlFile.write(self.dict_text_ctrl[key].GetText())
							self.dict_isChangedAndNotSavedMfqlFile[key] = False
						if key in self.dict_button_save:
							self.dict_button_save[key].SetBackgroundColour((230, 224, 218, 255))

	def OnNewPanel(self, evt):

		self.OnNewFile(evt)
		return None

	def OnSaveAsPanel(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.FileDialog(self, "Specify a filename for the MFQL file", style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)
		dlg.SetWildcard("*.mfql files|*.mfql")
		dlg.SetPath(os.getcwd())

		if dlg.ShowModal() == wx.ID_OK:
			p = dlg.GetFilename()
			if not re.match('.*\.mfql', p, re.IGNORECASE):
				s = p.split('.')
				if len(s) == 1:
					p += '.mfql'
				else:
					p = ''
					for i in s[:-1]:
						p = '%s.' % i
					p += 'mfql'


			if p not in self.dictMFQLScripts:

				self.dictMFQLScripts[p] = ''
				for i in dlg.GetPath().split(os.sep)[:-1]:
					self.dictMFQLScripts[p] += i + os.sep
				self.dictMFQLScripts[p] += p

				for key in list(self.dict_button_saveAs.keys()):
					if evt.GetId() == self.dict_button_saveAs[key].GetId():

						oldText = key

						# find right page
						for i in range(self.notebook_1.GetPageCount()):
							if self.notebook_1.GetPage(i) == self.dict_button_saveAs[key].GetParent():

								with open(self.dictMFQLScripts[p], 'w') as f:
									f.write(self.dict_text_ctrl[key].GetText())
								self.dict_isChangedAndNotSavedMfqlFile[p] = False
								if key in self.dict_button_save:
									self.dict_button_save[key].SetBackgroundColour((230, 224, 218, 255))



				### remove entry
				#sortedKeys = self.dictMFQLScripts.keys()

				#for index in self.list_box_1.GetSelections():
				#	del self.dictMFQLScripts[key]
				#	self.OnClosePanel(evt, key, secureCheck = False)

				# update list_box in Run panel
				self.list_box_1.Set(list(self.dictMFQLScripts.keys()))
				self.list_box_1.SetSelection(list(self.dictMFQLScripts.keys()).index(p))
				### end remove entry

				# fill the changed text with the original one
				with open(self.dictMFQLScripts[oldText], 'r') as o:
					self.dict_text_ctrl[oldText].SetText(o.read())
				self.dict_isChangedAndNotSavedMfqlFile[oldText] = False
				self.dict_button_save[oldText].SetBackgroundColour((230, 224, 218, 255))

				#self.OnOpenFile(newFile = sorted(self.dictMFQLScripts.keys()).index(p))
				self.OnOpenFile(newFile = -1)

				self.notebook_1.ChangeSelection(self.notebook_1.GetPageCount() - 1)


			else:
				with open(self.dictMFQLScripts[p], 'w') as mfqlFile:
					self.dict_mfqlFile[p] = mfqlFile
					mfqlFile.write(self.dict_text_ctrl[p].GetText())
				self.dict_isChangedAndNotSavedMfqlFile[p] = False
				if p in self.dict_button_save:
					self.dict_button_save[p].SetBackgroundColour((230, 224, 218, 255))

	#self.key_button[i].GetParent().GetParent().RemovePage(n)
	#self.notebook_1.RemovePage(i)

		return None
		#self.list_notebook_editor

	def OnClosePanel(self, evt, key = None, secureCheck = True):

		if (key or key == 0) and key in self.dict_button_close:
			id = self.dict_button_close[key].GetId()

			for i in range(self.notebook_1.GetPageCount()):
				if self.notebook_1.GetPage(i) == self.dict_button_close[key].GetParent():

					savedPage = False

					saveIt = False

					#if self.dict_text_ctrl.IsModified():
					if self.dict_isChangedAndNotSavedMfqlFile[key] and secureCheck:
						dlg = wx.MessageDialog(self, "Modified Query '%s' is not saved! Save it?" % key, "Ups...",
							wx.NO|wx.YES|wx.ICON_HAND)

						if dlg.ShowModal() == wx.ID_YES:

							savedPage = True
							with open(self.dictMFQLScripts[key], 'w') as mfqlFile:
								self.dict_mfqlFile[key] = mfqlFile
								mfqlFile.write(self.dict_text_ctrl[key].GetText())
							self.dict_isChangedAndNotSavedMfqlFile[key] = False
							if key in self.dict_button_save:
								self.dict_button_save[key].SetBackgroundColour((230, 224, 218, 255))
							dlg.Destroy()

					self.notebook_1.RemovePage(i)
					self.dict_button_close[key].Destroy()
					del self.dict_button_close[key]
					self.dict_button_save[key].Destroy()
					del self.dict_button_save[key]
					self.dict_button_saveAs[key].Destroy()
					del self.dict_button_saveAs[key]
					self.dict_button_new[key].Destroy()
					del self.dict_button_new[key]
					self.dict_text_ctrl[key].Destroy()
					del self.dict_text_ctrl[key]
					self.dict_notebook_editor[key].Destroy()
					del self.dict_notebook_editor[key]

					del self.dict_mfqlFile[key]

					for k in self.dict_notebook_editor:
						self.dict_notebook_editor[k].Layout()

					return None

		else:
			for key in list(self.dict_button_close.keys()):
				savedPage = False

				if evt.GetId() == self.dict_button_close[key].GetId():
					# find right page
					for i in range(self.notebook_1.GetPageCount()):
						if self.notebook_1.GetPage(i) == self.dict_button_close[key].GetParent():
							#if self.dict_text_ctrl.IsModified():
							if self.dict_isChangedAndNotSavedMfqlFile[key]:
								dlg = wx.MessageDialog(self, "Modified Query '%s' is not saved! Save it?" % key, "Ups...",
									wx.NO|wx.YES|wx.ICON_HAND)

								if dlg.ShowModal() == wx.ID_YES:

									savedPage = True
									with open(self.dictMFQLScripts[key], 'w') as mfqlFile:
										self.dict_mfqlFile[key] = mfqlFile
										self.dict_mfqlFile[key].write(self.dict_text_ctrl[key].GetText())
									self.dict_isChangedAndNotSavedMfqlFile[key] = False
									if key in self.dict_button_save:
										self.dict_button_save[key].SetBackgroundColour((230, 224, 218, 255))
									dlg.Destroy()



							self.notebook_1.RemovePage(i)
							self.dict_button_close[key].Destroy()
							del self.dict_button_close[key]
							self.dict_button_save[key].Destroy()
							del self.dict_button_save[key]
							self.dict_button_saveAs[key].Destroy()
							del self.dict_button_saveAs[key]
							self.dict_button_new[key].Destroy()
							del self.dict_button_new[key]
							self.dict_text_ctrl[key].Destroy()
							del self.dict_text_ctrl[key]
							self.dict_notebook_editor[key].Destroy()
							del self.dict_notebook_editor[key]

							del self.dict_mfqlFile[key]

							for k in self.dict_notebook_editor:
								self.dict_notebook_editor[k].Layout()

							return None

		return None

	def OnOpenFile(self, evt = None, newFile = None):

		if playSound:
			wx.Sound('../pics/OpenFile.wav').Play()
		sortedKeys = list(self.dictMFQLScripts.keys())

		if not newFile:
			for index in self.list_box_1.GetSelections():

				curScript = [sortedKeys[index]][0]

				# add a page to the notebook
				if self.dict_notebook_editor == {}:
					self.dict_notebook_editor = {curScript : wx.Panel(self.notebook_1, -1)}
				elif curScript not in self.dict_notebook_editor:
					self.dict_notebook_editor[curScript] = wx.Panel(self.notebook_1, -1)
				else:
					return None

				self.notebook_1.AddPage(self.dict_notebook_editor[curScript], curScript)

				# generate textCtrl window
				#self.dict_text_ctrl[curScript] = stc.StyledTextCtrl(self.dict_notebook_editor[curScript], -1, "",
				#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
				#self.dict_text_ctrl[curScript] = stc.StyledTextCtrl(self.dict_notebook_editor[curScript],
				#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
				self.dict_text_ctrl[curScript] = PythonSTC(self.dict_notebook_editor[curScript], -1,
					style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
		   				# line numbers in the margin

				# stc bindings
				self.dict_text_ctrl[curScript].Bind(stc.EVT_STC_CHANGE, self.OnStcChange)

				self.dict_text_ctrl[curScript].SetZoom(2)
				self.dict_text_ctrl[curScript].SetMarginType(0, stc.STC_MARGIN_NUMBER)
				self.dict_text_ctrl[curScript].SetMarginWidth(0, 22)
				self.dict_text_ctrl[curScript].StyleSetSpec(stc.STC_STYLE_LINENUMBER, "size:9,face:Arial")
				self.dict_text_ctrl[curScript].Colourise(0, -1)

				#self.dict_text_ctrl[curScript].SetSize((835,700))
				#self.dict_text_ctrl[curScript].SetMinSize((800,700))
				self.dict_text_ctrl[curScript].SetMinSize((self.GetSize()[0] - 40, self.GetSize()[1] - 150))

				# open MFQL file
				with open(self.dictMFQLScripts[curScript], 'r') as mfqlFile:
					self.dict_mfqlFile[curScript] = mfqlFile
					for line in self.dict_mfqlFile[curScript].readlines():
						self.dict_text_ctrl[curScript].AppendText(line)
				self.dict_isChangedAndNotSavedMfqlFile[curScript] = False

				# add the close button
				self.dict_button_close[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "Close")
				self.dict_button_close[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnClosePanel, self.dict_button_close[curScript])

				# add the save button
				self.dict_button_save[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "Save")
				self.dict_button_save[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnSavePanel, self.dict_button_save[curScript])

				# add the saveAs button
				self.dict_button_saveAs[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "SaveAs")
				self.dict_button_saveAs[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnSaveAsPanel, self.dict_button_saveAs[curScript])

				# add the new button
				self.dict_button_new[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "New")
				self.dict_button_new[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnNewPanel, self.dict_button_new[curScript])

				# put all together with a box sizer
				#self.dict_flex_sizer[curScript] = wx.FlexGridSizer(2,1,3,3)
				self.dict_box_sizer_horizontal[curScript] = wx.BoxSizer(wx.HORIZONTAL)
				self.dict_box_sizer_vertical[curScript] = wx.BoxSizer(wx.VERTICAL)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_new[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_save[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_saveAs[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_close[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Fit(self.dict_notebook_editor[curScript])
				#self.dict_flex_sizer[curScript].Add(self.dict_text_ctrl[curScript], 1, wx.ALL|wx.EXPAND|wx.GROW, 10)
				#self.dict_flex_sizer[curScript].Add(self.dict_box_sizer_horizontal[curScript], 0,
				#	wx.ALIGN_CENTER, 0)
				self.dict_box_sizer_vertical[curScript].Add(self.dict_text_ctrl[curScript], 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 10)

				self.dict_box_sizer_vertical[curScript].Add(self.dict_box_sizer_horizontal[curScript], 0,
					wx.ALIGN_CENTER|wx.ADJUST_MINSIZE, 0)

				self.dict_notebook_editor[curScript].SetSizerAndFit(self.dict_box_sizer_vertical[curScript])
				#self.dict_notebook_editor[curScript].SetSizer(self.dict_flex_sizer[curScript])

				#self.dict_notebook_editor[curScript].Fit()
				self.dict_notebook_editor[curScript].Layout()

				#self.Layout()
				#self.SetSize(self.GetSize())

		#	self.SetClientSize(p.GetSize())
			return None

		elif False:

			for index in self.list_box_1.GetSelections():

				curScript = [sortedKeys[index]][0]

				# add a page to the notebook
				if self.dict_notebook_editor == {}:
					self.dict_notebook_editor = {curScript : wx.Panel(self.notebook_1, -1)}
				elif curScript not in self.dict_notebook_editor:
					self.dict_notebook_editor[curScript] = wx.Panel(self.notebook_1, -1)
				else:
					return None

				self.notebook_1.AddPage(self.dict_notebook_editor[curScript], curScript, True)

				# generate textCtrl window
				#self.dict_text_ctrl[curScript] = stc.StyledTextCtrl(self.dict_notebook_editor[curScript], -1, "",
				#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
				#self.dict_text_ctrl[curScript] = stc.StyledTextCtrl(self.dict_notebook_editor[curScript],
				#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
				self.dict_text_ctrl[curScript] = PythonSTC(self.dict_notebook_editor[curScript], -1,
					style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
		   				# line numbers in the margin

				self.dict_text_ctrl[curScript].Bind(stc.EVT_STC_CHANGE, self.OnStcChange)
				self.dict_text_ctrl[curScript].SetEOLMode(stc.STC_EOL_CR)
				self.dict_text_ctrl[curScript].SetZoom(2)
				self.dict_text_ctrl[curScript].SetMarginType(0, stc.STC_MARGIN_NUMBER)
				self.dict_text_ctrl[curScript].SetMarginWidth(0, 22)
				self.dict_text_ctrl[curScript].StyleSetSpec(stc.STC_STYLE_LINENUMBER, "size:9,face:Arial")

				#self.dict_text_ctrl[curScript].SetSize((835,700))
				#self.dict_text_ctrl[curScript].SetMinSize((800,700))
				self.dict_text_ctrl[curScript].SetMinSize((self.GetSize()[0] - 40, self.GetSize()[1] - 150))

				# open MFQL file
				with open(self.dictMFQLScripts[curScript], 'r') as mfqlFile:
					self.dict_mfqlFile[curScript] = mfqlFile
					for line in self.dict_mfqlFile[curScript].readlines():
						self.dict_text_ctrl[curScript].AppendText(line)
				self.dict_isChangedAndNotSavedMfqlFile[curScript] = False

				# add the close button
				self.dict_button_close[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "Close")
				self.dict_button_close[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnClosePanel, self.dict_button_close[curScript])

				# add the save button
				self.dict_button_save[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "Save")
				self.dict_button_save[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnSavePanel, self.dict_button_save[curScript])

				# add the saveAs button
				self.dict_button_saveAs[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "SaveAs")
				self.dict_button_saveAs[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnSaveAsPanel, self.dict_button_saveAs[curScript])

				# add the new button
				self.dict_button_new[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "New")
				self.dict_button_new[curScript].SetMinSize((140, 34))
				self.Bind(wx.EVT_BUTTON, self.OnNewPanel, self.dict_button_new[curScript])

				# put all together with a box sizer
				#self.dict_flex_sizer[curScript] = wx.FlexGridSizer(2,1,3,3)
				self.dict_box_sizer_horizontal[curScript] = wx.BoxSizer(wx.HORIZONTAL)
				self.dict_box_sizer_vertical[curScript] = wx.BoxSizer(wx.VERTICAL)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_new[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_save[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_saveAs[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_close[curScript], 0, wx.ALL|wx.EXPAND, 5)
				self.dict_box_sizer_horizontal[curScript].Fit(self.dict_notebook_editor[curScript])
				#self.dict_flex_sizer[curScript].Add(self.dict_text_ctrl[curScript], 1, wx.ALL|wx.EXPAND|wx.GROW, 10)
				#self.dict_flex_sizer[curScript].Add(self.dict_box_sizer_horizontal[curScript], 0,
				#	wx.ALIGN_CENTER, 0)
				self.dict_box_sizer_vertical[curScript].Add(self.dict_text_ctrl[curScript], 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 10)

				self.dict_box_sizer_vertical[curScript].Add(self.dict_box_sizer_horizontal[curScript], 0,
					wx.ALIGN_CENTER|wx.ADJUST_MINSIZE, 0)

				self.dict_notebook_editor[curScript].SetSizerAndFit(self.dict_box_sizer_vertical[curScript])
				#self.dict_notebook_editor[curScript].SetSizer(self.dict_flex_sizer[curScript])

				#self.dict_notebook_editor[curScript].Fit()
				self.dict_notebook_editor[curScript].Layout()

				#self.Layout()
				#self.SetSize(self.GetSize())

		else:

			curScript = [sortedKeys[newFile]][0]

			# add a page to the notebook
			if self.dict_notebook_editor == {}:
				self.dict_notebook_editor = {curScript : wx.Panel(self.notebook_1, -1)}
			elif curScript not in self.dict_notebook_editor:
				self.dict_notebook_editor[curScript] = wx.Panel(self.notebook_1, -1)
			else:
				return None

			# add the page
			self.notebook_1.AddPage(self.dict_notebook_editor[curScript], curScript, True)

			### generate the layout ###
			# generate textCtrl window
			#self.dict_text_ctrl[curScript] = stc.StyledTextCtrl(self.dict_notebook_editor[curScript], -1, "",
			#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
			#self.dict_text_ctrl[curScript] = stc.StyledTextCtrl(self.dict_notebook_editor[curScript],
			#	style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
			self.dict_text_ctrl[curScript] = PythonSTC(self.dict_notebook_editor[curScript], -1,
				style = wx.SIMPLE_BORDER|wx.HSCROLL|wx.ALWAYS_SHOW_SB|wx.TE_MULTILINE|wx.TE_RICH)#, size = wx.Point(835, 700))
		   			# line numbers in the margin

			self.dict_text_ctrl[curScript].Bind(stc.EVT_STC_CHANGE, self.OnStcChange)
			self.dict_text_ctrl[curScript].SetEOLMode(stc.STC_EOL_CR)
			self.dict_text_ctrl[curScript].SetZoom(2)
			self.dict_text_ctrl[curScript].SetMarginType(0, stc.STC_MARGIN_NUMBER)
			self.dict_text_ctrl[curScript].SetMarginWidth(0, 22)
			self.dict_text_ctrl[curScript].StyleSetSpec(stc.STC_STYLE_LINENUMBER, "size:9,face:Arial")

			#self.dict_text_ctrl[curScript].SetSize((835,700))
			#self.dict_text_ctrl[curScript].SetMinSize((800,700))
			self.dict_text_ctrl[curScript].SetMinSize((self.GetSize()[0] - 40, self.GetSize()[1] - 150))

			# open MFQL file
			self.dict_mfqlFile[curScript] = open(self.dictMFQLScripts[curScript], 'r')
			for line in self.dict_mfqlFile[curScript].readlines():
				self.dict_text_ctrl[curScript].AppendText(line)
			self.dict_mfqlFile[curScript].close()
			self.dict_isChangedAndNotSavedMfqlFile[curScript] = False

			# add the close button
			self.dict_button_close[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "Close")
			self.dict_button_close[curScript].SetMinSize((140, 34))
			self.Bind(wx.EVT_BUTTON, self.OnClosePanel, self.dict_button_close[curScript])

			# add the save button
			self.dict_button_save[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "Save")
			self.dict_button_save[curScript].SetMinSize((140, 34))
			self.Bind(wx.EVT_BUTTON, self.OnSavePanel, self.dict_button_save[curScript])

			# add the saveAs button
			self.dict_button_saveAs[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "SaveAs")
			self.dict_button_saveAs[curScript].SetMinSize((140, 34))
			self.Bind(wx.EVT_BUTTON, self.OnSaveAsPanel, self.dict_button_saveAs[curScript])

			# add the new button
			self.dict_button_new[curScript] = wx.Button(self.dict_notebook_editor[curScript], -1, "New")
			self.dict_button_new[curScript].SetMinSize((140, 34))
			self.Bind(wx.EVT_BUTTON, self.OnNewPanel, self.dict_button_new[curScript])

			# put all together with a box sizer
			#self.dict_flex_sizer[curScript] = wx.FlexGridSizer(2,1,3,3)
			self.dict_box_sizer_horizontal[curScript] = wx.BoxSizer(wx.HORIZONTAL)
			self.dict_box_sizer_vertical[curScript] = wx.BoxSizer(wx.VERTICAL)
			self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_new[curScript], 0, wx.ALL|wx.EXPAND, 5)
			self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_save[curScript], 0, wx.ALL|wx.EXPAND, 5)
			self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_saveAs[curScript], 0, wx.ALL|wx.EXPAND, 5)
			self.dict_box_sizer_horizontal[curScript].Add(self.dict_button_close[curScript], 0, wx.ALL|wx.EXPAND, 5)
			self.dict_box_sizer_horizontal[curScript].Fit(self.dict_notebook_editor[curScript])
			#self.dict_flex_sizer[curScript].Add(self.dict_text_ctrl[curScript], 1, wx.ALL|wx.EXPAND|wx.GROW, 10)
			#self.dict_flex_sizer[curScript].Add(self.dict_box_sizer_horizontal[curScript], 0,
			#	wx.ALIGN_CENTER, 0)
			self.dict_box_sizer_vertical[curScript].Add(self.dict_text_ctrl[curScript], 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 10)

			self.dict_box_sizer_vertical[curScript].Add(self.dict_box_sizer_horizontal[curScript], 0,
				wx.ALIGN_CENTER|wx.ADJUST_MINSIZE, 0)

			self.dict_notebook_editor[curScript].SetSizerAndFit(self.dict_box_sizer_vertical[curScript])
			#self.dict_notebook_editor[curScript].SetSizer(self.dict_flex_sizer[curScript])

			#self.dict_notebook_editor[curScript].Fit()
			self.dict_notebook_editor[curScript].Layout()

			#self.Layout()
			#self.SetSize(self.GetSize())
		#	self.SetClientSize(p.GetSize())
			return None

	def OnNewFile(self, evt):

		# open directory with *.dta/*mzXML content
		dlg = wx.FileDialog(self, "Specify a MFQL file",
			style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT)
		dlg.SetWildcard("*.mfql files|*.mfql")

		if dlg.ShowModal() == wx.ID_OK:
			p = dlg.GetFilename()
			#p = dlg.GetPath().split(os.sep)[-1]
			if not re.match('.*\.mfql', p, re.IGNORECASE):
				s = p.split('.')
				if len(s) == 1:
					p += '.mfql'
				else:
					p = ''
					for i in s[:-1]:
						p = '%s.' % i
					p += 'mfql'

			self.dictMFQLScripts[p] = ''
			for i in dlg.GetPath().split(os.sep)[:-1]:
				self.dictMFQLScripts[p] += i + os.sep
			self.dictMFQLScripts[p] += p

			self.list_box_1.Set(list(self.dictMFQLScripts.keys()))
			self.list_box_1.SetSelection(list(self.dictMFQLScripts.keys()).index(p), select = True)

			f = open(self.dictMFQLScripts[p], 'w')
			f.write('')
			f.close()
			self.dict_isChangedAndNotSavedMfqlFile[p] = False
			if p in self.dict_button_save:
				self.dict_button_save[p].SetBackgroundColour((230, 224, 218, 255))

			self.OnOpenFile(None)

		pass

	def OnRemoveEntry(self, evt):

		sortedKeys = list(self.dictMFQLScripts.keys())

		for index in self.list_box_1.GetSelections():
			del self.dictMFQLScripts[sortedKeys[index]]
			self.OnClosePanel(evt, sortedKeys[index])

		#self.list_box_1.Set(sorted(self.dictMFQLScripts.keys()))
		self.list_box_1.Set(list(self.dictMFQLScripts.keys()))

	def OnRunLipidX(self, evt):

		if not self.lipidxplorer:
			self.OnStartImport(evt)
			return None

		progressMax = 1

		if not self.text_ctrl_MasterScanSection.IsEmpty():
			# = 1
			progressMax += 1


		# generate one big *mfql script, since windows has a restriction on length of command line
		if len(list(self.dictMFQLScripts.keys())) > 0:
			for k in list(self.dictMFQLScripts.keys()):
				progressMax += 1

		# do a syntax check. The purpose is actually to count the queries. This is nessecary if there
		# should be more than one query per file.
#		try:
#			numQueries = syntaxCheck(self.dictMFQLScripts, masterScan)
#		except SyntaxErrorException:
#			self.handleSyntaxErrorException()
#			return None
#		except Exception:
#			self.handleException()
#			return None

		if self.checkBox_OptionsSection_isocorrect_ms.IsChecked():
			progressMax += 1

		if self.checkBox_OptionsSection_isocorrect_msms.IsChecked():
			progressMax += 1

		if self.checkBox_OptionsSection_complement_sc.IsChecked():
			progressMax += 1

		self.button_RunLipidX.Disable()
		self.isRunning = True

		if not self.debugOpen:
			self.OnMenuDebugWin(None)

		self.debug.progressDialog = wx.ProgressDialog("Processing spectra", "Finished, if the bar is filled completely.",
				progressMax, style = wx.PD_CAN_ABORT)

		# get the options from GUI settings
		project = self.readOptions()
		#project = Options()

		try:

			## test if all options are correct
			project.testOptionsRun()

			# change them into the right format
			project.formatOptions()

			# get options
			options = project.getOptions()

			# put the dump file for dumping without importing
			self.filePath_Dump = options['dumpMasterScanFile']

			# give queues to the Worker class for threadsave data handling
			requestQ = queue.Queue()
			resultQ = queue.Queue()

			# thread
			worker = Worker(self, requestQ, resultQ)

			### start identification ###
			worker.beginThread(startMFQL, queries = self.dictMFQLScripts, parent = self, options = options)

		except LipidXException:

			#frame.handleLipidXException()
			try:
				self.debug.progressDialog.Destroy()
			except:
				pass

			evt = wxStdOut(text = '')#v.value)
			if not wx.GetApp().frame.debugOpen:
				wx.GetApp().frame.OnMenuDebugWin(None)
			wx.PostEvent(wx.GetApp().frame, evt)

			(excName, excArgs, excTb, exc) = formatExceptionInfo()
			dlg = wx.MessageDialog(wx.GetApp().frame,"%s" % (exc), "ERROR", wx.OK|wx.ICON_ERROR)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()

			self.button_StartImport.Enable()
			self.button_RunLipidX.Enable()
			self.isRunning = False
			return None

		except ImportException:

			evt = wxStdOut(text = '')#v.value)
			if not wx.GetApp().frame.debugOpen:
				wx.GetApp().frame.OnMenuDebugWin(None)
			wx.PostEvent(wx.GetApp().frame, evt)

			(excName, excArgs, excTb, exc) = formatExceptionInfo()
			dlg = wx.MessageDialog(wx.GetApp().frame,"%s" % (exc), "ERROR", wx.OK|wx.ICON_ERROR)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()

			self.button_StartImport.Enable()
			self.isRunning = False
			return None

		except Exception:

			try:
				self.debug.progressDialog.Destroy()
			except:
				pass

			# hijack the exception
			traceback.print_tb(sys.exc_info()[2])
			evt = wxStdOut(text = '')
			if not wx.GetApp().frame.debugOpen:
				wx.GetApp().frame.OnMenuDebugWin(None)
			wx.PostEvent(wx.GetApp().frame, evt)
			(excName, excArgs, excTb, exc) = formatExceptionInfo()
			print(excName, exc)

			text = "The following error occured:\n\n"
			text += "** %s : %s **\n\n\n" % (excName, exc)
			text += "If you think that this a bug in the software you can send\na bug report to the us.\n"
			text += "Do you want to generate the bug report?"
			dlg = wx.MessageDialog(wx.GetApp().frame, text, "ERROR", style=wx.YES_NO|wx.CANCEL|wx.NO_DEFAULT)
			#dlg = MyErrorDialog(wx.GetApp().frame, -1, "ERROR", 'bla')
			r = dlg.ShowModal()
			if r == wx.ID_YES:

				dlg = wx.MessageDialog(wx.GetApp().frame, "Please store the bugReport.html and send it to lifs-support@isas.de", \
						"ERROR", style=wx.OK)
				if dlg.ShowModal() == wx.ID_OK:
					dlg.Destroy()

				strBugReport = """
				<html><head></head><body>
				<h3>%s</h3>
				<h3>%s</h3>
				<h3>%s</h3>
				<p><tt>
				""" % (sys.version, excName, exc)
				for i in excTb:
					strBugReport += "%s<br>" % i
				strBugReport += "</tt></p><br>"
				strBugReport += "%s" % wx.GetApp().frame.genBugReportHTML()
				strBugReport += "</body></html>"

				dlg = wx.FileDialog(wx.GetApp().frame, "Specify the site for the bugReport.html",
					style=wx.DD_DEFAULT_STYLE|wx.FD_SAVE|wx.FD_OVERWRITE_PROMPT,
					defaultFile = "bugReport.html")
				dlg.SetWildcard("*.html files|*.html")

				if dlg.ShowModal() == wx.ID_OK:
					d = dlg.GetPath()
					f = open(d, 'w')
					f.write(strBugReport)
					f.close()
					print(d)

			else:
				dlg.Destroy()

			self.button_RunLipidX.Enable()
			self.button_StartImport.Enable()
			self.isRunning = False
			return None

	def OnMassToSumComposition(self, evt):

		if self.text_ctrl_mstools_InputSection_mz.IsEmpty():
			dlg = wx.MessageDialog(self, "You have to give a m/z value!", "Attention", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None
		else:
			mass = self.text_ctrl_mstools_InputSection_mz.GetValue()

		if self.text_ctrl_mstools_InputSection_sumComposition.IsEmpty():
			dlg = wx.MessageDialog(self, "You have to give a sf-constraint!", "Attention", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None
		else:
			sf_constraint = self.text_ctrl_mstools_InputSection_sumComposition.GetValue()

		if self.text_ctrl_mstools_InputSection_doubleBond_1.IsEmpty():
			dlg = wx.MessageDialog(self, "You have to give a lower double bond border!", "Attention", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None
		else:
			lowerDB = self.text_ctrl_mstools_InputSection_doubleBond_1.GetValue()

		if self.text_ctrl_mstools_InputSection_doubleBond_2.IsEmpty():
			dlg = wx.MessageDialog(self, "You have to give a higher double bond border!", "Attention", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None
		else:
			higherDB = self.text_ctrl_mstools_InputSection_doubleBond_2.GetValue()

		if self.text_ctrl_mstools_InputSection_charge.IsEmpty():
			charge = ' chg(0)'
		else:
			charge = ' chg(%s)' % self.text_ctrl_mstools_InputSection_charge.GetValue()

		if self.text_ctrl_mstools_InputSection_accuracy.IsEmpty():
			accuracy = '5'
		else:
			accuracy = self.text_ctrl_mstools_InputSection_accuracy.GetValue()

		strDB = ' db(%.1f,%.1f)' % (float(lowerDB), float(higherDB))

		t = float(mass) / ((float(mass) / 100000) * float(accuracy))

		elscp = parseElemSeq(sf_constraint + strDB + charge)
		rslt = calcSFbyMass(float(mass), elscp, t, False)

		if rslt == []:
			outtext = "No sum composition found for %s with m/z %.4f" % (elscp, float(mass))

		for i in rslt:
			outtext = "m/z: %.4f sc: %s error: %.4f ppm" % (
					i.getWeight(),
					i,
					(float(mass) - i.getWeight()))


		self.text_ctrl_mstools_OutputSection.SetValue(outtext)


	def OnSumCompositionToMass(self, evt):

		if playSound:
			wx.Sound('../pics/PressButton.wav').Play(flags = wx.SOUND_ASYNC)

		strAccuracy = ''

		if self.text_ctrl_mstools_InputSection_sumComposition.IsEmpty() or  self.text_ctrl_mstools_InputSection_doubleBond_1.IsEmpty() or self.text_ctrl_mstools_InputSection_doubleBond_2.IsEmpty():
			dlg = wx.MessageDialog(self, "You have to give a sum composition and double bond values", "Attention", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None
		else:
			sf_constraint = self.text_ctrl_mstools_InputSection_sumComposition.GetValue()

		if self.text_ctrl_mstools_InputSection_charge.IsEmpty():
			charge = ' chg(0)'
		else:
			charge = ' chg(%s)' % self.text_ctrl_mstools_InputSection_charge.GetValue()

		elemSeq = parseElemSeq(sf_constraint + charge)



		max = 1

		if playSound:
			sound = wx.Sound('../pics/Wait2.wav')
			sound.Play(flags = wx.SOUND_LOOP|wx.SOUND_ASYNC)

		outtext = "For %s:\nExact mass is %.6f; Double Bonds are: %.1f; charge is: %d" % (elemSeq, elemSeq.getWeight(), elemSeq.get_DB(), elemSeq.charge)
		self.text_ctrl_mstools_OutputSection.SetValue(outtext)

		if playSound:
			sound.Stop()
		pass

	def OnCalcIsotopes(self, evt):


		if self.text_ctrl_mstools_Isotopes_precursor.IsEmpty():
			dlg = wx.MessageDialog(self, "You have to give a sum composition!", "Attention", wx.OK|wx.ICON_HAND)
			if dlg.ShowModal() == wx.ID_OK:
				dlg.Destroy()
				return None
		else:
			sumComp = parseElemSeq(self.text_ctrl_mstools_Isotopes_precursor.GetValue())

		if self.text_ctrl_mstools_Isotopes_fragment.IsEmpty():
			sumCompFrg = None
		else:
			sumCompFrg = parseElemSeq(self.text_ctrl_mstools_Isotopes_fragment.GetValue())

		if sumCompFrg:
			# is a neutral loss
			if self.checkBox_mstools_Isotopes_nl.GetValue():
				monoisotopic = 1.0
				sumCompNL = sumComp - sumCompFrg
				(Mtx, monoistopic) = isotopicValuesInter(sumCompNL['C'], sumCompNL['H'], sumCompNL['O'], \
						sumCompNL['N'], sumCompNL['P'], sumCompNL['P'], sumCompFrg['C'], sumCompFrg['H'], \
						sumCompNL['O'], sumCompFrg['N'], sumCompFrg['S'], sumCompFrg['P'])
				str = "F:%s; N:%s\n ------------- \n" % (repr(sumCompNL), repr(sumCompFrg))
				str += "     F0N0: %.4f\n" % Mtx[0][0]
				str += "     F0N1: %.4f, F1N0: %.4f\n" % (Mtx[0][1], Mtx[1][0])
				str += "     F0N2: %.4f, F1N1: %.4f, F2N0: %.4f\n" % (Mtx[0][2], Mtx[1][1], Mtx[2][0])
				str += "     F0N3: %.4f, F1N2: %.4f, F2N1: %.4f, F3N0: %.4f\n" % (Mtx[0][3], Mtx[1][2], Mtx[2][1], Mtx[3][0])
				str += "     F0N4: %.4f, F1N3: %.4f, F2N2: %.4f, F3N1: %.4f, F4N0: %.4f\n" % (Mtx[0][4], Mtx[1][3], Mtx[2][2], Mtx[3][1], Mtx[4][0])

				self.text_ctrl_mstools_Isotopes_output.SetValue(str)
				pass
			# is a fragment
			else:
				monoisotopic = 1.0
				sumCompNL = sumComp - sumCompFrg
				(Mtx, monoisotopic) = isotopicValuesInter(sumCompFrg['C'], sumCompFrg['H'], sumCompFrg['O'], \
						sumCompFrg['N'], sumCompFrg['S'], sumCompFrg['P'], sumCompNL['C'], sumCompNL['H'], \
						sumCompNL['O'], sumCompNL['N'], sumCompNL['S'], sumCompNL['P'])

				str = "F:%s; N:%s\n ------------- \n" % (repr(sumCompFrg), repr(sumCompNL))
				str += "     F0N0: %.4f\n" % Mtx[0][0]
				str += "     F0N1: %.4f, F1N0: %.4f\n" % (Mtx[0][1], Mtx[1][0])
				str += "     F0N2: %.4f, F1N1: %.4f, F2N0: %.4f\n" % (Mtx[0][2], Mtx[1][1], Mtx[2][0])
				str += "     F0N3: %.4f, F1N2: %.4f, F2N1: %.4f, F3N0: %.4f\n" % (Mtx[0][3], Mtx[1][2], Mtx[2][1], Mtx[3][0])
				str += "     F0N4: %.4f, F1N3: %.4f, F2N2: %.4f, F3N1: %.4f, F4N0: %.4f\n" % (Mtx[0][4], Mtx[1][3], Mtx[2][2], Mtx[3][1], Mtx[4][0])

				self.text_ctrl_mstools_Isotopes_output.SetValue(str)
				pass
		else:

			(mz, intens, monoisotopic) = isotopicValues(sumComp['C'], sumComp['H'], sumComp['O'], \
						sumComp['N'], sumComp['S'], sumComp['P'])

			str = '\nMonoisotopic m/z: %.4f \n' % intens[0] * monoisotopic
			str += '    m/z    abundance  \n'
			for index in range(len(mz)):
				#str += "%.4f %.4f\n" % (mz[index], intens[index])
				str += "%.4f   %.4f\n" % (sumComp.getWeight() + 1.00055 * index, intens[index] * monoisotopic)
			self.text_ctrl_mstools_Isotopes_output.SetValue(str)

		pass

	def collectSettings(self, setting):

		# some options
		self.opts = {}
		self.optsImport = {}
		self.optsRun = {}

		try:
			if self.confParse.has_option(setting, "MSminOccupation"):
				self.optsImport['MSminOccupation'] = self.confParse.get(setting, "MSminOccupation")
			else:
				self.optsImport['MSminOccupation'] = ''

			if self.confParse.has_option(setting, "MSMSminOccupation"):
				self.optsImport['MSMSminOccupation'] = self.confParse.get(setting, "MSMSminOccupation")
			else:
				self.optsImport['MSMSminOccupation'] = ''

			if self.confParse.has_option(setting, "MSthreshold"):
				self.optsImport['MSthreshold'] = self.confParse.get(setting, "MSthreshold")
			else:
				self.optsImport['MSthreshold'] = ''

			if self.confParse.has_option(setting, "MSthresholdType"):
				self.optsImport['MSthresholdType'] = self.confParse.get(setting, "MSthresholdType")
			else:
				self.optsImport['MSthresholdType'] = "absolute"

			if self.confParse.has_option(setting, "MSMSthresholdType"):
				self.optsImport['MSMSthresholdType'] = self.confParse.get(setting, "MSMSthresholdType")
			else:
				self.optsImport['MSMSthresholdType'] = "absolute"

			if self.confParse.has_option(setting, "timerange"):
				strTimerange = self.confParse.get(setting, "timerange")
				m = re.match('\(\s*(\d+)\s*,\s*(\d+)\s*\)', strTimerange)
				self.optsImport['timerange'] = (m.group(1), m.group(2))
			else:
				self.optsImport['timerange'] = None

			if self.confParse.has_option(setting, "MSmassrange"):
				strMassrange = self.confParse.get(setting, "MSmassrange")
				m = re.match('\(\s*(\d+)\s*,\s*(\d+)\s*\)', strMassrange)
				self.optsImport['MSmassrange'] = (m.group(1), m.group(2))
			else:
				self.optsImport['MSmassrange'] = None

			if self.confParse.has_option(setting, "MSMSmassrange"):
				strMassrange = self.confParse.get(setting, "MSMSmassrange")
				m = re.match('\(\s*(\d+)\s*,\s*(\d+)\s*\)', strMassrange)
				self.optsImport['MSMSmassrange'] = (m.group(1), m.group(2))
			else:
				self.optsImport['MSMSmassrange'] = None

			if self.confParse.has_option(setting, "MSresolution"):
				self.optsImport['MSresolution'] = self.confParse.get(setting, "MSresolution")
			else:
				self.optsImport['MSresolution'] = ''

			if self.confParse.has_option(setting, "MSMSresolution"):
				self.optsImport['MSMSresolution'] = self.confParse.get(setting, "MSMSresolution")
			else:
				self.optsImport['MSMSresolution'] = ''

			if self.confParse.has_option(setting, "MSresolutionDelta"):
				self.optsImport['MSresolutionDelta'] = self.confParse.get(setting, "MSresolutionDelta")
			else:
				self.optsImport['MSresolutionDelta'] = ''

			if self.confParse.has_option(setting, "MSMSresolutionDelta"):
				self.optsImport['MSMSresolutionDelta'] = self.confParse.get(setting, "MSMSresolutionDelta")
			else:
				self.optsImport['MSMSresolutionDelta'] = ''

			if self.confParse.has_option(setting, "MScalibration"):
				self.optsImport['MScalibration'] = self.confParse.get(setting, "MScalibration")
			else:
				self.optsImport['MScalibration'] = ''

			if self.confParse.has_option(setting, "MSfilter"):
				self.optsImport['MSfilter'] = self.confParse.get(setting, "MSfilter")
			else:
				self.optsImport['MSfilter'] = ''

			if self.confParse.has_option(setting, "MSMScalibration"):
				self.optsImport['MSMScalibration'] = self.confParse.get(setting, "MSMScalibration")
			else:
				self.optsImport['MSMScalibration'] = ''

			if self.confParse.has_option(setting, "MSMSfilter"):
				self.optsImport['MSMSfilter'] = self.confParse.get(setting, "MSMSfilter")
			else:
				self.optsImport['MSMSfilter'] = ''
			if self.confParse.has_option(setting, "MStolerance"):
				str = self.confParse.get(setting, "MStolerance")
				#if re.match('(.*)!(\s(ppm|Da))', str):
				if re.match('(\d+|\d+\.\d+)$', str):
					m = re.match('(\d+|\d+\.\d+)', str)
					self.optsImport['MStolernace'] = '%s %s' % (m.group(1), 'ppm')
				elif re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str):
					m = re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str)
					self.optsImport['MStolernace'] = '%s %s' % (m.group(1), m.group(3))
				else:
					dlgError = wx.MessageDialog(self, "Cannot read MS Tolerance Value. Setting it to zero.",
						"Error", wx.OK)
					self.optsImport['MStolerance'] = '0'
			else:
				self.optsImport['MStolerance'] = '0'

			if self.confParse.has_option(setting, "MSMStolerance"):
				str = self.confParse.get(setting, "MSMStolerance")
				#if re.match('(.*)!(\s(ppm|Da))', str):
				if re.match('(\d+|\d+\.\d+)$', str):
					m = re.match('(\d+|\d+\.\d+)', str)
					self.optsImport['MSMStolerance'] = '%s %s' % (m.group(1), 'ppm')
				elif re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str):
					m = re.match('(\d+|\d+\.\d+)(\s)*(ppm|Da)', str)
					self.optsImport['MSMStolerance'] = '%s %s' % (m.group(1), m.group(3))
				else:
					dlgError = wx.MessageDialog(self, "Cannot read MS Tolerance Value. Setting it to zero.",
						"Error", wx.OK)
					self.optsImport['MSMStolerance'] = '0'
			else:
				self.optsImport['MSMStolerance'] = '0'

			if self.confParse.has_option(setting, "selectionWindow"):
				self.optsImport['selectionWindow'] = self.confParse.get(setting, "selectionWindow")
			else:
				self.optsImport['selectionWindow'] = ''

			if self.confParse.has_option(setting, "precursorMassShift"):
				self.optsImport['precursorMassShift'] = self.confParse.get(setting, "precursorMassShift")
			else:
				self.optsImport['precursorMassShift'] = ''

			if self.confParse.has_option(setting, "precursorMassShiftOrbi"):
				self.optsImport['precursorMassShiftOrbi'] = self.confParse.get(setting, "precursorMassShiftOrbi")
			else:
				self.optsImport['precursorMassShiftOrbi'] = ''

			for option in self.optsImport:
				self.optsRun[option] = self.optsImport[option]
		except configparser.NoSectionError:
			pass

	def getMasterScanInfo(self):

		# Run Panel
		masterScan = self.text_ctrl_MasterScanSection.GetValue()

		if masterScan != '':
			try:
				masterscan = loadSC(masterScan)
			except:
				return " ... error loading the MasterScan file ..."
		else:
			return ""

		MSthresholdType = ""
		MSMSthresholdType = ""
		if masterscan.options['MSthresholdType'] == 'relative': MSthresholdType = "%"
		if masterscan.options['MSMSthresholdType'] == 'relative': MSMSthresholdType = "%"

		strOut = ""
		#strOut += "\nMasterScan: ," + self.name
		strOut += "\n<h4>Loaded MasterScan</h4>\n"
		strOut += "<table>"
		strOut += "<tr><td>time range:</td><td>(%s, %s)</td></tr>\n" % (repr(masterscan.options['timerange'][0]), repr(masterscan.options['timerange'][1]))
		strOut += "<tr><td>MS m/z range:</td><td>(%s, %s)</td></tr>\n" % (repr(masterscan.options['MSmassrange'][0]), repr(masterscan.options['MSmassrange'][1]))
		strOut += "<tr><td>MS/MS m/z range:</td><td>(%s, %s)</td></tr>\n" % (repr(masterscan.options['MSMSmassrange'][0]), repr(masterscan.options['MSMSmassrange'][1]))
		strOut += "<tr><td>MS tolerance:</td><td>+/- %s</td></tr>\n" % (repr(masterscan.options['MStolerance']))
		strOut += "<tr><td>MS/MS tolerance:</td><td>+/- %s</td></tr>\n" % (repr(masterscan.options['MSMStolerance']))
		strOut += "<tr><td>MS resolution:</td><td>%s</td></tr>\n" % (repr(masterscan.options['MSresolution']))
		strOut += "<tr><td>MS/MS resolution:</td><td>%s</td></tr>\n" % (repr(masterscan.options['MSMSresolution']))
		strOut += "<tr><td>MS resolution gradient:</td><td>%s</td></tr>\n" % (repr(masterscan.options['MSminOccupation']))
		strOut += "<tr><td>MS/MS resolution gradient:</td><td>%s</td></tr>\n" % (repr(masterscan.options['MSMSminOccupation']))
		strOut += "<tr><td>MS threshold:</td><td>%s%s</td></tr>\n" % (repr(masterscan.options['MSthreshold']), MSthresholdType)
		strOut += "<tr><td>MS/MS threshold:</td><td>%s%s</td></tr>\n" % (repr(masterscan.options['MSMSthreshold']), MSMSthresholdType)
		strOut += "<tr><td>MS minimum occupation:</td><td>+/- %s</td></tr>\n" % (repr(masterscan.options['MSminOccupation']))
		strOut += "<tr><td>MS/MS minimum occupation:</td><td>+/- %s</td></tr>\n" % (repr(masterscan.options['MSMSminOccupation']))
		strOut += "<tr><td>MS frequency filter:</td><td>+/- %s</td></tr>\n" % (repr(masterscan.options['MSfilter']))
		strOut += "<tr><td>MS/MS frequency filter:</td><td>+/- %s</td></tr>\n" % (repr(masterscan.options['MSMSfilter']))
		strOut += "</table>\n\n"

		return strOut

	def genBugReportHTML(self, options = {}):

		if options == {}:
			self.collectSettings(self.currentConfiguration)
			#options = self.optsRun + self.optsImport
			options = self.optsRun

		#strMasterScan = self.getMasterScanInfo()
		#self.optsRun['mfqlFiles'] = self.dictMFQLScripts

		strBugReport = "<h3>Options</h3>\n"

		strBugReport += "<table>\n"
		for k in list(options.keys()):
			strBugReport += "<tr><td>%s:</td><td>%s</td></tr>\n" % (k, options[k])
		strBugReport += "</table><br>\n"

		#strBugReport += "<h3>MFQL Panel</h3>\n"

		#strBugReport += strMasterScan
		#strBugReport += "<br><h4>Panel Settings</h4>"

		#strBugReport += "<table>\n"
		#for k in self.optsRun.keys():
		#	if k != 'mfqlFiles':
		#		strBugReport += "<tr><td>%s:</td><td>%s</td></tr>\n" % (k, self.optsRun[k])
		#strBugReport += "</table>\n"

		strBugReport += "<h3>MFQL queries</h3><tt>\n"
		for i in self.dictMFQLScripts:
			txt = ''
			f = open(self.dictMFQLScripts[i], 'r')
			txt += " \n\n>> filename: %s >>\n\n" % i
			txt += f.read()
			strBugReport += txt.replace('\n', '<br>')
			f.close()
		strBugReport += "</tt>"

		#strBugReport += self.optsRun['mfqlFiles']

		return strBugReport

	def genBugReport(self):

		self.collectSettings(self.currentConfiguration)
		self.optsRun['mfqlFiles'] = self.dictMFQLScripts

		strBugReport = "\nImport Panel\n\n"

		for k in list(self.optsImport.keys()):
			strBugReport += "%s:\t\t%s\n" % (k, self.optsImport[k])

		strBugReport += "\n\nMFQL Panel\n\n"
		for k in list(self.optsRun.keys()):
			if k != 'mfqlFiles':
				strBugReport += "%s:\t\t%s\n" % (k, self.optsRun[k])

		strBugReport += "\n\nMFQL queries\n\n"
		for i in self.optsRun['mfqlFiles']:
			f = open(self.optsRun['mfqlFiles'][i], 'r')
			strBugReport += f.read()
			f.close()
		#strBugReport += self.optsRun['mfqlFiles']

		return strBugReport

	def __set_properties(self):

		button1_w = 140
		button1_h = 24
		button1_small_w = button1_w / 2 - 5
		button1_small_h = 24

		button2_w = 450
		button2_h = 34

		textCtrl_small_w = 90
		textCtrl_small_h = 22
		textCtrl_big_w = 440
		textCtrl_big_h = 22

		# begin wxGlade: LpdxFrame.__set_properties
		if self.lipidxplorer:
			self.SetTitle("LipidXplorer Version %s" % self.version)
		else:
			self.SetTitle("LipOXplorer Version %s" % self.version)

		self.SetMinSize((720, 660))
		self.SetSize((1000, 730))

		self.list_box_1.SetMinSize((textCtrl_big_w, 211))

		self.text_ctrl_mstools_InputSection_mz.SetMinSize((textCtrl_small_w - 20, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_sumComposition.SetMinSize((textCtrl_big_w - 120, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_doubleBond_1.SetMinSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_doubleBond_2.SetMinSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_charge.SetMinSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_accuracy.SetMinSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_OutputSection.SetMinSize((660, textCtrl_small_h * 6))

		self.text_ctrl_mstools_InputSection_mz.SetMaxSize((textCtrl_small_w - 20, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_sumComposition.SetMaxSize((textCtrl_big_w - 120, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_doubleBond_1.SetMaxSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_doubleBond_2.SetMaxSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_charge.SetMaxSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_InputSection_accuracy.SetMaxSize((textCtrl_small_w - 60, textCtrl_small_h))
		self.text_ctrl_mstools_OutputSection.SetMaxSize((660, textCtrl_small_h * 6))

		self.button_AddMFQL.SetMinSize((button1_w, button1_h))
		self.button_RemoveEntry.SetMinSize((button1_w, button1_h))
		self.button_OpenFile.SetMinSize((button1_w, button1_h))
		self.button_NewFile.SetMinSize((button1_w, button1_h))
		self.button_AddDir.SetMinSize((button1_w, button1_h))

		self.button_Browse_MasterScan.SetMinSize((button1_w, button1_h))
		self.button_Browse_OutputSection.SetMinSize((button1_small_w, button1_h))
		self.button_Open_OutputSection.SetMinSize((button1_small_w, button1_h))
		#self.button_Browse_DumpSection.SetMinSize((button1_w, button1_h))
		self.button_Open_DumpSection.SetMinSize((button1_w, button1_h))
		self.button_RunLipidX.SetMinSize((button2_w, button2_h))
		self.button_StartImport.SetMinSize((button2_w, button2_h))
		self.button_Browse_ImportDataSection.SetMinSize((button1_small_w, button1_h))
		self.button_Browse_OutputMasterScanSection.SetMinSize((button1_w, button1_h))
		self.button_Browse_LoadIniSection.SetMinSize((button1_w, button1_h))
		self.label_SettingsSection_occupationThr_groups.SetMinSize((button1_w, button1_h))
		#self.button_SelectSettingSection_edit.SetMinSize((button1_w, button1_h))
		#self.button_SelectSettingSection_new.SetMinSize((button1_w, button1_h))
		#self.button_SelectSettingSection_remove.SetMinSize((button1_w, button1_h))

		self.text_ctrl_OutputSection.SetMinSize((textCtrl_big_w, textCtrl_big_h))
		self.text_ctrl_RunOptions_MS.SetMinSize((button1_small_w, button1_h))
		self.text_ctrl_RunOptions_MSMS.SetMinSize((button1_small_w, button1_h))
		self.text_ctrl_MasterScanSection.SetMinSize((textCtrl_big_w, textCtrl_big_h))
		self.text_ctrl_OutputMasterScanSection.SetMinSize((textCtrl_big_w, textCtrl_big_h))
		self.text_ctrl_ImportDataSection.SetMinSize((textCtrl_big_w / 2 + 200, textCtrl_big_h))
		self.text_ctrl_LoadIniSection.SetMinSize((textCtrl_big_w, textCtrl_big_h))

		self.text_ctrl_SettingsSection_precursorMassShift.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_precursorMassShift.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_precursorMassShiftOrbi.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_precursorMassShiftOrbi.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_selectionWindow.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_selectionWindow.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_timerange1.SetMinSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_timerange2.SetMinSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_timerange1.SetMaxSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_timerange2.SetMaxSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_ms1.SetMinSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_ms2.SetMinSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_ms1.SetMaxSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_ms2.SetMaxSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_msms1.SetMinSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_msms2.SetMinSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_msms1.SetMaxSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_massrange_msms2.SetMaxSize((textCtrl_small_w / 2 - 5, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resolution_ms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resolution_ms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resolution_msms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resolution_msms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_tolerance_ms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_tolerance_ms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_tolerance_msms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_tolerance_msms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_threshold_ms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_threshold_ms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_threshold_msms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_threshold_msms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_occupationThr_ms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_occupationThr_ms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_occupationThr_msms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_occupationThr_msms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resDelta_ms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resDelta_ms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resDelta_msms.SetMinSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_resDelta_msms.SetMaxSize((textCtrl_small_w, textCtrl_small_h))
		self.text_ctrl_SettingsSection_calibration_ms.SetMinSize((textCtrl_small_w * 2, textCtrl_small_h))
		self.text_ctrl_SettingsSection_calibration_ms.SetMaxSize((textCtrl_small_w * 2, textCtrl_small_h))
		self.text_ctrl_SettingsSection_calibration_msms.SetMinSize((textCtrl_small_w * 2, textCtrl_small_h))
		self.text_ctrl_SettingsSection_calibration_msms.SetMaxSize((textCtrl_small_w * 2, textCtrl_small_h))

		self.text_ctrl_SettingsSection_filter_ms.SetMinSize((textCtrl_small_w * 2, textCtrl_small_h))
		self.text_ctrl_SettingsSection_filter_ms.SetMaxSize((textCtrl_small_w * 2, textCtrl_small_h))
		self.text_ctrl_SettingsSection_filter_msms.SetMinSize((textCtrl_small_w * 2, textCtrl_small_h))
		self.text_ctrl_SettingsSection_filter_msms.SetMaxSize((textCtrl_small_w * 2, textCtrl_small_h))

		self.text_ctrl_mstools_OutputSection.SetMinSize((textCtrl_big_w, textCtrl_big_h * 3))
		self.text_ctrl_mstools_OutputSection.SetMaxSize((textCtrl_big_w * 2, textCtrl_big_h * 3))
		self.text_ctrl_mstools_Isotopes_output.SetMinSize((textCtrl_big_w, textCtrl_big_h * 6))
		self.text_ctrl_mstools_Isotopes_output.SetMaxSize((textCtrl_big_w * 2, textCtrl_big_h * 6))

		self.notebook_1_pane_5.SetMinSize((835, 800))
		self.notebook_1_pane_4.SetMinSize((835, 800))
		self.notebook_1_pane_3.SetMinSize((835, 800))
		self.notebook_1_pane_2.SetMinSize((835, 800))
		# end wxGlade

	def __do_layout(self):

		border_labels = 4

		### TOOL pane ###
		sizer_toolPane = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane.Add(self.label_mstools_InputSection, 0, wx.ALIGN_LEFT|wx.ALL, 10)
		#sizer_toolPane.Add((10,10))
		sizer_toolPane_3 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_3.Add(self.label_mstools_InputSection_mz, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_3.Add(self.text_ctrl_mstools_InputSection_mz, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_4.Add(self.label_mstools_InputSection_sumComposition, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_4.Add(self.text_ctrl_mstools_InputSection_sumComposition, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_8 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_8.Add(self.label_mstools_InputSection_doubleBond_1, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_8.Add(self.text_ctrl_mstools_InputSection_doubleBond_1, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_9 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_9.Add(self.label_mstools_InputSection_doubleBond_2, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_9.Add(self.text_ctrl_mstools_InputSection_doubleBond_2, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_6 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_6.Add(self.label_mstools_InputSection_charge, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_6.Add(self.text_ctrl_mstools_InputSection_charge, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_5 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_5.Add(self.label_mstools_InputSection_accuracy, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_5.Add(self.text_ctrl_mstools_InputSection_accuracy, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_7 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_7.Add(self.label_mstools_InputSection_accuracy_blank, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_7.Add(self.label_mstools_InputSection_accuracy_ppm, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_toolPane_2.Add(sizer_toolPane_3)
		sizer_toolPane_2.Add(sizer_toolPane_4)
		sizer_toolPane_2.Add(sizer_toolPane_8)
		sizer_toolPane_2.Add(sizer_toolPane_9)
		sizer_toolPane_2.Add(sizer_toolPane_6)
		sizer_toolPane_2.Add(sizer_toolPane_5)
		sizer_toolPane_2.Add(sizer_toolPane_7)
		sizer_toolPane.Add(sizer_toolPane_2, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
		sizer_toolPane_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_toolPane_1.Add(self.button_massToSumComposition, 0, wx.ALIGN_LEFT|wx.ALL, 10)
		sizer_toolPane_1.Add(self.button_sumCompositionToMass, 0, wx.ALIGN_LEFT|wx.ALL, 10)
		sizer_toolPane.Add(sizer_toolPane_1, 0, wx.ALIGN_LEFT, 10)
		sizer_toolPane.Add(self.text_ctrl_mstools_OutputSection, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.LEFT|wx.RIGHT|wx.EXPAND, 20)

		# second half
		sizer_toolPane.Add(self.label_mstools_Isotopes, 0, wx.ALIGN_LEFT|wx.ALL, 10)
		sizer_toolPane_10 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_10.Add(self.label_mstools_Isotopes_precursor, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_10.Add(self.text_ctrl_mstools_Isotopes_precursor, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_11 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_11.Add(self.label_mstools_Isotopes_fragment, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_11.Add(self.text_ctrl_mstools_Isotopes_fragment, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_12 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_toolPane_12.Add(sizer_toolPane_10)
		sizer_toolPane_12.Add(sizer_toolPane_11)
		sizer_toolPane_14 = wx.BoxSizer(wx.VERTICAL)
		sizer_toolPane_14.Add(self.label_mstools_Isotopes_blank, 0, wx.ALIGN_LEFT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_14.Add(self.checkBox_mstools_Isotopes_nl, 0, wx.ALIGN_RIGHT|wx.EXPAND|wx.ALL, 5)
		sizer_toolPane_12.Add(sizer_toolPane_14)
		sizer_toolPane.Add(sizer_toolPane_12, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
		sizer_toolPane_13 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_toolPane_13.Add(self.button_Isotopes, 0, wx.ALIGN_LEFT|wx.ALL, 10)
		sizer_toolPane.Add(sizer_toolPane_13)
		sizer_toolPane.Add(self.text_ctrl_mstools_Isotopes_output, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.LEFT|wx.RIGHT|wx.EXPAND, 20)

		self.notebook_1_pane_4.SetSizer(sizer_toolPane)

		### RUN pane ###
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_1_RunCard = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_1_RunCard_0 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_1_RunCard_0.Add(grid_sizer_1_RunCard, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)

		# mfql Queries
		grid_sizer_1_RunCard.Add((10,10))
		grid_sizer_1_RunCard.Add(self.label_mfqlQueriesSection, 0, wx.LEFT | wx.EXPAND, border_labels)
		grid_sizer_5_listBox = wx.GridBagSizer(7,1)
		grid_sizer_5_listBox.Add(self.list_box_1, (0,0), (6,1) , wx.TOP|wx.LEFT|wx.RIGHT|wx.EXPAND, 10)
		grid_sizer_5_listBox.Add((20, 55), (0,1), wx.DefaultSpan, wx.ALL, 0)
		#grid_sizer_5_listBox.Add((80, 10), (1,1), wx.DefaultSpan, wx.ALL, 0)
		#grid_sizer_5_listBox.Add((80, 10), (2,1), wx.DefaultSpan, wx.ALL, 0)
		grid_sizer_5_listBox.Add(self.button_AddMFQL, (1,1), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_5_listBox.Add(self.button_AddDir, (2,1), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_5_listBox.Add(self.button_OpenFile, (3,1), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_5_listBox.Add(self.button_NewFile, (4,1), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_5_listBox.Add(self.button_RemoveEntry, (5,1), wx.DefaultSpan, wx.ALL, 2)
		grid_sizer_5_listBox.AddGrowableCol(0)
		grid_sizer_5_listBox.AddGrowableRow(0)
		grid_sizer_6 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_6.Add((220, 10), 0, wx.ALL, 0)
		grid_sizer_6.Add(self.button_AddMFQL, 0, wx.ALL, 0)
		grid_sizer_6.Add(self.button_AddDir, 0, wx.ALL, 0)
		grid_sizer_6.Add(self.button_OpenFile, 0, wx.ALL, 0)
		grid_sizer_6.Add(self.button_NewFile, 0, wx.ALL, 0)
		grid_sizer_6.Add(self.button_RemoveEntry, 0, wx.ALL, 0)
		grid_sizer_1_RunCard.Add(grid_sizer_5_listBox, 1, 0, 0)

		# masterScan
		grid_sizer_1_RunCard.Add((10,10))
		grid_sizer_1_RunCard.Add(self.label_MasterScanSection, 0, wx.LEFT, border_labels)
		grid_sizer_7_textBrowse_V = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_8_MasterScanSection = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_8_MasterScanSection.Add(self.text_ctrl_MasterScanSection, 0, wx.ALL, 10)
		grid_sizer_8_MasterScanSection.Add(self.button_Browse_MasterScan, 0, wx.ALL, 5)
		grid_sizer_7_textBrowse_V.Add(grid_sizer_8_MasterScanSection, 1, wx.EXPAND, 0)
		grid_sizer_1_RunCard.Add(grid_sizer_7_textBrowse_V, 0, 0, 0)

		# output
		grid_sizer_1_RunCard.Add(self.label_OutputSection, 0, wx.LEFT, border_labels)
		grid_sizer_9_OutputSection = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_9_OutputSection.Add(self.text_ctrl_OutputSection, 0, wx.ALL, 10)
		grid_sizer_9_OutputSection.Add(self.button_Browse_OutputSection, 0, wx.ALL, 5)
		grid_sizer_9_OutputSection.Add(self.button_Open_OutputSection, 0, wx.ALL, 5)
		grid_sizer_10_textBrowse_V = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_10_textBrowse_V.Add(grid_sizer_9_OutputSection, 1, wx.EXPAND, 0)
		grid_sizer_1_RunCard.Add(grid_sizer_10_textBrowse_V, 0, 0, 0)

		# options
		grid_sizer_1_RunCard.Add(self.label_RunOptions, 0, wx.LEFT|wx.BOTTOM|wx.EXPAND, border_labels)

		grid_sizer_29_OptionsSection = wx.GridBagSizer(1,6)
		grid_sizer_29_OptionsSection.Add(self.label_RunOptions_tolerance, (0,0), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_29_OptionsSection.Add(self.label_RunOptions_MS, (0,1), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_29_OptionsSection.Add(self.text_ctrl_RunOptions_MS, (0,2), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_29_OptionsSection.Add(self.choice_RunOptions_MS_type, (0,3), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_29_OptionsSection.Add(self.label_RunOptions_MSMS, (0,4), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_29_OptionsSection.Add(self.text_ctrl_RunOptions_MSMS, (0,5), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		grid_sizer_29_OptionsSection.Add(self.choice_RunOptions_MSMS_type, (0,6), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)

		#grid_sizer_29_OptionsSection.Add(self.label_RunOptions_minocc, (1,0), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		#grid_sizer_29_OptionsSection.Add(self.label_RunOptions_MS_minocc, (1,1), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		#grid_sizer_29_OptionsSection.Add(self.text_ctrl_RunOptions_MS_minocc, (1,2), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		#grid_sizer_29_OptionsSection.Add(self.label_RunOptions_MSMS_minocc, (1,4), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)
		#grid_sizer_29_OptionsSection.Add(self.text_ctrl_RunOptions_MSMS_minocc, (1,5), wx.DefaultSpan, wx.ALL|wx.EXPAND, 2)

		grid_sizer_1_RunCard.Add(grid_sizer_29_OptionsSection, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_1_RunCard.Add((20,20))

		grid_sizer_24_OptionsSection = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_11_OptionsSection = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_11_OptionsSection.Add(self.checkBox_OptionsSection_isocorrect_ms, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_11_OptionsSection.Add(self.checkBox_OptionsSection_isocorrect_msms, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_11_OptionsSection.Add(self.checkBox_OptionsSection_complement_sc, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_26_OptionsSection = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_26_OptionsSection.Add(self.checkBox_OptionsSection_dumpMasterScan, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_13_DumpSection = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_13_DumpSection.Add(self.button_Open_DumpSection, 0, wx.ALL | wx.EXPAND, 5)
		grid_sizer_26_OptionsSection.Add(grid_sizer_13_DumpSection, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_25_OptionsSection = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_25_OptionsSection.Add(self.checkBox_OptionsSection_nohead, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_25_OptionsSection.Add(self.checkBox_OptionsSection_compress, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_25_OptionsSection.Add(self.checkBox_OptionsSection_tabLimited, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_31_OptionsSection = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_31_OptionsSection.Add(self.checkBox_generateStatistics, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_31_OptionsSection.Add(self.checkBox_noPermutations, 0, wx.LEFT | wx.EXPAND, 10)
		grid_sizer_24_OptionsSection.Add(grid_sizer_11_OptionsSection, 0, wx.EXPAND, 0)
		grid_sizer_24_OptionsSection.Add(grid_sizer_25_OptionsSection, 0, wx.EXPAND, 0)
		grid_sizer_24_OptionsSection.Add(grid_sizer_31_OptionsSection, 0, wx.EXPAND, 0)
		grid_sizer_24_OptionsSection.Add(grid_sizer_26_OptionsSection, 0, wx.EXPAND, 0)
		grid_sizer_1_RunCard.Add(grid_sizer_24_OptionsSection, 0, wx.EXPAND, 0)

		# run
		grid_sizer_13_RunButton = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_13_RunButton.Add(self.button_RunLipidX, 0, wx.ALL, 5)
		grid_sizer_1_RunCard.Add(grid_sizer_13_RunButton, 0, wx.ALIGN_CENTER, 0)

		self.notebook_1_pane_3.SetSizer(grid_sizer_1_RunCard_0)

		### Import pane ###
		grid_sizer_2_RunCard = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_2_RunCard_0 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_2_RunCard_0.Add(grid_sizer_2_RunCard, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)

		# file folders
		grid_sizer_2_RunCard.Add((10,80))
		grid_sizer_2_RunCard.Add(self.label_ImportDataSection, 0, wx.LEFT, border_labels)
		grid_sizer_14_textBrowse_V = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_15_ImportDataSection = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_15_ImportDataSection.Add(self.text_ctrl_ImportDataSection, 0, wx.ALL, 10)
		grid_sizer_15_ImportDataSection.Add(self.button_Browse_ImportDataSection, 0, wx.ALL, 5)
		grid_sizer_15_ImportDataSection.Add(self.combo_ctrl_ImportDataSection, 0, wx.ALL, 5)
		grid_sizer_30_ImportDataSection_GroupSamples = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_30_ImportDataSection_pisSpectra = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_30_ImportDataSection_pisSpectra.Add(self.checkBox_importMSMS, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)
		grid_sizer_30_ImportDataSection_pisSpectra.Add(self.checkBox_pisSpectra, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)
		grid_sizer_30_ImportDataSection_GroupSamples.Add(grid_sizer_30_ImportDataSection_pisSpectra, 0, wx.EXPAND, 0)
		grid_sizer_30_ImportDataSection_GroupSamples.Add(self.label_SettingsSection_occupationThr_groups, 0, wx.ALIGN_CENTER|wx.EXPAND|wx.TOP, 15)
		grid_sizer_14_textBrowse_V.Add(grid_sizer_15_ImportDataSection, 0, wx.EXPAND, 0)
		grid_sizer_14_textBrowse_V.Add(grid_sizer_30_ImportDataSection_GroupSamples, 0, wx.ALIGN_RIGHT, 0)
		grid_sizer_2_RunCard.Add(grid_sizer_14_textBrowse_V, 0, 0, 0)

		# output masterscan file
		grid_sizer_2_RunCard.Add((10,40))
		grid_sizer_2_RunCard.Add(self.label_OutputMasterScanSection, 0, wx.LEFT, border_labels)
		grid_sizer_21_textBrowse_V = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_22_OutputMasterScanSection = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_22_OutputMasterScanSection.Add(self.text_ctrl_OutputMasterScanSection, 0, wx.ALL, 10)
		grid_sizer_22_OutputMasterScanSection.Add(self.button_Browse_OutputMasterScanSection, 0, wx.ALL, 5)
		grid_sizer_21_textBrowse_V.Add(grid_sizer_22_OutputMasterScanSection, 1, wx.EXPAND, 0)
		grid_sizer_2_RunCard.Add(grid_sizer_21_textBrowse_V, 0, 0, 0)

		box_sizer_IniSection_V = wx.BoxSizer(wx.VERTICAL)
		box_sizer_IniSection_V.Add(wx.Size(20,210))
		grid_sizer_2_RunCard.Add(box_sizer_IniSection_V, 0, wx.EXPAND, 0)

		self.notebook_1_pane_2.SetSizer(grid_sizer_2_RunCard_0)

		##############################
		### Import Settings ###

		sizeBorder = 5

		# ini file
		box_sizer_ImportSettings = wx.BoxSizer(wx.VERTICAL)
		box_sizer_ImportSettings.Add((10,10))
		box_sizer_ImportSettings.Add(self.label_LoadIniSection, 0, wx.LEFT, border_labels)

		grid_sizer_16_textBrowse_V = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_17_LoadIniSection = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_17_LoadIniSection.Add(self.text_ctrl_LoadIniSection, 0, wx.ALL, 10)
		grid_sizer_17_LoadIniSection.Add(self.button_Browse_LoadIniSection, 0, wx.ALL, 5)
		grid_sizer_16_textBrowse_V.Add(grid_sizer_17_LoadIniSection, 1, wx.EXPAND, 0)

		box_sizer_ImportSettings.Add(grid_sizer_16_textBrowse_V, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		box_sizer_ImportSettings.Add((5, 5))
		box_sizer_ImportSettings.Add(self.static_line_LoadIniSection, 0, wx.ALIGN_CENTER_HORIZONTAL, 20)
		box_sizer_ImportSettings.Add((10, 10))

		# set settings
		box_sizer_ImportSettings.Add(self.label_SelectSettingSection, 0, wx.LEFT, border_labels)
		box_sizer_ImportSettings.Add((10,10))
		box_sizer_ImportSettings_SelectConfiguration = wx.BoxSizer(wx.VERTICAL)
		box_sizer_ImportSettings_SelectConfiguration.Add(self.choice_SelectSettingSection, 0, wx.LEFT, 20)
		box_sizer_ImportSettings.Add(box_sizer_ImportSettings_SelectConfiguration, 0, wx.ALIGN_CENTER_HORIZONTAL, 20)
		box_sizer_ImportSettings.Add((20,20))

		### start settings ###
		grid_sizer_19_SettingsSection_gridBag = wx.GridBagSizer(10,8)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_selectionWindow, (0,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_selectionWindow, (0,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_selectionWindow_unit, (0,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		box_sizer_SettingsSection_buttons = wx.BoxSizer(wx.HORIZONTAL)
		box_sizer_SettingsSection_buttons.Add(self.button_Save_LoadIniSection)
		box_sizer_SettingsSection_buttons.Add(self.button_SaveAs_LoadIniSection)
		box_sizer_SettingsSection_buttons.Add(self.button_Delete_LoadIniSection)
		grid_sizer_19_SettingsSection_gridBag.Add(box_sizer_SettingsSection_buttons, (0,6), (2,3), 0, 0)
		#grid_sizer_19_SettingsSection_gridBag.Add(self.button_SaveAs_LoadIniSection, (0,6), wx.DefaultSpan, 0, 0)
		#grid_sizer_19_SettingsSection_gridBag.Add(self.button_Save_LoadIniSection, (0,7), wx.DefaultSpan, 0, 0)
		#grid_sizer_19_SettingsSection_gridBag.Add(self.button_Delete_LoadIniSection, (1,6), wx.DefaultSpan, 0, 0)

		box_sizer_timerange = wx.BoxSizer(wx.HORIZONTAL)
		box_sizer_timerange.Add(self.text_ctrl_SettingsSection_timerange1)
		#box_sizer_timerange.Add(wx.StaticText(self, -1, " , "))
		box_sizer_timerange.Add(self.text_ctrl_SettingsSection_timerange2)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_timerange, (1,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(box_sizer_timerange, (1,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_timerange_unit, (1,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_calibration, (2,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_calibration_ms, (2,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_calibration_ms, (2,4),
			(1,2), wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_calibration_msms, (2,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_calibration_msms, (2,7),
			(1,2), wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		box_sizer_massrange_ms = wx.BoxSizer(wx.HORIZONTAL)
		box_sizer_massrange_ms.Add(self.text_ctrl_SettingsSection_massrange_ms1)
		#box_sizer_massrange_ms.Add(wx.StaticText(self, -1, " , "))
		box_sizer_massrange_ms.Add(self.text_ctrl_SettingsSection_massrange_ms2)
		box_sizer_massrange_msms = wx.BoxSizer(wx.HORIZONTAL)
		box_sizer_massrange_msms.Add(self.text_ctrl_SettingsSection_massrange_msms1)
		#box_sizer_massrange_msms.Add(wx.StaticText(self, -1, " , "))
		box_sizer_massrange_msms.Add(self.text_ctrl_SettingsSection_massrange_msms2)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_massrange, (3,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_massrange_ms, (3,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(box_sizer_massrange_ms, (3,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_massrange_ms_unit, (3,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_massrange_msms, (3,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(box_sizer_massrange_msms, (3,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_massrange_msms_unit, (3,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resolution, (4,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resolution_ms, (4,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_resolution_ms, (4,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resolution_ms_unit, (4,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resolution_msms, (4,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_resolution_msms, (4,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resolution_msms_unit, (4,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_tolerance, (5,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_tolerance_ms, (5,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_tolerance_ms, (5,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.choice_SettingsSection_tolerance_ms, (5,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		#grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_tolerance_ms_unit, (6,5),
		#	wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_tolerance_msms, (5,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_tolerance_msms, (5,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.choice_SettingsSection_tolerance_msms, (5,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		#grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_tolerance_msms_unit, (6,8),
		#	wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_threshold, (6,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_threshold_ms, (6,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_threshold_ms, (6,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.choice_SettingsSection_threshold_ms, (6,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_threshold_msms, (6,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_threshold_msms, (6,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.choice_SettingsSection_threshold_msms, (6,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resDelta, (7,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resDelta_ms, (7,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_resDelta_ms, (7,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resDelta_ms_unit, (7,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resDelta_msms, (7,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_resDelta_msms, (7,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_resDelta_msms_unit, (7,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_occupationThr, (8,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_occupationThr_ms, (8,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_occupationThr_ms, (8,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_occupationThr_ms_unit, (8,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_occupationThr_msms, (8,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_occupationThr_msms, (8,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_occupationThr_msms_unit, (8,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		#grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_occupationThr_groups, (8,8),
		#	wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_precursorMassShift, (10,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_precursorMassShift, (10,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_precursorMassShift_unit, (10,5),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_filter_ms, (9,4),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_filter_ms, (9,3),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_filter_ms_unit, (9, 5),
												  wx.DefaultSpan, wx.LEFT | wx.TOP | wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_filter_msms, (9,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_filter_msms, (9,1),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_filter_ms_ms, (9,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_filter_msms_unit, (9, 8),
												  wx.DefaultSpan, wx.LEFT | wx.TOP | wx.EXPAND, sizeBorder)

		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_precursorMassShiftOrbi, (10,6),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.text_ctrl_SettingsSection_precursorMassShiftOrbi, (10,7),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)
		grid_sizer_19_SettingsSection_gridBag.Add(self.label_SettingsSection_precursorMassShiftOrbi_unit, (10,8),
			wx.DefaultSpan, wx.LEFT|wx.TOP|wx.EXPAND, sizeBorder)

		box_sizer_ImportSettings.Add(grid_sizer_19_SettingsSection_gridBag)

		grid_sizer_20_RunButton = wx.BoxSizer(wx.VERTICAL)
		#grid_sizer_20_RunButton.Add((10,380))
		grid_sizer_20_RunButton.Add((10,10))
		grid_sizer_20_RunButton.Add(self.button_StartImport, 0, wx.ALL, 5)
		box_sizer_ImportSettings.Add(grid_sizer_20_RunButton, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

		self.notebook_1_pane_5.SetSizer(box_sizer_ImportSettings)

		### Import Settings ###
		##############################
		self.notebook_1.AddPage(self.notebook_1_pane_2, "Import Source")
		self.counterNotebookPages += 1
		self.dictNotebookPages["Import"] = self.counterNotebookPages

		dropTargetProject = GeneralFileDrawerDropTarget(self.notebook_1_pane_2, self.loadProject, 'lxp')
		self.notebook_1_pane_2.SetDropTarget(dropTargetProject)

		self.notebook_1.AddPage(self.notebook_1_pane_5, "Import Settings")
		self.counterNotebookPages += 1
		self.dictNotebookPages["ImportSettings"] = self.counterNotebookPages

		self.notebook_1.AddPage(self.notebook_1_pane_3, "Run")
		self.counterNotebookPages += 1
		self.dictNotebookPages["Run"] = self.counterNotebookPages

		self.notebook_1.AddPage(self.notebook_1_pane_4, "MS Tools")
		self.counterNotebookPages += 1
		self.dictNotebookPages["MSTools"] = self.counterNotebookPages

		sizer_2.Add(self.notebook_1, 1, wx.EXPAND, 0)
		self.counterNotebookPages += 1
		self.dictNotebookPages["Import"] = self.counterNotebookPages
		self.SetAutoLayout(True)
		self.SetSizer(sizer_2)
		self.Layout()

		# end wxGlade

	def writeOutput(self, destination, content):

		if os.path.exists(destination):
			dlgError = wx.MessageDialog(self, f"The file {destination} already exists, \n are you sure you want to overwrite?",
					"File writing error", wx.YES_NO|wx.ICON_QUESTION)
			answer = dlgError.ShowModal()
			if answer == wx.ID_NO:
				return False

		tryAgain = True
		while tryAgain:
			try:
				f = open(destination, 'w')
				f.write(content)
				f.close()
				return True
			except IOError:
				dlgError = wx.MessageDialog(self, "The result cannot be saved. It is probably open by another program. Try again?",
					"File writing error", wx.YES_NO|wx.ICON_QUESTION)
				answer = dlgError.ShowModal()
				if answer == wx.ID_NO:
					tryAgain = False
				dlgError.Destroy()

		return False

# end of class LpdxFrame


class MyApp(wx.App):

	def OnInit(self):
		self.frame = LpdxFrame(None, -1, "")
		self.frame.Show(True)
		self.frame.Center()
		self.SetTopWindow(self.frame)
		return True

def main():

	app = MyApp(0)
	if playSound:
		wx.Sound('../pics/StartApp.wav').Play()
	app.MainLoop()
	## end of the software

if __name__ == "__main__":
	main()
