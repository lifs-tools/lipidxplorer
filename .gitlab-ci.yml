# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  tags:
    - ubuntu-docker

cache:
  paths:
    - build/
    - venv/

stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - release

.template_job:
  image: python:3.7-slim-buster
  before_script:
    - apt-get update -qy
    - apt-get -y install build-essential
    - apt-get -y install libgtk-3-dev
    - apt-get -y install libgstreamer-gl1.0-0 libwxgtk-webview3.0-gtk3-dev
    - apt-get -y install freeglut3-dev
    - apt-get -y install libgstreamer-plugins-base1.0-dev
    - pip install --upgrade wheel==0.33.6
    - pip install --upgrade setuptools==41.6.0
    - pip install pytest-cov
    - python3 -V
    - pip install -r requirements.txt

test-job:   # This job runs in the test stage.
  extends: [ '.template_job' ]
  stage: test    # It only starts when the job in the build stage completes successfully.
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == 'dev'  # Run this job when commits are pushed or merged to 'dev' branch
  script:
    - echo "Running unit tests..."
    - pytest --cov --cov-report term --cov-report xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      cobertura: coverage.xml
#  Use gitlab version bigger than 14.10
#  artifacts:
#    reports:
#      coverage_report:
#        coverage_format: cobertura
#        path: coverage.xml


lint-job:
  stage: test
  image: python:3.7-slim-buster
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == 'dev'  # Run this job when commits are pushed or merged to 'dev' branch
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir pylint
    - pylint --exit-zero --output-format=text src/ | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=$CI_JOB_NAME --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - pylint

pages:
  stage: test
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == 'dev'  # Run this job when commits are pushed or merged to 'dev' branch
  script:
    - echo
  needs:
    - job: lint-job
      artifacts: true
  artifacts:
    paths:
      - pylint


# Windows image should be used in the Windows server based docker later
.windows_template_job:
  #  image: mcr.microsoft.com/windows-cssc/python3.7windows:ltsc2019
  tags:
    - win11
  before_script:
    - echo $env:Path
    - $env:Path += ";C:\ProgramData\chocoportable;C:\Python37\Scripts"
    - echo $env:Path


build-job:      # This job runs in the build stage.
  extends: [ '.windows_template_job' ]
  stage: build  # It only runs when *both* jobs in the test stage complete successfully.
  before_script:
    - echo $CI_JOB_ID
  script:
    - $env:Path += ";C:\ProgramData\chocoportable;C:\Python37\Scripts"
    - echo "Deploying application..."
    - echo $env:Path
    - systeminfo /fo csv | ConvertFrom-Csv | select OS* | Format-List
    - echo $env:Path
    - Set-Variable -Name "time" -Value (date -Format "%H:%m")
    - echo ${time}
    - echo "started by ${GITLAB_USER_NAME}"
    - ./run.ps1
    - pyinstaller --distpath dist --hidden-import pkg_resources.py2_warn src/LipidXplorer.spec
    - dir
    - echo "Application successfully built."
  artifacts:
    paths:
      - dist.zip
  only:
    - dev

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == 'dev'  # Run this job when commits are pushed or merged to 'dev' branch
  script:
    - echo 'running release_job'
  needs:
    - job: build-job
      artifacts: true
  release:
    name: 'Release Executables $CI_COMMIT_SHORT_SHA'
    description: 'Created by pipeline $CI_PIPELINE_IID'
    tag_name: '$CI_COMMIT_SHORT_SHA'
    assets:
      links:
        - name: 'Windows binaries zipped'
          url: 'https://git.mpi-cbg.de/labShevchenko/lx2/-/jobs/artifacts/dev/raw/dist.zip?job=build-job'

#branch-pipeline-job:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "push"'
#  script:
#    - pytest tests
#
#merge-request-pipeline-job:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#  script:
#    - pytest tests
