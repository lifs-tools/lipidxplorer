# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

default:
  tags:
    - ubuntu-docker

stages:          # List of stages for jobs, and their order of execution
  - test
  - deploy

.template_job:
  image: python:3.7-slim-buster
  before_script:
    - apt-get update -qy
    - apt-get -y install build-essential
    - apt-get -y install libgtk-3-dev
    - apt-get -y install libwxgtk-webview3.0-gtk3-dev
    - apt-get -y install freeglut3-dev
    - apt-get -y install libgstreamer-plugins-base1.0-dev
    - python3 -V
    - pip install -r requirements.txt

# Windows image should be used in the Windows server based docker
# Try this after the computer department starts the service
.windows_template_job:
  #  image: mcr.microsoft.com/windows-cssc/python3.7windows:ltsc2019
  tags:
    - win11
  before_script:
    - echo $env:Path
    - dir C:\
    - python -V
    - pip install -r requirements.txt

# Window build
#build-job:       # This job runs in the build stage, which runs first.
#  tags:
#    - windows
#  stage: build
#  script:
#    - echo $env:Path
#    - $env:Path += ";C:\ProgramData\chocolatey;C:\py3\Scripts;C:\Windows\system32\config\systemprofile\.windows-build-tools\"
#    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
#    - choco install python3 --version=$PYTHON_VERSION --yes --force --no-progress --pre -ia="'/D=C:\py3'"
#    - dir C:\Python310\Scripts\
#    - dir C:\py3
#    - refreshenv
#    - python3 --version
#    - systeminfo /fo csv | ConvertFrom-Csv | select OS* | Format-List
#    - echo $env:Path
#    - Set-Variable -Name "time" -Value (date -Format "%H:%m")
#    - echo ${time}
#    - echo "started by ${GITLAB_USER_NAME}"
#    - python ./src/LipidXplorer.py


test-job:   # This job runs in the test stage.
  extends: [ '.template_job' ]
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests..."
    - python3 -m pytest tests

lint-job:
  stage: test
  image: python:3.7-slim-buster
  before_script:
    - pip install pylint pylint-exit anybadge
  script:
    - mkdir pylint
    - pylint --exit-zero --output-format=text src/ | tee ./pylint/pylint.log || pylint-exit $?
    - PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' ./pylint/pylint.log)
    - anybadge --label=$CI_JOB_NAME --file=pylint/pylint.svg --value=$PYLINT_SCORE 2=red 4=orange 8=yellow 10=green
    - echo "Pylint score is $PYLINT_SCORE"
  artifacts:
    paths:
      - pylint

pages:
  stage: deploy
  image: alpine:latest
  script:
    - echo
  artifacts:
    paths:
      - pylint
  only:
    refs:
      - dev

#deploy-job:      # This job runs in the deploy stage.
#  extends: [ '.windows_template_job' ]
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  script:
#    - echo "Deploying application..."
#    - echo $env:Path
#    - python3 --version
#    - systeminfo /fo csv | ConvertFrom-Csv | select OS* | Format-List
#    - echo $env:Path
#    - Set-Variable -Name "time" -Value (date -Format "%H:%m")
#    - echo ${time}
#    - echo "started by ${GITLAB_USER_NAME}"
#    - pyinstaller src/LipidXplorer.spec
#    - echo "Application successfully deployed."

#branch-pipeline-job:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "push"'
#  script:
#    - pytest tests
#
#merge-request-pipeline-job:
#  rules:
#    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#  script:
#    - pytest tests
